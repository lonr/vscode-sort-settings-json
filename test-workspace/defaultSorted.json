{
  // Controls the font size in pixels.
  "editor.fontSize": 12,
  // Format a file on save. A formatter must be available and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, the file will only be formatted when saved explicitly.
  "editor.formatOnSave": false,
  // Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.
  //  - off: An editor with changes is never automatically saved.
  //  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
  //  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
  //  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
  "files.autoSave": "off",
  // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
  //  - null: None
  //  - GitHub.copilot: Your AI pair programmer
  //  - GitHub.copilot-chat: AI chat features powered by Copilot
  //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
  //  - codezombiech.gitignore: Lets you pull .gitignore templates from the https://github.com/github/gitignore repository. Language support for .gitignore files.
  //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
  //  - vscode.json-language-features: Provides rich language support for JSON files.
  //  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - vscode.markdown-language-features: Provides rich language support for Markdown.
  //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
  //  - Oracle.mysql-shell-for-vs-code: The power of MySQL Shell as part of your VS Code workflow.
  //  - vscode.php-language-features: Provides rich language support for PHP files.
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
  //  - humao.rest-client: REST Client for Visual Studio Code
  //  - jock.svg: SVG Coding, Minify, Pretty, Preview All-In-One
  //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
  //  - pranaygp.vscode-css-peek: Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.
  //  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
  //  - bmalehorn.vscode-fish: Fish syntax highlighting and formatting
  //  - ecmel.vscode-html-css: CSS Intellisense for HTML
  //  - stylelint.vscode-stylelint: Official Stylelint extension for Visual Studio Code
  //  - redhat.vscode-xml: XML Language Support by Red Hat
  //  - DotJoshJohnson.xml: XML Formatting, XQuery, and XPath Tools for Visual Studio Code
  //  - streetsidesoftware.code-spell-checker: Spelling checker for source code
  //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
  //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
  //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
  //  - ms-python.debugpy: Python Debugger extension using debugpy.
  //  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
  //  - vscode.emmet: Emmet support for VS Code
  //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
  //  - ms-vscode.extension-test-runner: Runs tests in VS Code extensions
  //  - vscode.git: Git SCM Integration
  //  - vscode.git-base: Git static contributions and pickers.
  //  - vscode.github: GitHub features for VS Code
  //  - vscode.github-authentication: GitHub Authentication Provider
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
  //  - ms-vscode.hexeditor: Allows viewing and editing files in a hex editor
  //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
  //  - vscode.jake: Extension to add Jake capabilities to VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - MariusAlchimavicius.json-to-ts: Convert JSON object to typescript interfaces
  //  - zhuangtongfa.material-theme: Atom's iconic One Dark theme for Visual Studio Code
  //  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
  //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
  //  - vscode.microsoft-authentication: Microsoft authentication provider
  //  - vscode.npm: Extension to add task support for npm scripts.
  //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
  //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
  //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
  //  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
  //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
  //  - clinyong.vscode-css-modules: Visual Studio Code extension for CSS Modules
  //  - github.vscode-github-actions: GitHub Actions workflows and runs for github.com hosted repositories in VS Code
  //  - vscode-icons-team.vscode-icons: Icons for Visual Studio Code
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - LeetCode.vscode-leetcode: Solve LeetCode problems in VS Code
  //  - unional.vscode-sort-package-json: Sort package.json
  "editor.defaultFormatter": null,
  // Controls the font family.
  "editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",
  // Controls how lines should wrap.
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
  //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
  "editor.wordWrap": "off",
  // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders. For example, the File Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude#` setting to define search-specific excludes. Refer to the `#explorer.excludeGitIgnore` setting for ignoring files based on your `.gitignore`.
  "files.exclude": {
    "**/.DS_Store": true,
    "**/.git": true,
    "**/.hg": true,
    "**/.svn": true,
    "**/Thumbs.db": true
  },
  // Specifies the color theme used in the workbench when `window.autoDetectColorScheme` is not enabled.
  "workbench.colorTheme": "Default Dark Modern",
  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,
  // Zoom the font of the editor when using mouse wheel and holding `Cmd`.
  "editor.mouseWheelZoom": false,
  // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": false,
  // Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
  "editor.accessibilityPageSize": 500,
  // Controls if the UI should run in a mode where it is optimized for screen readers.
  //  - auto: Use platform APIs to detect when a Screen Reader is attached.
  //  - on: Optimize for usage with a Screen Reader.
  //  - off: Assume a screen reader is not attached.
  "editor.accessibilitySupport": "auto",
  // Controls whether to allow using variable fonts in the editor.
  "editor.allowVariableFonts": true,
  // Controls whether to allow using variable fonts in the editor in the accessibility mode.
  "editor.allowVariableFontsInAccessibilityMode": false,
  // Controls whether to allow using variable line heights in the editor.
  "editor.allowVariableLineHeights": true,
  // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose brackets.
  //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingBrackets": "languageDefined",
  // Controls whether the editor should automatically close comments after the user adds an opening comment.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose comments.
  //  - beforeWhitespace: Autoclose comments only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingComments": "languageDefined",
  // Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
  //  - always
  //  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
  //  - never
  "editor.autoClosingDelete": "auto",
  // Controls whether the editor should type over closing quotes or brackets.
  //  - always
  //  - auto: Type over closing quotes or brackets only if they were automatically inserted.
  //  - never
  "editor.autoClosingOvertype": "auto",
  // Controls whether the editor should automatically close quotes after the user adds an opening quote.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose quotes.
  //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingQuotes": "languageDefined",
  // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
  //  - none: The editor will not insert indentation automatically.
  //  - keep: The editor will keep the current line's indentation.
  //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
  //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
  //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
  "editor.autoIndent": "full",
  // Controls whether the editor should automatically auto-indent the pasted content.
  "editor.autoIndentOnPaste": false,
  // Controls whether the editor should automatically auto-indent the pasted content when pasted within a string. This takes effect when autoIndentOnPaste is true.
  "editor.autoIndentOnPasteWithinString": true,
  // Controls whether the editor should automatically surround selections when typing quotes or brackets.
  //  - languageDefined: Use language configurations to determine when to automatically surround selections.
  //  - quotes: Surround with quotes but not brackets.
  //  - brackets: Surround with brackets but not quotes.
  //  - never
  "editor.autoSurround": "languageDefined",
  // Controls whether bracket pair colorization is enabled or not. Use `workbench.colorCustomizations` to override the bracket highlight colors.
  "editor.bracketPairColorization.enabled": true,
  // Controls whether each bracket type has its own independent color pool.
  "editor.bracketPairColorization.independentColorPoolPerBracketType": false,
  // Enable triggering `editor.codeActionsOnSave#` when `#files.autoSave` is set to `afterDelay`. Code Actions must be set to `always` to be triggered for window and focus changes.
  "editor.codeActions.triggerOnFocusChange": false,
  // Run Code Actions for the editor on save. Code Actions must be specified and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, Code Actions will only be run when the file is saved explicitly. Example: `"source.organizeImports": "explicit" `
  "editor.codeActionsOnSave": {},
  // Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic.
  "editor.codeActionWidget.includeNearbyQuickFixes": true,
  // Enable/disable showing group headers in the Code Action menu.
  "editor.codeActionWidget.showHeaders": true,
  // Controls whether the editor shows CodeLens.
  "editor.codeLens": true,
  // Controls the font family for CodeLens.
  "editor.codeLensFontFamily": "",
  // Controls the font size in pixels for CodeLens. When set to 0, 90% of `editor.fontSize` is used.
  "editor.codeLensFontSize": 0,
  // Controls whether the editor should render the inline color decorators and color picker.
  "editor.colorDecorators": true,
  // Controls the condition to make a color picker appear from a color decorator.
  //  - clickAndHover: Make the color picker appear both on click and hover of the color decorator
  //  - hover: Make the color picker appear on hover of the color decorator
  //  - click: Make the color picker appear on click of the color decorator
  "editor.colorDecoratorsActivatedOn": "clickAndHover",
  // Controls the max number of color decorators that can be rendered in an editor at once.
  "editor.colorDecoratorsLimit": 500,
  // Enable that the selection with the mouse and keys is doing column selection.
  "editor.columnSelection": false,
  // Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
  "editor.comments.ignoreEmptyLines": true,
  // Controls whether a space character is inserted when commenting.
  "editor.comments.insertSpace": true,
  // Controls whether syntax highlighting should be copied into the clipboard.
  "editor.copyWithSyntaxHighlighting": true,
  // Controls whether inline color decorations should be shown using the default document color provider.
  //  - auto: Show default color decorators only when no extension provides colors decorators.
  //  - always: Always show default color decorators.
  //  - never: Never show default color decorators.
  "editor.defaultColorDecorators": "auto",
  // Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider.
  //  - null: All active folding range providers
  //  - GitHub.copilot: Your AI pair programmer
  //  - GitHub.copilot-chat: AI chat features powered by Copilot
  //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
  //  - codezombiech.gitignore: Lets you pull .gitignore templates from the https://github.com/github/gitignore repository. Language support for .gitignore files.
  //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
  //  - vscode.json-language-features: Provides rich language support for JSON files.
  //  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - vscode.markdown-language-features: Provides rich language support for Markdown.
  //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
  //  - Oracle.mysql-shell-for-vs-code: The power of MySQL Shell as part of your VS Code workflow.
  //  - vscode.php-language-features: Provides rich language support for PHP files.
  //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
  //  - humao.rest-client: REST Client for Visual Studio Code
  //  - jock.svg: SVG Coding, Minify, Pretty, Preview All-In-One
  //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
  //  - pranaygp.vscode-css-peek: Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.
  //  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
  //  - bmalehorn.vscode-fish: Fish syntax highlighting and formatting
  //  - ecmel.vscode-html-css: CSS Intellisense for HTML
  //  - stylelint.vscode-stylelint: Official Stylelint extension for Visual Studio Code
  //  - redhat.vscode-xml: XML Language Support by Red Hat
  //  - DotJoshJohnson.xml: XML Formatting, XQuery, and XPath Tools for Visual Studio Code
  //  - streetsidesoftware.code-spell-checker: Spelling checker for source code
  //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
  //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
  //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
  //  - ms-python.debugpy: Python Debugger extension using debugpy.
  //  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
  //  - vscode.emmet: Emmet support for VS Code
  //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
  //  - ms-vscode.extension-test-runner: Runs tests in VS Code extensions
  //  - vscode.git: Git SCM Integration
  //  - vscode.git-base: Git static contributions and pickers.
  //  - vscode.github: GitHub features for VS Code
  //  - vscode.github-authentication: GitHub Authentication Provider
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
  //  - ms-vscode.hexeditor: Allows viewing and editing files in a hex editor
  //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
  //  - vscode.jake: Extension to add Jake capabilities to VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - MariusAlchimavicius.json-to-ts: Convert JSON object to typescript interfaces
  //  - zhuangtongfa.material-theme: Atom's iconic One Dark theme for Visual Studio Code
  //  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
  //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
  //  - vscode.microsoft-authentication: Microsoft authentication provider
  //  - vscode.npm: Extension to add task support for npm scripts.
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
  //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
  //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
  //  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
  //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
  //  - clinyong.vscode-css-modules: Visual Studio Code extension for CSS Modules
  //  - github.vscode-github-actions: GitHub Actions workflows and runs for github.com hosted repositories in VS Code
  //  - vscode-icons-team.vscode-icons: Icons for Visual Studio Code
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - LeetCode.vscode-leetcode: Solve LeetCode problems in VS Code
  //  - unional.vscode-sort-package-json: Sort package.json
  "editor.defaultFoldingRangeProvider": null,
  // Controls whether the Go to Definition mouse gesture always opens the peek widget.
  "editor.definitionLinkOpensInPeek": false,
  // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
  "editor.detectIndentation": true,
  // Controls whether the editor should allow moving selections via drag and drop.
  "editor.dragAndDrop": true,
  // Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor).
  "editor.dropIntoEditor.enabled": true,
  // Configures the preferred type of edit to use when dropping content.
  //
  // This is an ordered list of edit kinds. The first available edit of a preferred kind will be used.
  "editor.dropIntoEditor.preferences": [],
  // Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.
  //  - afterDrop: Show the drop selector widget after a file is dropped into the editor.
  //  - never: Never show the drop selector widget. Instead the default drop provider is always used.
  "editor.dropIntoEditor.showDropSelector": "afterDrop",
  // Sets whether the EditContext API should be used instead of the text area to power input in the editor.
  "editor.editContext": true,
  // Controls whether copying without a selection copies the current line.
  "editor.emptySelectionClipboard": true,
  // Controls whether the tokenization should happen asynchronously on a web worker.
  "editor.experimental.asyncTokenization": true,
  // Controls whether async tokenization should be logged. For debugging only.
  "editor.experimental.asyncTokenizationLogging": false,
  // Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.
  "editor.experimental.asyncTokenizationVerification": false,
  // Controls whether tree sitter parsing should be turned on for css. This will take precedence over `editor.experimental.treeSitterTelemetry` for css.
  "editor.experimental.preferTreeSitter.css": false,
  // Controls whether tree sitter parsing should be turned on for ini. This will take precedence over `editor.experimental.treeSitterTelemetry` for ini.
  "editor.experimental.preferTreeSitter.ini": false,
  // Controls whether tree sitter parsing should be turned on for regex. This will take precedence over `editor.experimental.treeSitterTelemetry` for regex.
  "editor.experimental.preferTreeSitter.regex": false,
  // Controls whether tree sitter parsing should be turned on for typescript. This will take precedence over `editor.experimental.treeSitterTelemetry` for typescript.
  "editor.experimental.preferTreeSitter.typescript": false,
  // Controls whether tree sitter parsing should be turned on and telemetry collected. Setting `editor.experimental.preferTreeSitter` for specific languages will take precedence.
  "editor.experimental.treeSitterTelemetry": false,
  // Controls whether to use the experimental GPU acceleration to render the editor.
  //  - off: Use regular DOM-based rendering.
  //  - on: Use GPU acceleration.
  "editor.experimentalGpuAcceleration": "off",
  // Controls whether whitespace is rendered with a new, experimental method.
  //  - svg: Use a new rendering method with svgs.
  //  - font: Use a new rendering method with font characters.
  //  - off: Use the stable rendering method.
  "editor.experimentalWhitespaceRendering": "svg",
  // Scrolling speed multiplier when pressing `Alt`.
  "editor.fastScrollSensitivity": 5,
  // Controls whether the editor has code folding enabled.
  "editor.folding": true,
  // Controls whether the editor should highlight folded ranges.
  "editor.foldingHighlight": true,
  // Controls whether the editor automatically collapses import ranges.
  "editor.foldingImportsByDefault": false,
  // The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
  "editor.foldingMaximumRegions": 5000,
  // Controls the strategy for computing folding ranges.
  //  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
  //  - indentation: Use the indentation-based folding strategy.
  "editor.foldingStrategy": "auto",
  // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
  "editor.glyphMargin": true,
  // Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
  "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",
  // Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
  "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",
  // Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
  "editor.gotoLocation.alternativeImplementationCommand": "",
  // Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
  "editor.gotoLocation.alternativeReferenceCommand": "",
  // Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
  "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",
  // This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
  //
  "editor.gotoLocation.multiple": null,
  // Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleDeclarations": "peek",
  // Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleDefinitions": "peek",
  // Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleImplementations": "peek",
  // Controls the behavior the 'Go to References'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleReferences": "peek",
  // Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
  //  - peek: Show Peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a Peek view
  //  - goto: Go to the primary result and enable Peek-less navigation to others
  "editor.gotoLocation.multipleTypeDefinitions": "peek",
  // Controls whether bracket pair guides are enabled or not.
  //  - true: Enables bracket pair guides.
  //  - active: Enables bracket pair guides only for the active bracket pair.
  //  - false: Disables bracket pair guides.
  "editor.guides.bracketPairs": false,
  // Controls whether horizontal bracket pair guides are enabled or not.
  //  - true: Enables horizontal guides as addition to vertical bracket pair guides.
  //  - active: Enables horizontal guides only for the active bracket pair.
  //  - false: Disables horizontal bracket pair guides.
  "editor.guides.bracketPairsHorizontal": "active",
  // Controls whether the editor should highlight the active bracket pair.
  "editor.guides.highlightActiveBracketPair": true,
  // Controls whether the editor should highlight the active indent guide.
  //  - true: Highlights the active indent guide.
  //  - always: Highlights the active indent guide even if bracket guides are highlighted.
  //  - false: Do not highlight the active indent guide.
  "editor.guides.highlightActiveIndentation": true,
  // Controls whether the editor should render indent guides.
  "editor.guides.indentation": true,
  // Controls whether the cursor should be hidden in the overview ruler.
  "editor.hideCursorInOverviewRuler": false,
  // Prefer showing hovers above the line, if there's space.
  "editor.hover.above": true,
  // Controls the delay in milliseconds after which the hover is shown.
  "editor.hover.delay": 300,
  // Controls whether the hover is shown.
  "editor.hover.enabled": true,
  // Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.
  "editor.hover.hidingDelay": 300,
  // Controls whether the hover should remain visible when mouse is moved over it.
  "editor.hover.sticky": true,
  // The number of spaces used for indentation or `"tabSize"` to use the value from `editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation` is on.
  "editor.indentSize": "tabSize",
  // Enables the inlay hints in the editor.
  //  - on: Inlay hints are enabled
  //  - onUnlessPressed: Inlay hints are showing by default and hide when holding Ctrl+Option
  //  - offUnlessPressed: Inlay hints are hidden by default and show when holding Ctrl+Option
  //  - off: Inlay hints are disabled
  "editor.inlayHints.enabled": "on",
  // Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
  "editor.inlayHints.fontFamily": "",
  // Controls font size of inlay hints in the editor. As default the `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
  "editor.inlayHints.fontSize": 0,
  // Maximum overall length of inlay hints, for a single line, before they get truncated by the editor. Set to `0` to never truncate
  "editor.inlayHints.maximumLength": 43,
  // Enables the padding around the inlay hints in the editor.
  "editor.inlayHints.padding": false,
  // Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.
  "editor.inlineCompletionsAccessibilityVerbose": false,
  // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,
  // Defines the bracket symbols that increase or decrease the indentation.
  "editor.language.brackets": null,
  // Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
  "editor.language.colorizedBracketPairs": null,
  // Special handling for large files to disable certain memory intensive features.
  "editor.largeFileOptimizations": true,
  // Controls the letter spacing in pixels.
  "editor.letterSpacing": 0,
  // Enables the Code Action lightbulb in the editor.
  //  - off: Disable the code action menu.
  //  - onCode: Show the code action menu when the cursor is on lines with code.
  //  - on: Show the code action menu when the cursor is on lines with code or on empty lines.
  "editor.lightbulb.enabled": "onCode",
  // Controls the line height.
  //  - Use 0 to automatically compute the line height from the font size.
  //  - Values between 0 and 8 will be used as a multiplier with the font size.
  //  - Values greater than or equal to 8 will be used as effective values.
  "editor.lineHeight": 0,
  // Controls the display of line numbers.
  //  - off: Line numbers are not rendered.
  //  - on: Line numbers are rendered as absolute number.
  //  - relative: Line numbers are rendered as distance in lines to cursor position.
  //  - interval: Line numbers are rendered every 10 lines.
  "editor.lineNumbers": "on",
  // Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.
  "editor.linkedEditing": false,
  // Controls whether the editor should detect links and make them clickable.
  "editor.links": true,
  // Highlight matching brackets.
  "editor.matchBrackets": "always",
  // Lines above this length will not be tokenized for performance reasons
  "editor.maxTokenizationLineLength": 20000,
  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
  "editor.mouseWheelScrollSensitivity": 1,
  // Controls the max number of cursors that can be in an active editor at once.
  "editor.multiCursorLimit": 10000,
  // Merge multiple cursors when they are overlapping.
  "editor.multiCursorMergeOverlapping": true,
  // The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "editor.multiCursorModifier": "alt",
  // Controls pasting when the line count of the pasted text matches the cursor count.
  //  - spread: Each cursor pastes a single line of the text.
  //  - full: Each cursor pastes the full text.
  "editor.multiCursorPaste": "spread",
  // Controls whether occurrences should be highlighted across open files.
  //  - off: Does not highlight occurrences.
  //  - singleFile: Highlights occurrences only in the current file.
  //  - multiFile: Experimental: Highlights occurrences across all valid open files.
  "editor.occurrencesHighlight": "singleFile",
  // Controls the delay in milliseconds after which occurrences are highlighted.
  "editor.occurrencesHighlightDelay": 0,
  // Controls the cursor style in overtype input mode.
  "editor.overtypeCursorStyle": "block",
  // Controls whether pasting should overtype.
  "editor.overtypeOnPaste": true,
  // Controls whether a border should be drawn around the overview ruler.
  "editor.overviewRulerBorder": true,
  // Controls the amount of space between the bottom edge of the editor and the last line.
  "editor.padding.bottom": 0,
  // Controls the amount of space between the top edge of the editor and the first line.
  "editor.padding.top": 0,
  // Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
  "editor.parameterHints.cycle": true,
  // Enables a pop-up that shows parameter documentation and type information as you type.
  "editor.parameterHints.enabled": true,
  // Controls whether you can paste content in different ways.
  "editor.pasteAs.enabled": true,
  // Configures the preferred type of edit to use when pasting content.
  //
  // This is an ordered list of edit kinds. The first available edit of a preferred kind will be used.
  "editor.pasteAs.preferences": [],
  // Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.
  //  - afterPaste: Show the paste selector widget after content is pasted into the editor.
  //  - never: Never show the paste selector widget. Instead the default pasting behavior is always used.
  "editor.pasteAs.showPasteSelector": "afterPaste",
  // Controls whether to focus the inline editor or the tree in the peek widget.
  //  - tree: Focus the tree when opening peek
  //  - editor: Focus the editor when opening peek
  "editor.peekWidgetDefaultFocus": "tree",
  // Enable/disable the ability to preview changes before renaming
  "editor.rename.enablePreview": true,
  // Deprecated, use `editor.linkedEditing` instead.
  // Controls whether the editor auto renames on type.
  "editor.renameOnType": false,
  // Controls whether the editor should render control characters.
  "editor.renderControlCharacters": true,
  // Render last line number when the file ends with a newline.
  "editor.renderFinalNewline": "on",
  // Controls how the editor should render the current line highlight.
  //  - none
  //  - gutter
  //  - line
  //  - all: Highlights both the gutter and the current line.
  "editor.renderLineHighlight": "line",
  // Controls if the editor should render the current line highlight only when the editor is focused.
  "editor.renderLineHighlightOnlyWhenFocus": false,
  // Controls how the editor should render whitespace characters.
  //  - none
  //  - boundary: Render whitespace characters except for single spaces between words.
  //  - selection: Render whitespace characters only on selected text.
  //  - trailing: Render only trailing whitespace characters.
  //  - all
  "editor.renderWhitespace": "selection",
  // Controls whether selections should have rounded corners.
  "editor.roundedSelection": true,
  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
  "editor.rulers": [],
  // Controls the visibility of the horizontal scrollbar.
  //  - auto: The horizontal scrollbar will be visible only when necessary.
  //  - visible: The horizontal scrollbar will always be visible.
  //  - hidden: The horizontal scrollbar will always be hidden.
  "editor.scrollbar.horizontal": "auto",
  // The height of the horizontal scrollbar.
  "editor.scrollbar.horizontalScrollbarSize": 12,
  // When set, the horizontal scrollbar will not increase the size of the editor's content.
  "editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": false,
  // Controls whether clicks scroll by page or jump to click position.
  "editor.scrollbar.scrollByPage": false,
  // Controls the visibility of the vertical scrollbar.
  //  - auto: The vertical scrollbar will be visible only when necessary.
  //  - visible: The vertical scrollbar will always be visible.
  //  - hidden: The vertical scrollbar will always be hidden.
  "editor.scrollbar.vertical": "auto",
  // The width of the vertical scrollbar.
  "editor.scrollbar.verticalScrollbarSize": 14,
  // Controls the number of extra characters beyond which the editor will scroll horizontally.
  "editor.scrollBeyondLastColumn": 4,
  // Controls whether the editor will scroll beyond the last line.
  "editor.scrollBeyondLastLine": true,
  // Controls whether the editor will scroll when the middle button is pressed.
  "editor.scrollOnMiddleClick": false,
  // Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
  "editor.scrollPredominantAxis": true,
  // Controls whether the editor should highlight matches similar to the selection.
  "editor.selectionHighlight": true,
  // Controls whether the semanticHighlighting is shown for the languages that support it.
  //  - true: Semantic highlighting enabled for all color themes.
  //  - false: Semantic highlighting disabled for all color themes.
  //  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
  "editor.semanticHighlighting.enabled": "configuredByTheme",
  // Overrides editor semantic token color and styles from the currently selected color theme.
  "editor.semanticTokenColorCustomizations": {},
  // Controls strikethrough deprecated variables.
  "editor.showDeprecated": true,
  // Controls when the folding controls on the gutter are shown.
  //  - always: Always show the folding controls.
  //  - never: Never show the folding controls and reduce the gutter size.
  //  - mouseover: Only show the folding controls when the mouse is over the gutter.
  "editor.showFoldingControls": "mouseover",
  // Controls fading out of unused code.
  "editor.showUnused": true,
  // Whether leading and trailing whitespace should always be selected.
  "editor.smartSelect.selectLeadingAndTrailingWhitespace": true,
  // Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.
  "editor.smartSelect.selectSubwords": true,
  // Controls whether the editor will scroll using an animation.
  "editor.smoothScrolling": false,
  // Controls if surround-with-snippets or file template snippets show as Code Actions.
  "editor.snippets.codeActions.enabled": true,
  // Keep peek editors open even when double-clicking their content or when hitting `Escape`.
  "editor.stablePeek": false,
  // Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.
  "editor.stickyScroll.defaultModel": "outlineModel",
  // Shows the nested current scopes during the scroll at the top of the editor.
  "editor.stickyScroll.enabled": true,
  // Defines the maximum number of sticky lines to show.
  "editor.stickyScroll.maxLineCount": 5,
  // Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.
  "editor.stickyScroll.scrollWithEditor": true,
  // Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
  "editor.stickyTabStops": false,
  // Enables tab completions.
  //  - on: Tab complete will insert the best matching suggestion when pressing tab.
  //  - off: Disable tab completions.
  //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": "off",
  // Controls whether the editor receives tabs or defers them to the workbench for navigation.
  "editor.tabFocusMode": false,
  // Overrides editor syntax colors and font style from the currently selected color theme.
  "editor.tokenColorCustomizations": {
    "[*Dark*]": {
      "textMateRules": [
        {
          "scope": "ref.matchtext",
          "settings": {
            "foreground": "#fff"
          }
        }
      ]
    },
    "[*Light*]": {
      "textMateRules": [
        {
          "scope": "ref.matchtext",
          "settings": {
            "foreground": "#000"
          }
        }
      ]
    }
  },
  // Remove trailing auto inserted whitespace.
  "editor.trimAutoWhitespace": true,
  // Controls whether clicking on the empty content after a folded line will unfold the line.
  "editor.unfoldOnClickAfterEndOfLine": false,
  // Defines allowed characters that are not being highlighted.
  "editor.unicodeHighlight.allowedCharacters": {},
  // Unicode characters that are common in allowed locales are not being highlighted.
  "editor.unicodeHighlight.allowedLocales": {
    "_os": true,
    "_vscode": true
  },
  // Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
  "editor.unicodeHighlight.ambiguousCharacters": true,
  // Controls whether characters in comments should also be subject to Unicode highlighting.
  "editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",
  // Controls whether characters in strings should also be subject to Unicode highlighting.
  "editor.unicodeHighlight.includeStrings": true,
  // Controls whether characters that just reserve space or have no width at all are highlighted.
  "editor.unicodeHighlight.invisibleCharacters": true,
  // Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
  "editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",
  // Remove unusual line terminators that might cause problems.
  //  - auto: Unusual line terminators are automatically removed.
  //  - off: Unusual line terminators are ignored.
  //  - prompt: Unusual line terminators prompt to be removed.
  "editor.unusualLineTerminators": "prompt",
  // Spaces and tabs are inserted and deleted in alignment with tab stops.
  "editor.useTabStops": true,
  // Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.
  //  - normal: Use the default line break rule.
  //  - keepAll: Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.
  "editor.wordBreak": "normal",
  //
  "editor.wordSegmenterLocales": null,
  // Characters that will be used as word separators when doing word related navigations or operations.
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
  // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
  "editor.wordWrapColumn": 80,
  // Controls the indentation of wrapped lines.
  //  - none: No indentation. Wrapped lines begin at column 1.
  //  - same: Wrapped lines get the same indentation as the parent.
  //  - indent: Wrapped lines get +1 indentation toward the parent.
  //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
  "editor.wrappingIndent": "same",
  // Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.
  //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
  //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
  "editor.wrappingStrategy": "simple",
  // Control the cursor animation style.
  "editor.cursorBlinking": "blink",
  // Controls whether the smooth caret animation should be enabled.
  //  - off: Smooth caret animation is disabled.
  //  - explicit: Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.
  //  - on: Smooth caret animation is always enabled.
  "editor.cursorSmoothCaretAnimation": "off",
  // Controls the cursor style in insert input mode.
  "editor.cursorStyle": "line",
  // Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
  "editor.cursorSurroundingLines": 0,
  // Controls when `editor.cursorSurroundingLines` should be enforced.
  //  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
  //  - all: `cursorSurroundingLines` is enforced always.
  "editor.cursorSurroundingLinesStyle": "default",
  // Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
  "editor.cursorWidth": 0,
  // Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
  "editor.find.addExtraSpaceOnTop": true,
  // Controls the condition for turning on Find in Selection automatically.
  //  - never: Never turn on Find in Selection automatically (default).
  //  - always: Always turn on Find in Selection automatically.
  //  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
  "editor.find.autoFindInSelection": "never",
  // Controls whether the cursor should jump to find matches while typing.
  "editor.find.cursorMoveOnType": true,
  // Controls whether the Find Widget should search as you type.
  "editor.find.findOnType": true,
  // Controls whether the Find Widget should read or modify the shared find clipboard on macOS.
  "editor.find.globalFindClipboard": false,
  // Controls how the find widget history should be stored
  //  - never: Do not store search history from the find widget.
  //  - workspace: Store search history across the active workspace
  "editor.find.history": "workspace",
  // Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
  "editor.find.loop": true,
  // Controls how the replace widget history should be stored
  //  - never: Do not store history from the replace widget.
  //  - workspace: Store replace history across the active workspace
  "editor.find.replaceHistory": "workspace",
  // Controls whether the search string in the Find Widget is seeded from the editor selection.
  //  - never: Never seed search string from the editor selection.
  //  - always: Always seed search string from the editor selection, including word at cursor position.
  //  - selection: Only seed search string from the editor selection.
  "editor.find.seedSearchStringFromSelection": "always",
  // Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
  "editor.fontLigatures": false,
  // Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.
  "editor.fontVariations": false,
  // Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "editor.fontWeight": "normal",
  // Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
  //  - file: Format the whole file.
  //  - modifications: Format modifications (requires source control).
  //  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
  "editor.formatOnSaveMode": "file",
  // Controls whether the editor should automatically format the line after typing.
  "editor.formatOnType": false,
  // Controls whether the editor shows CodeLens.
  "diffEditor.codeLens": false,
  //
  //  - legacy: Uses the legacy diffing algorithm.
  //  - advanced: Uses the advanced diffing algorithm.
  "diffEditor.diffAlgorithm": "advanced",
  // Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.
  "diffEditor.experimental.showEmptyDecorations": true,
  // Controls whether the diff editor should show detected code moves.
  "diffEditor.experimental.showMoves": false,
  // If enabled and the editor uses the inline view, word changes are rendered inline.
  "diffEditor.experimental.useTrueInlineView": false,
  // Controls how many lines are used as context when comparing unchanged regions.
  "diffEditor.hideUnchangedRegions.contextLineCount": 3,
  // Controls whether the diff editor shows unchanged regions.
  "diffEditor.hideUnchangedRegions.enabled": false,
  // Controls how many lines are used as a minimum for unchanged regions.
  "diffEditor.hideUnchangedRegions.minimumLineCount": 3,
  // Controls how many lines are used for unchanged regions.
  "diffEditor.hideUnchangedRegions.revealLineCount": 20,
  // When enabled, the diff editor ignores changes in leading or trailing whitespace.
  "diffEditor.ignoreTrimWhitespace": true,
  // Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
  "diffEditor.maxComputationTime": 5000,
  // Maximum file size in MB for which to compute diffs. Use 0 for no limit.
  "diffEditor.maxFileSize": 50,
  // When enabled, the diff editor shows a special gutter for revert and stage actions.
  "diffEditor.renderGutterMenu": true,
  // Controls whether the diff editor shows +/- indicators for added/removed changes.
  "diffEditor.renderIndicators": true,
  // When enabled, the diff editor shows arrows in its glyph margin to revert changes.
  "diffEditor.renderMarginRevertIcon": true,
  // Controls whether the diff editor shows the diff side by side or inline.
  "diffEditor.renderSideBySide": true,
  // If the diff editor width is smaller than this value, the inline view is used.
  "diffEditor.renderSideBySideInlineBreakpoint": 900,
  // If enabled and the editor width is too small, the inline view is used.
  "diffEditor.useInlineViewWhenSpaceIsLimited": true,
  //
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
  "diffEditor.wordWrap": "inherit",
  // Enable experimental multi diff editor.
  "multiDiffEditor.experimental.enabled": true,
  // Controls whether the minimap is hidden automatically.
  "editor.minimap.autohide": false,
  // Controls whether the minimap is shown.
  "editor.minimap.enabled": true,
  // Defines the regular expression used to find section headers in comments. The regex must contain a named match group `label` (written as `(?<label>.+)`) that encapsulates the section header, otherwise it will not work. Optionally you can include another match group named `separator`. Use \n in the pattern to match multi-line headers.
  "editor.minimap.markSectionHeaderRegex": "\\bMARK:\\s*(?<separator>-?)\\s*(?<label>.*)$",
  // Limit the width of the minimap to render at most a certain number of columns.
  "editor.minimap.maxColumn": 120,
  // Render the actual characters on a line as opposed to color blocks.
  "editor.minimap.renderCharacters": true,
  // Scale of content drawn in the minimap: 1, 2 or 3.
  "editor.minimap.scale": 1,
  // Controls the font size of section headers in the minimap.
  "editor.minimap.sectionHeaderFontSize": 9,
  // Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.
  "editor.minimap.sectionHeaderLetterSpacing": 1,
  // Controls whether MARK: comments are shown as section headers in the minimap.
  "editor.minimap.showMarkSectionHeaders": true,
  // Controls whether named regions are shown as section headers in the minimap.
  "editor.minimap.showRegionSectionHeaders": true,
  // Controls when the minimap slider is shown.
  "editor.minimap.showSlider": "mouseover",
  // Controls the side where to render the minimap.
  "editor.minimap.side": "right",
  // Controls the size of the minimap.
  //  - proportional: The minimap has the same size as the editor contents (and might scroll).
  //  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
  //  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
  "editor.minimap.size": "proportional",
  // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
  "editor.acceptSuggestionOnCommitCharacter": true,
  // Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
  //  - on
  //  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
  //  - off
  "editor.acceptSuggestionOnEnter": "on",
  // Controls whether showing a suggestion will shift the code to make space for the suggestion inline.
  "editor.inlineSuggest.edits.allowCodeShifting": "always",
  // Controls whether larger suggestions can be shown side by side.
  //  - auto: Larger suggestions will show side by side if there is enough space, otherwise they will be shown below.
  //  - never: Larger suggestions are never shown side by side and will always be shown below.
  "editor.inlineSuggest.edits.renderSideBySide": "auto",
  // Controls whether the suggestion will show as collapsed until jumping to it.
  "editor.inlineSuggest.edits.showCollapsed": false,
  // Controls whether to automatically show inline suggestions in the editor.
  "editor.inlineSuggest.enabled": true,
  // Suppresses inline completions for specified extension IDs -- comma separated.
  "editor.inlineSuggest.experimental.suppressInlineSuggestions": "",
  // Controls whether to trigger a command when the inline suggestion provider changes.
  "editor.inlineSuggest.experimental.triggerCommandOnProviderChange": true,
  // Controls the font family of the inline suggestions.
  "editor.inlineSuggest.fontFamily": "default",
  // Controls when to show the inline suggestion toolbar.
  //  - always: Show the inline suggestion toolbar whenever an inline suggestion is shown.
  //  - onHover: Show the inline suggestion toolbar when hovering over an inline suggestion.
  //  - never: Never show the inline suggestion toolbar.
  "editor.inlineSuggest.showToolbar": "onHover",
  // Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.
  "editor.inlineSuggest.suppressSuggestions": false,
  // Controls whether to show syntax highlighting for inline suggestions in the editor.
  "editor.inlineSuggest.syntaxHighlightingEnabled": true,
  // Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the `editor.suggestOnTriggerCharacters`-setting which controls if suggestions are triggered by special characters.
  "editor.quickSuggestions": {
    "comments": "off",
    "other": "on",
    "strings": "off"
  },
  // Controls the delay in milliseconds after which quick suggestions will show up.
  "editor.quickSuggestionsDelay": 10,
  // Control whether inline suggestions are announced by a screen reader.
  "editor.screenReaderAnnounceInlineSuggestion": true,
  // Controls whether snippets are shown with other suggestions and how they are sorted.
  //  - top: Show snippet suggestions on top of other suggestions.
  //  - bottom: Show snippet suggestions below other suggestions.
  //  - inline: Show snippets suggestions with other suggestions.
  //  - none: Do not show snippet suggestions.
  "editor.snippetSuggestions": "inline",
  // This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
  //
  "editor.suggest.filteredTypes": {},
  // Controls whether filtering and sorting suggestions accounts for small typos.
  "editor.suggest.filterGraceful": true,
  // Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
  //  - insert: Insert suggestion without overwriting text right of the cursor.
  //  - replace: Insert suggestion and overwrite text right of the cursor.
  "editor.suggest.insertMode": "insert",
  // Controls whether sorting favors words that appear close to the cursor.
  "editor.suggest.localityBonus": false,
  // When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.
  "editor.suggest.matchOnWordStartOnly": true,
  // This setting is deprecated. The suggest widget can now be resized.
  //
  "editor.suggest.maxVisibleSuggestions": 0,
  // Controls whether to preview the suggestion outcome in the editor.
  "editor.suggest.preview": false,
  // Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.
  //  - always: Always select a suggestion when automatically triggering IntelliSense.
  //  - never: Never select a suggestion when automatically triggering IntelliSense.
  //  - whenTriggerCharacter: Select a suggestion only when triggering IntelliSense from a trigger character.
  //  - whenQuickSuggestion: Select a suggestion only when triggering IntelliSense as you type.
  "editor.suggest.selectionMode": "always",
  // Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
  "editor.suggest.shareSuggestSelections": false,
  // When enabled IntelliSense shows `class`-suggestions.
  "editor.suggest.showClasses": true,
  // When enabled IntelliSense shows `color`-suggestions.
  "editor.suggest.showColors": true,
  // When enabled IntelliSense shows `constant`-suggestions.
  "editor.suggest.showConstants": true,
  // When enabled IntelliSense shows `constructor`-suggestions.
  "editor.suggest.showConstructors": true,
  // When enabled IntelliSense shows `customcolor`-suggestions.
  "editor.suggest.showCustomcolors": true,
  // When enabled IntelliSense shows `deprecated`-suggestions.
  "editor.suggest.showDeprecated": true,
  // When enabled IntelliSense shows `enumMember`-suggestions.
  "editor.suggest.showEnumMembers": true,
  // When enabled IntelliSense shows `enum`-suggestions.
  "editor.suggest.showEnums": true,
  // When enabled IntelliSense shows `event`-suggestions.
  "editor.suggest.showEvents": true,
  // When enabled IntelliSense shows `field`-suggestions.
  "editor.suggest.showFields": true,
  // When enabled IntelliSense shows `file`-suggestions.
  "editor.suggest.showFiles": true,
  // When enabled IntelliSense shows `folder`-suggestions.
  "editor.suggest.showFolders": true,
  // When enabled IntelliSense shows `function`-suggestions.
  "editor.suggest.showFunctions": true,
  // Controls whether to show or hide icons in suggestions.
  "editor.suggest.showIcons": true,
  // Controls whether suggest details show inline with the label or only in the details widget.
  "editor.suggest.showInlineDetails": true,
  // When enabled IntelliSense shows `interface`-suggestions.
  "editor.suggest.showInterfaces": true,
  // When enabled IntelliSense shows `issues`-suggestions.
  "editor.suggest.showIssues": true,
  // When enabled IntelliSense shows `keyword`-suggestions.
  "editor.suggest.showKeywords": true,
  // When enabled IntelliSense shows `method`-suggestions.
  "editor.suggest.showMethods": true,
  // When enabled IntelliSense shows `module`-suggestions.
  "editor.suggest.showModules": true,
  // When enabled IntelliSense shows `operator`-suggestions.
  "editor.suggest.showOperators": true,
  // When enabled IntelliSense shows `property`-suggestions.
  "editor.suggest.showProperties": true,
  // When enabled IntelliSense shows `reference`-suggestions.
  "editor.suggest.showReferences": true,
  // When enabled IntelliSense shows `snippet`-suggestions.
  "editor.suggest.showSnippets": true,
  // Controls the visibility of the status bar at the bottom of the suggest widget.
  "editor.suggest.showStatusBar": false,
  // When enabled IntelliSense shows `struct`-suggestions.
  "editor.suggest.showStructs": true,
  // When enabled IntelliSense shows `typeParameter`-suggestions.
  "editor.suggest.showTypeParameters": true,
  // When enabled IntelliSense shows `unit`-suggestions.
  "editor.suggest.showUnits": true,
  // When enabled IntelliSense shows `user`-suggestions.
  "editor.suggest.showUsers": true,
  // When enabled IntelliSense shows `value`-suggestions.
  "editor.suggest.showValues": true,
  // When enabled IntelliSense shows `variable`-suggestions.
  "editor.suggest.showVariables": true,
  // When enabled IntelliSense shows `text`-suggestions.
  "editor.suggest.showWords": true,
  // Controls whether an active snippet prevents quick suggestions.
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
  "editor.suggestFontSize": 0,
  // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
  "editor.suggestLineHeight": 0,
  // Controls whether suggestions should automatically show up when typing trigger characters.
  "editor.suggestOnTriggerCharacters": true,
  // Controls how suggestions are pre-selected when showing the suggest list.
  //  - first: Always select the first suggestion.
  //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
  //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
  "editor.suggestSelection": "first",
  // Controls whether completions should be computed based on words in the document and from which documents they are computed.
  //  - off: Turn off Word Based Suggestions.
  //  - currentDocument: Only suggest words from the active document.
  //  - matchingDocuments: Suggest words from all open documents of the same language.
  //  - allDocuments: Suggest words from all open documents.
  "editor.wordBasedSuggestions": "matchingDocuments",
  // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) of file associations to languages (for example `"*.extension": "html"`). Patterns will match on the absolute path of a file if they contain a path separator and will match on the name of the file otherwise. These have precedence over the default associations of the languages installed.
  "files.associations": {},
  // When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
  "files.autoGuessEncoding": false,
  // Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
  "files.autoSaveDelay": 1000,
  // When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that have no errors reported in them at the time the auto save is triggered. Only applies when `files.autoSave` is enabled.
  "files.autoSaveWhenNoErrors": false,
  // When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that are inside the opened workspace. Only applies when `files.autoSave` is enabled.
  "files.autoSaveWorkspaceFilesOnly": false,
  // List of character set encodings that the editor should attempt to guess in the order they are listed. In case it cannot be determined, `files.encoding` is respected
  //  - utf8: UTF-8
  //  - utf16le: UTF-16 LE
  //  - utf16be: UTF-16 BE
  //  - windows1252: Western (Windows 1252)
  //  - windows1250: Central European (Windows 1250)
  //  - iso88592: Central European (ISO 8859-2)
  //  - windows1251: Cyrillic (Windows 1251)
  //  - cp866: Cyrillic (CP 866)
  //  - cp1125: Cyrillic (CP 1125)
  //  - iso88595: Cyrillic (ISO 8859-5)
  //  - koi8r: Cyrillic (KOI8-R)
  //  - windows1253: Greek (Windows 1253)
  //  - iso88597: Greek (ISO 8859-7)
  //  - windows1255: Hebrew (Windows 1255)
  //  - iso88598: Hebrew (ISO 8859-8)
  //  - cp950: Traditional Chinese (Big5)
  //  - shiftjis: Japanese (Shift JIS)
  //  - eucjp: Japanese (EUC-JP)
  //  - euckr: Korean (EUC-KR)
  //  - gb2312: Simplified Chinese (GB 2312)
  "files.candidateGuessEncodings": [],
  // The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.
  "files.defaultLanguage": "",
  // Default path for file dialogs, overriding user's home path. Only used in the absence of a context-specific path, such as most recently opened file or folder.
  "files.dialog.defaultPath": "",
  // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
  "files.enableTrash": true,
  // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
  //  - utf8: UTF-8
  //  - utf8bom: UTF-8 with BOM
  //  - utf16le: UTF-16 LE
  //  - utf16be: UTF-16 BE
  //  - windows1252: Western (Windows 1252)
  //  - iso88591: Western (ISO 8859-1)
  //  - iso88593: Western (ISO 8859-3)
  //  - iso885915: Western (ISO 8859-15)
  //  - macroman: Western (Mac Roman)
  //  - cp437: DOS (CP 437)
  //  - windows1256: Arabic (Windows 1256)
  //  - iso88596: Arabic (ISO 8859-6)
  //  - windows1257: Baltic (Windows 1257)
  //  - iso88594: Baltic (ISO 8859-4)
  //  - iso885914: Celtic (ISO 8859-14)
  //  - windows1250: Central European (Windows 1250)
  //  - iso88592: Central European (ISO 8859-2)
  //  - cp852: Central European (CP 852)
  //  - windows1251: Cyrillic (Windows 1251)
  //  - cp866: Cyrillic (CP 866)
  //  - cp1125: Cyrillic (CP 1125)
  //  - iso88595: Cyrillic (ISO 8859-5)
  //  - koi8r: Cyrillic (KOI8-R)
  //  - koi8u: Cyrillic (KOI8-U)
  //  - iso885913: Estonian (ISO 8859-13)
  //  - windows1253: Greek (Windows 1253)
  //  - iso88597: Greek (ISO 8859-7)
  //  - windows1255: Hebrew (Windows 1255)
  //  - iso88598: Hebrew (ISO 8859-8)
  //  - iso885910: Nordic (ISO 8859-10)
  //  - iso885916: Romanian (ISO 8859-16)
  //  - windows1254: Turkish (Windows 1254)
  //  - iso88599: Turkish (ISO 8859-9)
  //  - windows1258: Vietnamese (Windows 1258)
  //  - gbk: Simplified Chinese (GBK)
  //  - gb18030: Simplified Chinese (GB18030)
  //  - cp950: Traditional Chinese (Big5)
  //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
  //  - shiftjis: Japanese (Shift JIS)
  //  - eucjp: Japanese (EUC-JP)
  //  - euckr: Korean (EUC-KR)
  //  - windows874: Thai (Windows 874)
  //  - iso885911: Latin/Thai (ISO 8859-11)
  //  - koi8ru: Cyrillic (KOI8-RU)
  //  - koi8t: Tajik (KOI8-T)
  //  - gb2312: Simplified Chinese (GB 2312)
  //  - cp865: Nordic DOS (CP 865)
  //  - cp850: Western European DOS (CP 850)
  "files.encoding": "utf8",
  // The default end of line character.
  //  - \n: LF
  //  - \r\n: CRLF
  //  - auto: Uses operating system specific end of line character.
  "files.eol": "auto",
  // [Hot Exit](https://aka.ms/vscode-hot-exit) controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
  //  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
  //  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
  //  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
  "files.hotExit": "onExit",
  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": false,
  // Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
  "files.participants.timeout": 60000,
  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from being marked as read-only if they match as a result of the `files.readonlyInclude` setting. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Files from readonly file system providers will always be read-only independent of this setting.
  "files.readonlyExclude": {},
  // Marks files as read-only when their file permissions indicate as such. This can be overridden via `files.readonlyInclude#` and `#files.readonlyExclude` settings.
  "files.readonlyFromPermissions": false,
  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to mark as read-only. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. You can exclude matching paths via the `files.readonlyExclude` setting. Files from readonly file system providers will always be read-only independent of this setting.
  "files.readonlyInclude": {},
  // Controls if files that were part of a refactoring are saved automatically
  "files.refactoring.autoSave": true,
  // Restore the undo stack when a file is reopened.
  "files.restoreUndoStack": true,
  // A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
  //  - askUser: Will refuse to save and ask for resolving the save conflict manually.
  //  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
  "files.saveConflictResolution": "askUser",
  // Enables the simple file dialog for opening and saving files and folders. The simple file dialog replaces the system file dialog when enabled.
  "files.simpleDialog.enable": false,
  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": false,
  // When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": false,
  // When enabled, trailing whitespace will be removed from multiline strings and regexes will be removed on save or when executing 'editor.action.trimTrailingWhitespace'. This can cause whitespace to not be trimmed from lines when there isn't up-to-date token information.
  "files.trimTrailingWhitespaceInRegexAndStrings": true,
  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from file watching. Paths can either be relative to the watched folder or absolute. Glob patterns are matched relative from the watched folder. When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/.hg/store/**": true
  },
  // Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
  "files.watcherInclude": [],
  // Controls whether to automatically resume available working changes stored in the cloud for the current workspace.
  //  - onReload: Automatically resume available working changes from the cloud on window reload.
  //  - off: Never attempt to resume working changes from the cloud.
  "workbench.cloudChanges.autoResume": "onReload",
  // Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.
  //  - prompt: Prompt the user to sign in to store working changes in the cloud with Continue Working On.
  //  - off: Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.
  "workbench.cloudChanges.continueOn": "prompt",
  // Controls where the command palette should ask chat questions.
  //  - chatView: Ask chat questions in the Chat view.
  //  - quickChat: Ask chat questions in Quick Chat.
  "workbench.commandPalette.experimental.askChatLocation": "chatView",
  // Controls whether the command palette should include similar commands. You must have an extension installed that provides Natural Language support.
  "workbench.commandPalette.experimental.enableNaturalLanguageSearch": true,
  // Controls whether the command palette should have a list of commonly used commands.
  "workbench.commandPalette.experimental.suggestCommands": false,
  // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
  "workbench.commandPalette.history": 50,
  // Controls whether the last typed input to the command palette should be restored when opening it the next time.
  "workbench.commandPalette.preserveInput": false,
  // Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `"*.hex": "hexEditor.hexedit"`). These have precedence over the default behavior.
  "workbench.editorAssociations": {
    "{hexdiff}:/**/*.*": "hexEditor.hexedit",
    "*.copilotmd": "vscode.markdown.preview.editor"
  },
  // Controls the minimum size of a file in MB before asking for confirmation when opening in the editor. Note that this setting may not apply to all editor types and environments.
  "workbench.editorLargeFileConfirmation": 1024,
  // Fetches experiments to run from a Microsoft online service.
  "workbench.enableExperiments": true,
  // Controls whether to automatically store available working changes in the cloud for the current workspace. This setting has no effect in the web.
  //  - onShutdown: Automatically store current working changes in the cloud on window close.
  //  - off: Never attempt to automatically store working changes in the cloud.
  "workbench.experimental.cloudChanges.autoStore": "off",
  // Controls whether to surface cloud changes which partially match the current session.
  "workbench.experimental.cloudChanges.partialMatches.enabled": false,
  // Controls whether to render the Share action next to the command center when `window.commandCenter` is `true`.
  "workbench.experimental.share.enabled": false,
  // Configure the browser to use for opening http or https links externally. This can either be the name of the browser (`edge`, `chrome`, `firefox`) or an absolute path to the browser's executable. Will use the system default if not set.
  "workbench.externalBrowser": "",
  // Configure the opener to use for external URIs (http, https).
  "workbench.externalUriOpeners": {},
  // Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
  "workbench.hover.delay": 1500,
  // Controls whether the layout control is shown in the custom title bar. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
  "workbench.layoutControl.enabled": true,
  // Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
  //  - menu: Shows a single button with a dropdown of layout options.
  //  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
  //  - both: Shows both the dropdown and toggle buttons.
  "workbench.layoutControl.type": "both",
  // Controls the type of matching used when searching lists and trees in the workbench.
  //  - fuzzy: Use fuzzy matching when searching.
  //  - contiguous: Use contiguous matching when searching.
  "workbench.list.defaultFindMatchType": "fuzzy",
  // Controls the default find mode for lists and trees in the workbench.
  //  - highlight: Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.
  //  - filter: Filter elements when searching.
  "workbench.list.defaultFindMode": "highlight",
  // Scrolling speed multiplier when pressing `Alt`.
  "workbench.list.fastScrollSensitivity": 5,
  // Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
  "workbench.list.horizontalScrolling": false,
  // Please use 'workbench.list.defaultFindMode' and	'workbench.list.typeNavigationMode' instead.
  // Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
  //  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
  //  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
  //  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
  "workbench.list.keyboardNavigation": "highlight",
  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
  "workbench.list.mouseWheelScrollSensitivity": 1,
  // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "workbench.list.multiSelectModifier": "ctrlCmd",
  // Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
  "workbench.list.openMode": "singleClick",
  // Controls whether clicks in the scrollbar scroll page by page.
  "workbench.list.scrollByPage": false,
  // Controls whether lists and trees have smooth scrolling.
  "workbench.list.smoothScrolling": false,
  // Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.
  "workbench.list.typeNavigationMode": "automatic",
  // Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.enabled": true,
  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files from the local file history. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.exclude": {},
  // Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.
  "workbench.localHistory.maxFileEntries": 50,
  // Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.maxFileSize": 256,
  // Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.mergeWindow": 10,
  // Controls whether the navigation control is shown in the custom title bar. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
  "workbench.navigationControl.enabled": true,
  // Controls the default location of the panel (Terminal, Debug Console, Output, Problems) in a new workspace. It can either show at the bottom, top, right, or left of the editor area.
  "workbench.panel.defaultLocation": "bottom",
  // Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
  //  - always: Always maximize the panel when opening it.
  //  - never: Never maximize the panel when opening it.
  //  - preserve: Open the panel to the state that it was in, before it was closed.
  "workbench.panel.opensMaximized": "preserve",
  // Controls whether activity items in the panel title are shown as label or icon.
  "workbench.panel.showLabels": true,
  // Specifies the product icon theme used.
  //  - Default: Default
  "workbench.productIconTheme": "Default",
  // Controls whether Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": true,
  // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
  "workbench.quickOpen.preserveInput": false,
  // Controls whether the workbench should render with fewer animations.
  //  - on: Always render with reduced motion.
  //  - off: Do not render with reduced motion
  //  - auto: Render with reduced motion based on OS configuration.
  "workbench.reduceMotion": "auto",
  // When enabled, remote extensions recommendations will be shown in the Remote Indicator menu.
  "workbench.remoteIndicator.showExtensionRecommendations": true,
  // Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
  "workbench.sash.hoverDelay": 300,
  // Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
  "workbench.sash.size": 4,
  // Controls the default visibility of the secondary side bar in workspaces or empty windows opened for the first time.
  //  - hidden: The secondary side bar is hidden by default.
  //  - visibleInWorkspace: The secondary side bar is visible by default if a workspace is opened.
  //  - visible: The secondary side bar is visible by default.
  "workbench.secondarySideBar.defaultVisibility": "hidden",
  // Controls whether activity items in the secondary side bar title are shown as label or icon. This setting only has an effect when `workbench.activityBar.location` is not set to `top`.
  "workbench.secondarySideBar.showLabels": true,
  // Controls which editor is shown at startup, if none are restored from the previous session.
  //  - none: Start without an editor.
  //  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
  //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
  //  - newUntitledFile: Open a new untitled text file (only applies when opening an empty window).
  //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
  //  - terminal: Open a new terminal in the editor area.
  "workbench.startupEditor": "welcomePage",
  // When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
  "workbench.trustedDomains.promptInTrustedWorkspace": false,
  // Deprecated, use the global `workbench.reduceMotion`.
  // When enabled, reduce motion in welcome page.
  "workbench.welcomePage.preferReducedMotion": false,
  // When enabled, an extension's walkthrough will open upon install of the extension.
  "workbench.welcomePage.walkthroughs.openOnInstall": true,
  // Controls the behavior of clicking an Activity Bar icon in the workbench. This value is ignored when `workbench.activityBar.location` is not set to `default`.
  //  - toggle: Hide the Primary Side Bar if the clicked item is already visible.
  //  - focus: Focus the Primary Side Bar if the clicked item is already visible.
  "workbench.activityBar.iconClickBehavior": "toggle",
  // Controls the location of the Activity Bar relative to the Primary and Secondary Side Bars.
  //  - default: Show the Activity Bar on the side of the Primary Side Bar and on top of the Secondary Side Bar.
  //  - top: Show the Activity Bar on top of the Primary and Secondary Side Bars.
  //  - bottom: Show the Activity Bar at the bottom of the Primary and Secondary Side Bars.
  //  - hidden: Hide the Activity Bar in the Primary and Secondary Side Bars.
  "workbench.activityBar.location": "default",
  // Overrides colors from the currently selected color theme.
  "workbench.colorCustomizations": {},
  // Controls whether editor file decorations should use colors.
  "workbench.editor.decorations.colors": true,
  // Specifies the color theme when system color mode is dark and `window.autoDetectColorScheme` is enabled.
  "workbench.preferredDarkColorTheme": "Default Dark Modern",
  // Specifies the color theme when in high contrast dark mode and `window.autoDetectHighContrast` is enabled.
  "workbench.preferredHighContrastColorTheme": "Default High Contrast",
  // Specifies the color theme when in high contrast light mode and `window.autoDetectHighContrast` is enabled.
  "workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",
  // Specifies the color theme when system color mode is light and `window.autoDetectColorScheme` is enabled.
  "workbench.preferredLightColorTheme": "Default Light Modern",
  // Controls font aliasing method in the workbench.
  //  - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.
  //  - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.
  //  - none: Disables font smoothing. Text will show with jagged sharp edges.
  //  - auto: Applies `default` or `antialiased` automatically based on the DPI of displays.
  "workbench.fontAliasing": "default",
  // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
  //  - null: No file icons
  //  - vs-minimal
  //  - vs-seti
  //  - vscode-icons
  "workbench.iconTheme": "vs-seti",
  // Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.
  "workbench.sideBar.location": "left",
  // Controls the visibility of the status bar at the bottom of the workbench.
  "workbench.statusBar.visible": true,
  // When enabled, will show the watermark tips when no editor is open.
  "workbench.tips.enabled": true,
  // Controls whether sticky scrolling is enabled in trees.
  "workbench.tree.enableStickyScroll": true,
  // Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
  "workbench.tree.expandMode": "singleClick",
  // Controls tree indentation in pixels.
  "workbench.tree.indent": 8,
  // Controls whether the tree should render indent guides.
  "workbench.tree.renderIndentGuides": "onHover",
  // Controls the number of sticky elements displayed in the tree when `workbench.tree.enableStickyScroll` is enabled.
  "workbench.tree.stickyScrollMaxItemCount": 7,
  // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
  "workbench.view.alwaysShowHeaderActions": false,
  // If an extension requests a hidden view to be shown, display a clickable status bar indicator instead.
  "workbench.view.showQuietly": {},
  // Enable/disable navigation breadcrumbs.
  "breadcrumbs.enabled": true,
  // Controls whether and how file paths are shown in the breadcrumbs view.
  //  - on: Show the file path in the breadcrumbs view.
  //  - off: Do not show the file path in the breadcrumbs view.
  //  - last: Only show the last element of the file path in the breadcrumbs view.
  "breadcrumbs.filePath": "on",
  // Render breadcrumb items with icons.
  "breadcrumbs.icons": true,
  // When enabled breadcrumbs show `array`-symbols.
  "breadcrumbs.showArrays": true,
  // When enabled breadcrumbs show `boolean`-symbols.
  "breadcrumbs.showBooleans": true,
  // When enabled breadcrumbs show `class`-symbols.
  "breadcrumbs.showClasses": true,
  // When enabled breadcrumbs show `constant`-symbols.
  "breadcrumbs.showConstants": true,
  // When enabled breadcrumbs show `constructor`-symbols.
  "breadcrumbs.showConstructors": true,
  // When enabled breadcrumbs show `enumMember`-symbols.
  "breadcrumbs.showEnumMembers": true,
  // When enabled breadcrumbs show `enum`-symbols.
  "breadcrumbs.showEnums": true,
  // When enabled breadcrumbs show `event`-symbols.
  "breadcrumbs.showEvents": true,
  // When enabled breadcrumbs show `field`-symbols.
  "breadcrumbs.showFields": true,
  // When enabled breadcrumbs show `file`-symbols.
  "breadcrumbs.showFiles": true,
  // When enabled breadcrumbs show `function`-symbols.
  "breadcrumbs.showFunctions": true,
  // When enabled breadcrumbs show `interface`-symbols.
  "breadcrumbs.showInterfaces": true,
  // When enabled breadcrumbs show `key`-symbols.
  "breadcrumbs.showKeys": true,
  // When enabled breadcrumbs show `method`-symbols.
  "breadcrumbs.showMethods": true,
  // When enabled breadcrumbs show `module`-symbols.
  "breadcrumbs.showModules": true,
  // When enabled breadcrumbs show `namespace`-symbols.
  "breadcrumbs.showNamespaces": true,
  // When enabled breadcrumbs show `null`-symbols.
  "breadcrumbs.showNull": true,
  // When enabled breadcrumbs show `number`-symbols.
  "breadcrumbs.showNumbers": true,
  // When enabled breadcrumbs show `object`-symbols.
  "breadcrumbs.showObjects": true,
  // When enabled breadcrumbs show `operator`-symbols.
  "breadcrumbs.showOperators": true,
  // When enabled breadcrumbs show `package`-symbols.
  "breadcrumbs.showPackages": true,
  // When enabled breadcrumbs show `property`-symbols.
  "breadcrumbs.showProperties": true,
  // When enabled breadcrumbs show `string`-symbols.
  "breadcrumbs.showStrings": true,
  // When enabled breadcrumbs show `struct`-symbols.
  "breadcrumbs.showStructs": true,
  // When enabled breadcrumbs show `typeParameter`-symbols.
  "breadcrumbs.showTypeParameters": true,
  // When enabled breadcrumbs show `variable`-symbols.
  "breadcrumbs.showVariables": true,
  // Controls whether and how symbols are shown in the breadcrumbs view.
  //  - on: Show all symbols in the breadcrumbs view.
  //  - off: Do not show symbols in the breadcrumbs view.
  //  - last: Only show the current symbol in the breadcrumbs view.
  "breadcrumbs.symbolPath": "on",
  // Controls how symbols are sorted in the breadcrumbs outline view.
  //  - position: Show symbol outline in file position order.
  //  - name: Show symbol outline in alphabetical order.
  //  - type: Show symbol outline in symbol type order.
  "breadcrumbs.symbolSortOrder": "position",
  // Controls whether to always show the editor actions, even when the editor group is not active.
  "workbench.editor.alwaysShowEditorActions": false,
  // If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by a user gesture (for example drag and drop), but not by default. Consequently, the active editor in a locked group is less likely to be replaced accidentally with a different editor.
  "workbench.editor.autoLockGroups": {
    "workbench.editorinputs.searchEditorInput": false,
    "workbench.editors.gettingStartedInput": false,
    "workbench.input.interactive": false,
    "workbench.editor.chatSession": true,
    "workbench.editor.processExplorer": true,
    "default": false,
    "hexEditor.hexedit": false,
    "imagePreview.previewEditor": false,
    "jsProfileVisualizer.cpuprofile.table": false,
    "jsProfileVisualizer.heapprofile.table": false,
    "jsProfileVisualizer.heapsnapshot.table": false,
    "jupyter-notebook": false,
    "latex-workshop-pdf-hook": false,
    "mainThreadWebview-browserPreview": true,
    "mainThreadWebview-markdown.preview": false,
    "mainThreadWebview-simpleBrowser.view": true,
    "msg.notebook": false,
    "notebookOutputEditor": false,
    "repl": false,
    "terminalEditor": true,
    "vscode.audioPreview": false,
    "vscode.videoPreview": false
  },
  // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
  "workbench.editor.centeredLayoutAutoResize": true,
  // Controls whether the centered layout tries to maintain constant width when the window is resized.
  "workbench.editor.centeredLayoutFixedWidth": false,
  // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
  "workbench.editor.closeEmptyGroups": true,
  // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": false,
  // Controls whether the custom workbench editor labels should be applied.
  "workbench.editor.customLabels.enabled": true,
  // Controls the rendering of the editor label. Each __Item__ is a pattern that matches a file path. Both relative and absolute file paths are supported. The relative path must include the WORKSPACE_FOLDER (e.g `WORKSPACE_FOLDER/src/**.tsx` or `*/src/**.tsx`). Absolute patterns must start with a `/`. In case multiple patterns match, the longest matching path will be picked. Each __Value__ is the template for the rendered editor when the __Item__ matches. Variables are substituted based on the context:
  // - `${dirname}`: name of the folder in which the file is located (e.g. `WORKSPACE_FOLDER/folder/file.txt -> folder`).
  // - `${dirname(N)}`: name of the nth parent folder in which the file is located (e.g. `N=2: WORKSPACE_FOLDER/static/folder/file.txt -> WORKSPACE_FOLDER`). Folders can be picked from the start of the path by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.txt -> WORKSPACE_FOLDER`). If the __Item__ is an absolute pattern path, the first folder (`N=-1`) refers to the first folder in the absolute path, otherwise it corresponds to the workspace folder.
  // - `${filename}`: name of the file without the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> file`).
  // - `${extname}`: the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> txt`).
  // - `${extname(N)}`: the nth extension of the file separated by '.' (e.g. `N=2: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext1`). Extension can be picked from the start of the extension by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext2`).
  //
  // Example: `"**/static/**/*.html": "${filename} - ${dirname} (${extname})"` will render a file `WORKSPACE_FOLDER/static/folder/file.html` as `file - folder (html)`.
  "workbench.editor.customLabels.patterns": {},
  // Controls whether editor file decorations should use badges.
  "workbench.editor.decorations.badges": true,
  // The default editor for files detected as binary. If undefined, the user will be presented with a picker.
  "workbench.editor.defaultBinaryEditor": "",
  // Controls how the editor group is resized when double clicking on a tab. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  //  - maximize: All other editor groups are hidden and the current editor group is maximized to take up the entire editor area.
  //  - expand: The editor group takes as much space as possible by making all other editor groups as small as possible.
  //  - off: No editor group is resized when double clicking on a tab.
  "workbench.editor.doubleClickTabToToggleEditorGroupSizes": "expand",
  // Controls if editors can be dragged out of the window to open them in a new window. Press and hold the `Alt` key while dragging to toggle this dynamically.
  "workbench.editor.dragToOpenWindow": true,
  // Controls where the editor actions are shown.
  //  - default: Show editor actions in the window title bar when `workbench.editor.showTabs` is set to `none`. Otherwise, editor actions are shown in the editor tab bar.
  //  - titleBar: Show editor actions in the window title bar. If `window.customTitleBarVisibility` is set to `never`, editor actions are hidden.
  //  - hidden: Editor actions are not shown.
  "workbench.editor.editorActionsLocation": "default",
  // Controls if the empty editor text hint should be visible in the editor.
  "workbench.editor.empty.hint": "text",
  // Controls whether preview mode is used when editors open. There is a maximum of one preview mode editor per editor group. This editor displays its filename in italics on its tab or title label and in the Open Editors view. Its contents will be replaced by the next editor opened in preview mode. Making a change in a preview mode editor will persist it, as will a double-click on its label, or the 'Keep Open' option in its label context menu. Opening a file from Explorer with a double-click persists its editor immediately.
  "workbench.editor.enablePreview": true,
  // Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.enablePreviewFromCodeNavigation": false,
  // Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). When enabled, hold Ctrl before selection to open an editor as a non-preview. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.enablePreviewFromQuickOpen": false,
  // Controls whether editors are closed in most recently used order or from left to right.
  "workbench.editor.focusRecentEditorAfterClose": true,
  // Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is not set to multiple.
  "workbench.editor.highlightModifiedTabs": false,
  // Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.
  "workbench.editor.historyBasedLanguageDetection": true,
  // Controls the format of the label for an editor.
  //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
  //  - short: Show the name of the file followed by its directory name.
  //  - medium: Show the name of the file followed by its path relative to the workspace folder.
  //  - long: Show the name of the file followed by its absolute path.
  "workbench.editor.labelFormat": "default",
  // Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
  "workbench.editor.languageDetection": true,
  // When enabled, shows a Status bar Quick Fix when the editor language doesn't match detected content language.
  "workbench.editor.languageDetectionHints": {
    "notebookEditors": true,
    "untitledEditors": true
  },
  // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
  "workbench.editor.limit.enabled": false,
  // Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.
  "workbench.editor.limit.excludeDirty": false,
  // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
  "workbench.editor.limit.perEditorGroup": false,
  // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
  "workbench.editor.limit.value": 10,
  // Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.
  "workbench.editor.mouseBackForwardToNavigate": true,
  // Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.
  //  - default: Navigate across all opened editors and editor groups.
  //  - editorGroup: Navigate only in editors of the active editor group.
  //  - editor: Navigate only in the active editor.
  "workbench.editor.navigationScope": "default",
  // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
  "workbench.editor.openPositioning": "right",
  // Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
  "workbench.editor.openSideBySideDirection": "right",
  // Controls the size of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  //  - normal: A pinned tab inherits the look of non pinned tabs.
  //  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
  //  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
  "workbench.editor.pinnedTabSizing": "normal",
  // When enabled, displays pinned tabs in a separate row above all other tabs. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.pinnedTabsOnSeparateRow": false,
  // When enabled, a language detection model that takes into account editor history will be given higher precedence.
  "workbench.editor.preferHistoryBasedLanguageDetection": false,
  // Controls whether pinned editors should close when keyboard or middle mouse click is used for closing.
  //  - keyboardAndMouse: Always prevent closing the pinned editor when using mouse middle click or keyboard.
  //  - keyboard: Prevent closing the pinned editor when using the keyboard.
  //  - mouse: Prevent closing the pinned editor when using mouse middle click.
  //  - never: Never prevent closing a pinned editor.
  "workbench.editor.preventPinnedEditorClose": "keyboardAndMouse",
  // Restores the last editor view state (such as scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
  "workbench.editor.restoreViewState": true,
  // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, such as when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": false,
  // Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.scrollToSwitchTabs": false,
  // Preserves the most recent editor view state (such as scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
  "workbench.editor.sharedViewState": false,
  // Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
  "workbench.editor.showIcons": true,
  // Controls whether opened editors should show as individual tabs, one single large tab or if the title area should not be shown.
  //  - multiple: Each editor is displayed as a tab in the editor title area.
  //  - single: The active editor is displayed as a single large tab in the editor title area.
  //  - none: The editor title area is not displayed.
  "workbench.editor.showTabs": "multiple",
  // Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
  //  - vertical: Editors are positioned from top to bottom.
  //  - horizontal: Editors are positioned from left to right.
  "workbench.editor.splitInGroupLayout": "horizontal",
  // Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
  "workbench.editor.splitOnDragAndDrop": true,
  // Controls the size of editor groups when splitting them.
  //  - auto: Splits the active editor group to equal parts, unless all editor groups are already in equal parts. In that case, splits all the editor groups to equal parts.
  //  - distribute: Splits all the editor groups to equal parts.
  //  - split: Splits the active editor group to equal parts.
  "workbench.editor.splitSizing": "auto",
  // Controls the visibility of the tab close action button.
  "workbench.editor.tabActionCloseVisibility": true,
  // Controls the position of the editor's tabs action buttons (close, unpin). This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.tabActionLocation": "right",
  // Controls the visibility of the tab unpin action button.
  "workbench.editor.tabActionUnpinVisibility": true,
  // Controls the size of editor tabs. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
  //  - fit: Always keep tabs large enough to show the full editor label.
  //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
  //  - fixed: Make all tabs the same size, while allowing them to get smaller when the available space is not enough to show all tabs at once.
  "workbench.editor.tabSizing": "fit",
  // Controls the maximum width of tabs when `workbench.editor.tabSizing` size is set to `fixed`.
  "workbench.editor.tabSizingFixedMaxWidth": 160,
  // Controls the minimum width of tabs when `workbench.editor.tabSizing` size is set to `fixed`.
  "workbench.editor.tabSizingFixedMinWidth": 50,
  // Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
  //  - default: The default size.
  //  - large: Increases the size, so it can be grabbed more easily with the mouse.
  "workbench.editor.titleScrollbarSizing": "default",
  // Controls the format of the label for an untitled editor.
  //  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
  //  - name: The name of the untitled file is not derived from the contents of the file.
  "workbench.editor.untitled.labelFormat": "content",
  // Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is not set to '`multiple`'.
  "workbench.editor.wrapTabs": false,
  // Configure settings to be applied for all profiles.
  "workbench.settings.applyToAllProfiles": [],
  // Determines which Settings editor to use by default.
  //  - ui: Use the settings UI editor.
  //  - json: Use the JSON file editor.
  "workbench.settings.editor": "ui",
  // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
  "workbench.settings.enableNaturalLanguageSearch": true,
  // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
  "workbench.settings.openDefaultKeybindings": false,
  // Controls whether opening settings also opens an editor showing all default settings.
  "workbench.settings.openDefaultSettings": false,
  // Controls the behavior of the Settings editor Table of Contents while searching. If this setting is being changed in the Settings editor, the setting will take effect after the search query is modified.
  //  - hide: Hide the Table of Contents while searching.
  //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking on a category will filter the results to that category.
  "workbench.settings.settingsSearchTocBehavior": "filter",
  // Controls whether the AI search results toggle is shown in the search bar in the Settings editor after doing a search and once AI search results are available.
  "workbench.settings.showAISearchToggle": false,
  // Controls whether to use the split JSON editor when editing settings as JSON.
  "workbench.settings.useSplitJSON": false,
  // Controls whether turning on Zen Mode also centers the layout.
  "zenMode.centerLayout": true,
  // Controls whether turning on Zen Mode also puts the workbench into full screen mode.
  "zenMode.fullScreen": true,
  // Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
  "zenMode.hideActivityBar": true,
  // Controls whether turning on Zen Mode also hides the editor line numbers.
  "zenMode.hideLineNumbers": true,
  // Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
  "zenMode.hideStatusBar": true,
  // Controls whether a window should restore to Zen Mode if it was exited in Zen Mode.
  "zenMode.restore": true,
  // Controls whether turning on Zen Mode should show multiple editor tabs, a single editor tab, or hide the editor title area completely.
  //  - multiple: Each editor is displayed as a tab in the editor title area.
  //  - single: The active editor is displayed as a single large tab in the editor title area.
  //  - none: The editor title area is not displayed.
  "zenMode.showTabs": "multiple",
  // Controls whether notifications do not disturb mode should be enabled while in Zen Mode. If true, only error notifications will pop out.
  "zenMode.silentNotifications": true,
  // Controls the font size (in pixels) of the screencast mode keyboard.
  "screencastMode.fontSize": 56,
  // Options for customizing the keyboard overlay in screencast mode.
  "screencastMode.keyboardOptions": {
    "showCommandGroups": false,
    "showCommands": true,
    "showKeybindings": true,
    "showKeys": true,
    "showSingleEditorCursorMoves": true
  },
  // Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
  "screencastMode.keyboardOverlayTimeout": 800,
  // Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
  "screencastMode.mouseIndicatorColor": "#FF0000",
  // Controls the size (in pixels) of the mouse indicator in screencast mode.
  "screencastMode.mouseIndicatorSize": 20,
  // Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
  "screencastMode.verticalOffset": 20,
  // If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, `workbench.preferredDarkColorTheme#` is used, else `#workbench.preferredLightColorTheme`.
  "window.autoDetectColorScheme": false,
  // If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme#` and `#workbench.preferredHighContrastLightColorTheme`.
  "window.autoDetectHighContrast": true,
  // If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element.
  "window.clickThroughInactive": true,
  // Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
  "window.closeWhenEmpty": false,
  // Show command launcher together with the window title. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
  "window.commandCenter": true,
  // Controls whether to show a confirmation dialog before closing a window or quitting the application.
  //  - always: Always ask for confirmation.
  //  - keyboardOnly: Only ask for confirmation if a keybinding was used.
  //  - never: Never explicitly ask for confirmation.
  "window.confirmBeforeClose": "never",
  // Controls whether a confirmation dialog shows asking to save or discard an opened untitled workspace in the window when switching to another workspace. Disabling the confirmation dialog will always discard the untitled workspace.
  "window.confirmSaveUntitledWorkspace": true,
  // Adjust when the custom title bar should be shown. The custom title bar can be hidden when in full screen mode with `windowed`. The custom title bar can only be hidden in non full screen mode with `never` when `window.titleBarStyle` is set to `native`.
  //  - auto: Automatically changes custom title bar visibility.
  //  - windowed: Hide custom titlebar in full screen. When not in full screen, automatically change custom title bar visibility.
  //  - never: Hide custom titlebar when `window.titleBarStyle` is set to `native`.
  "window.customTitleBarVisibility": "auto",
  // Controls the height of editor tabs. Also applies to the title control bar when `workbench.editor.showTabs` is not set to `multiple`.
  "window.density.editorTabHeight": "default",
  // Adjust the appearance of dialogs to be native by the OS or custom.
  "window.dialogStyle": "native",
  // If enabled, this setting will close the window when the application icon in the title bar is double-clicked. The window will not be able to be dragged by the icon. This setting is effective only if `window.titleBarStyle` is set to `custom`.
  "window.doubleClickIconToClose": false,
  // Adjust the context menu appearances to either be native by the OS, custom, or inherited from the title bar style defined in `window.titleBarStyle`.
  //  - custom: Use the custom context menu.
  //  - native: Use the native context menu.
  //  - inherit: Matches the context menu style to the title bar style defined in `window.titleBarStyle`.
  "window.menuStyle": "native",
  // Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen.
  "window.nativeFullScreen": true,
  // Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.
  "window.nativeTabs": false,
  // Controls whether a window should restore to full screen mode if it was exited in full screen mode.
  "window.restoreFullscreen": false,
  // Controls how windows and editors within are being restored when opening.
  //  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows together with editors that were previously opened.
  //  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
  //  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
  //  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
  //  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
  "window.restoreWindows": "all",
  // Set the color mode for native UI elements such as native dialogs, menus and title bar. Even if your OS is configured in light color mode, you can select a dark system color theme for the window. You can also configure to automatically adjust based on the `workbench.colorTheme` setting.
  //
  // Note: This setting is ignored when `window.autoDetectColorScheme` is enabled.
  //  - default: Native widget colors match the system colors.
  //  - auto: Use light native widget colors for light color themes and dark for dark color themes.
  //  - light: Use light native widget colors.
  //  - dark: Use dark native widget colors.
  "window.systemColorTheme": "default",
  // Controls the window title based on the current context such as the opened workspace or active editor. Variables are substituted based on the context:
  // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
  // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
  // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
  // - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
  // - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
  // - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
  // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
  // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
  // - `${rootName}`: name of the workspace with optional remote name and workspace indicator if applicable (e.g. myFolder, myRemoteFolder [SSH] or myWorkspace (Workspace)).
  // - `${rootNameShort}`: shortened name of the workspace without suffixes (e.g. myFolder, myRemoteFolder or myWorkspace).
  // - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
  // - `${profileName}`: name of the profile in which the workspace is opened (e.g. Data Science (Profile)). Ignored if default profile is used.
  // - `${appName}`: e.g. VS Code.
  // - `${remoteName}`: e.g. SSH
  // - `${dirty}`: an indicator for when the active editor has unsaved changes.
  // - `${focusedView}`: the name of the view that is currently focused.
  // - `${activeRepositoryName}`: the name of the active repository (e.g. vscode).
  // - `${activeRepositoryBranchName}`: the name of the active branch in the active repository (e.g. main).
  // - `${activeEditorState}`: provides information about the state of the active editor (e.g. modified). This will be appended by default when in screen reader mode with `accessibility.windowTitleOptimized` enabled.
  // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
  "window.title": "${activeEditorShort}${separator}${rootName}${separator}${profileName}",
  // Adjust the appearance of the window title bar to be native by the OS or custom. Changes require a full restart to apply.
  "window.titleBarStyle": "custom",
  // Separator used by `window.title`.
  "window.titleSeparator": " — ",
  // Adjust the default zoom level for all windows. Each increment above `0` (e.g. `1`) or below (e.g. `-1`) represents zooming `20%` larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity. See `window.zoomPerWindow` for configuring if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window.
  "window.zoomLevel": 0,
  // Controls if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window. See `window.zoomLevel` for configuring a default zoom level for all windows.
  "window.zoomPerWindow": true,
  // Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
  //  - default: Open new windows in the center of the screen.
  //  - inherit: Open new windows with same dimension as last active one.
  //  - offset: Open new windows with same dimension as last active one with an offset position.
  //  - maximized: Open new windows maximized.
  //  - fullscreen: Open new windows in full screen mode.
  "window.newWindowDimensions": "default",
  // Specifies the profile to use when opening a new window. If a profile name is provided, the new window will use that profile. If no profile name is provided, the new window will use the profile of the active window or the Default profile if no active window exists.
  "window.newWindowProfile": null,
  // Controls whether files should open in a new window when using a command line or file dialog.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Files will open in a new window.
  //  - off: Files will open in the window with the files' folder open or the last active window.
  //  - default: Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder.
  "window.openFilesInNewWindow": "off",
  // Controls whether folders should open in a new window or replace the last active window.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Folders will open in a new window.
  //  - off: Folders will replace the last active window.
  //  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
  "window.openFoldersInNewWindow": "default",
  // Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Open a new empty window.
  //  - off: Focus the last active running instance.
  "window.openWithoutArgumentsInNewWindow": "off",
  // Whether or not position changes should be debounced
  "accessibility.signalOptions.debouncePositionChanges": false,
  //
  "accessibility.signalOptions.experimental.delays.errorAtPosition": {},
  // Delays for all signals besides error and warning at position
  "accessibility.signalOptions.experimental.delays.general": {},
  //
  "accessibility.signalOptions.experimental.delays.warningAtPosition": {},
  // The volume of the sounds in percent (0-100).
  "accessibility.signalOptions.volume": 70,
  // Plays a sound / audio cue when revealing a file with changes from chat edits
  "accessibility.signals.chatEditModifiedFile": {
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a chat request is made.
  "accessibility.signals.chatRequestSent": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a sound / audio cue when the response has been received.
  "accessibility.signals.chatResponseReceived": {
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when user action is required in the chat.
  "accessibility.signals.chatUserActionRequired": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a feature is cleared (for example, the terminal, Debug Console, or Output channel).
  "accessibility.signals.clear": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a sound / audio cue when the code action has been applied.
  "accessibility.signals.codeActionApplied": {
    "sound": "auto"
  },
  // Plays a sound / audio cue - when a code action has been triggered.
  "accessibility.signals.codeActionTriggered": {
    "sound": "auto"
  },
  // Plays a sound / audio cue when the focus moves to an deleted line in Accessible Diff Viewer mode or to the next/previous change.
  "accessibility.signals.diffLineDeleted": {
    "sound": "auto"
  },
  // Plays a sound / audio cue when the focus moves to an inserted line in Accessible Diff Viewer mode or to the next/previous change.
  "accessibility.signals.diffLineInserted": {
    "sound": "auto"
  },
  // Plays a sound / audio cue when the focus moves to an modified line in Accessible Diff Viewer mode or to the next/previous change.
  "accessibility.signals.diffLineModified": {
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when edits are kept.
  "accessibility.signals.editsKept": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when edits have been undone.
  "accessibility.signals.editsUndone": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a file or notebook is formatted.
  "accessibility.signals.format": {
    "announcement": "never",
    "sound": "never"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a breakpoint.
  "accessibility.signals.lineHasBreakpoint": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has an error.
  "accessibility.signals.lineHasError": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - the active line has a folded area that can be unfolded.
  "accessibility.signals.lineHasFoldedArea": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a sound / audio cue when the active line has an inline suggestion.
  "accessibility.signals.lineHasInlineSuggestion": {
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
  "accessibility.signals.lineHasWarning": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound / audio cue and/or announcement (alert) when there is a next edit suggestion.
  "accessibility.signals.nextEditSuggestion": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when trying to read a line with inlay hints that has no inlay hints.
  "accessibility.signals.noInlayHints": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution is successfully completed.
  "accessibility.signals.notebookCellCompleted": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution fails.
  "accessibility.signals.notebookCellFailed": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the debugger stopped on a breakpoint.
  "accessibility.signals.onDebugBreak": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
  "accessibility.signals.positionHasError": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
  "accessibility.signals.positionHasWarning": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - on loop while progress is occurring.
  "accessibility.signals.progress": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a file is saved.
  "accessibility.signals.save": {
    "announcement": "never",
    "sound": "never"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a task is completed.
  "accessibility.signals.taskCompleted": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a task fails (non-zero exit code).
  "accessibility.signals.taskFailed": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when the terminal bell is ringing.
  "accessibility.signals.terminalBell": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command fails (non-zero exit code) or when a command with such an exit code is navigated to in the accessible view.
  "accessibility.signals.terminalCommandFailed": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command succeeds (zero exit code) or when a command with such an exit code is navigated to in the accessible view.
  "accessibility.signals.terminalCommandSucceeded": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a signal - sound (audio cue) and/or announcement (alert) - when terminal Quick Fixes are available.
  "accessibility.signals.terminalQuickFix": {
    "announcement": "auto",
    "sound": "auto"
  },
  // Plays a sound / audio cue when the voice recording has started.
  "accessibility.signals.voiceRecordingStarted": {
    "sound": "on"
  },
  // Plays a sound / audio cue when the voice recording has stopped.
  "accessibility.signals.voiceRecordingStopped": {
    "sound": "auto"
  },
  // On keypress, close the Accessible View and focus the element from which it was invoked.
  "accessibility.accessibleView.closeOnKeyPress": true,
  // Controls whether variable changes should be announced in the debug watch view.
  "accessibility.debugWatchVariableAnnouncements": true,
  // Whether to dim unfocused editors and terminals, which makes it more clear where typed input will go to. This works with the majority of editors with the notable exceptions of those that utilize iframes like notebooks and extension webview editors.
  "accessibility.dimUnfocused.enabled": false,
  // The opacity fraction (0.2 to 1.0) to use for unfocused editors and terminals. This will only take effect when `accessibility.dimUnfocused.enabled` is enabled.
  "accessibility.dimUnfocused.opacity": 0.75,
  // Controls whether the Accessible View is hidden.
  "accessibility.hideAccessibleView": false,
  // Control whether focus should automatically be sent to the REPL when code is executed.
  "accessibility.replEditor.autoFocusReplExecution": "input",
  // Controls whether the output from an execution in the native REPL will be announced.
  "accessibility.replEditor.readLastExecutionOutput": true,
  // Controls whether links should be underlined in the workbench.
  "accessibility.underlineLinks": false,
  // Provide information about actions that can be taken in the comment widget or in a file which contains comments.
  "accessibility.verbosity.comments": true,
  // Provide information about how to access the debug console accessibility help dialog when the debug console or run and debug viewlet is focused. Note that a reload of the window is required for this to take effect.
  "accessibility.verbosity.debug": true,
  // Provide information about how to navigate changes in the diff editor when it is focused.
  "accessibility.verbosity.diffEditor": true,
  // Indicate when a diff editor becomes the active editor.
  "accessibility.verbosity.diffEditorActive": true,
  // Provide information about relevant actions in an empty text editor.
  "accessibility.verbosity.emptyEditorHint": true,
  // Provide information about how to open the hover in an Accessible View.
  "accessibility.verbosity.hover": true,
  // Provide information about how to access the inline editor chat accessibility help menu and alert with hints that describe how to use the feature when the input is focused.
  "accessibility.verbosity.inlineChat": true,
  // Provide information about how to access the inline completions hover and Accessible View.
  "accessibility.verbosity.inlineCompletions": true,
  // Provide information about how to change a keybinding in the keybindings editor when a row is focused.
  "accessibility.verbosity.keybindingsEditor": true,
  // Provide information about how to focus the cell container or inner editor when a notebook cell is focused.
  "accessibility.verbosity.notebook": true,
  // Provide information about how to open the notification in an Accessible View.
  "accessibility.verbosity.notification": true,
  // Provide information about how to access the chat help menu when the chat input is focused.
  "accessibility.verbosity.panelChat": true,
  // Provide information about how to access the REPL editor accessibility help menu when the REPL editor is focused.
  "accessibility.verbosity.replEditor": true,
  // Provide information about how to access the source control accessibility help menu when the input is focused.
  "accessibility.verbosity.sourceControl": true,
  // Provide information about how to access the terminal accessibility help menu when the terminal is focused.
  "accessibility.verbosity.terminal": true,
  // Provide information about how to open the walkthrough in an Accessible View.
  "accessibility.verbosity.walkthrough": true,
  // Controls whether the `window.title` should be optimized for screen readers when in screen reader mode. When enabled, the window title will have `activeEditorState` appended to the end.
  "accessibility.windowTitleOptimized": true,
  // Controls whether the Explorer should automatically open a file when it is dropped into the explorer
  "explorer.autoOpenDroppedFile": true,
  // Controls whether the Explorer should automatically reveal and select files when opening them.
  //  - true: Files will be revealed and selected.
  //  - false: Files will not be revealed and selected.
  //  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
  "explorer.autoReveal": true,
  // Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders from being revealed and selected in the Explorer when they are opened. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths.
  "explorer.autoRevealExclude": {
    "**/bower_components": true,
    "**/node_modules": true
  },
  // Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
  "explorer.compactFolders": true,
  // Controls whether the Explorer should ask for confirmation when deleting a file via the trash.
  "explorer.confirmDelete": true,
  // Controls whether the Explorer should ask for confirmation to move files and folders via drag and drop.
  "explorer.confirmDragAndDrop": true,
  // Controls whether the Explorer should ask for confirmation when pasting native files and folders.
  "explorer.confirmPasteNative": true,
  // Controls whether the Explorer should ask for confirmation when undoing.
  //  - verbose: Explorer will prompt before all undo operations.
  //  - default: Explorer will prompt before destructive undo operations.
  //  - light: Explorer will not prompt before undo operations when focused.
  "explorer.confirmUndo": "default",
  // The path separation character used when copying file paths.
  //  - /: Use slash as path separation character.
  //  - \: Use backslash as path separation character.
  //  - auto: Uses operating system specific path separation character.
  "explorer.copyPathSeparator": "auto",
  // The path separation character used when copying relative file paths.
  //  - /: Use slash as path separation character.
  //  - \: Use backslash as path separation character.
  //  - auto: Uses operating system specific path separation character.
  "explorer.copyRelativePathSeparator": "auto",
  // Controls whether file decorations should use badges.
  "explorer.decorations.badges": true,
  // Controls whether file decorations should use colors.
  "explorer.decorations.colors": true,
  // Controls whether the Explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the Explorer.
  "explorer.enableDragAndDrop": true,
  // Controls whether the Explorer should support undoing file and folder operations.
  "explorer.enableUndo": true,
  // Controls whether entries in .gitignore should be parsed and excluded from the Explorer. Similar to `files.exclude`.
  "explorer.excludeGitIgnore": false,
  // Controls whether the Explorer should expand multi-root workspaces containing only one folder during initialization
  "explorer.expandSingleFolderWorkspaces": true,
  // Controls whether file nesting is enabled in the Explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.
  "explorer.fileNesting.enabled": false,
  // Controls whether file nests are automatically expanded. `explorer.fileNesting.enabled` must be set for this to take effect.
  "explorer.fileNesting.expand": true,
  // Controls nesting of files in the Explorer. `explorer.fileNesting.enabled` must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:
  // - `${capture}`: Matches the resolved value of the `*` from the parent pattern
  // - `${basename}`: Matches the parent file's basename, the `file` in `file.ts`
  // - `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`
  // - `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`
  // - `*`:  Matches any string, may only be used once per child pattern
  "explorer.fileNesting.patterns": {
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.ts": "${capture}.js",
    "*.tsx": "${capture}.ts",
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, bun.lock",
    "tsconfig.json": "tsconfig.*.json"
  },
  // Controls which naming strategy to use when giving a new name to a duplicated Explorer item on paste.
  //  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number.
  //  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number.
  //  - disabled: Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file.
  "explorer.incrementalNaming": "simple",
  // The minimum number of editor slots pre-allocated in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.
  "explorer.openEditors.minVisible": 0,
  // Controls the sorting order of editors in the Open Editors pane.
  //  - editorOrder: Editors are ordered in the same order editor tabs are shown.
  //  - alphabetical: Editors are ordered alphabetically by tab name inside each editor group.
  //  - fullPath: Editors are ordered alphabetically by full path inside each editor group.
  "explorer.openEditors.sortOrder": "editorOrder",
  // The initial maximum number of editors shown in the Open Editors pane. Exceeding this limit will show a scroll bar and allow resizing the pane to display more items.
  "explorer.openEditors.visible": 9,
  // Controls the property-based sorting of files and folders in the Explorer. When `explorer.fileNesting.enabled` is enabled, also controls sorting of nested files.
  //  - default: Files and folders are sorted by their names. Folders are displayed before files.
  //  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
  //  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
  //  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
  //  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before files.
  //  - foldersNestsFiles: Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.
  "explorer.sortOrder": "default",
  // Controls the lexicographic sorting of file and folder names in the Explorer.
  //  - default: Uppercase and lowercase names are mixed together.
  //  - upper: Uppercase names are grouped together before lowercase names.
  //  - lower: Lowercase names are grouped together before uppercase names.
  //  - unicode: Names are sorted in Unicode order.
  "explorer.sortOrderLexicographicOptions": "default",
  // Controls whether the file and folder sort order, should be reversed.
  "explorer.sortOrderReverse": false,
  // Controls whether Outline items are collapsed or expanded.
  //  - alwaysCollapse: Collapse all items.
  //  - alwaysExpand: Expand all items.
  "outline.collapseItems": "alwaysExpand",
  // Render Outline elements with icons.
  "outline.icons": true,
  // Use badges for errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
  "outline.problems.badges": true,
  // Use colors for errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
  "outline.problems.colors": true,
  // Show errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
  "outline.problems.enabled": true,
  // When enabled, Outline shows `array`-symbols.
  "outline.showArrays": true,
  // When enabled, Outline shows `boolean`-symbols.
  "outline.showBooleans": true,
  // When enabled, Outline shows `class`-symbols.
  "outline.showClasses": true,
  // When enabled, Outline shows `constant`-symbols.
  "outline.showConstants": true,
  // When enabled, Outline shows `constructor`-symbols.
  "outline.showConstructors": true,
  // When enabled, Outline shows `enumMember`-symbols.
  "outline.showEnumMembers": true,
  // When enabled, Outline shows `enum`-symbols.
  "outline.showEnums": true,
  // When enabled, Outline shows `event`-symbols.
  "outline.showEvents": true,
  // When enabled, Outline shows `field`-symbols.
  "outline.showFields": true,
  // When enabled, Outline shows `file`-symbols.
  "outline.showFiles": true,
  // When enabled, Outline shows `function`-symbols.
  "outline.showFunctions": true,
  // When enabled, Outline shows `interface`-symbols.
  "outline.showInterfaces": true,
  // When enabled, Outline shows `key`-symbols.
  "outline.showKeys": true,
  // When enabled, Outline shows `method`-symbols.
  "outline.showMethods": true,
  // When enabled, Outline shows `module`-symbols.
  "outline.showModules": true,
  // When enabled, Outline shows `namespace`-symbols.
  "outline.showNamespaces": true,
  // When enabled, Outline shows `null`-symbols.
  "outline.showNull": true,
  // When enabled, Outline shows `number`-symbols.
  "outline.showNumbers": true,
  // When enabled, Outline shows `object`-symbols.
  "outline.showObjects": true,
  // When enabled, Outline shows `operator`-symbols.
  "outline.showOperators": true,
  // When enabled, Outline shows `package`-symbols.
  "outline.showPackages": true,
  // When enabled, Outline shows `property`-symbols.
  "outline.showProperties": true,
  // When enabled, Outline shows `string`-symbols.
  "outline.showStrings": true,
  // When enabled, Outline shows `struct`-symbols.
  "outline.showStructs": true,
  // When enabled, Outline shows `typeParameter`-symbols.
  "outline.showTypeParameters": true,
  // When enabled, Outline shows `variable`-symbols.
  "outline.showVariables": true,
  // Controls the positioning of the actionbar on rows in the Search view.
  //  - auto: Position the actionbar to the right when the Search view is narrow, and immediately after the content when the Search view is wide.
  //  - right: Always position the actionbar to the right.
  "search.actionsPosition": "right",
  // Controls whether the search results will be collapsed or expanded.
  //  - auto: Files with less than 10 results are expanded. Others are collapsed.
  //  - alwaysCollapse
  //  - alwaysExpand
  "search.collapseResults": "alwaysExpand",
  // Controls whether search file decorations should use badges.
  "search.decorations.badges": true,
  // Controls whether search file decorations should use colors.
  "search.decorations.colors": true,
  // Controls the default search result view mode.
  //  - tree: Shows search results as a tree.
  //  - list: Shows search results as a list.
  "search.defaultViewMode": "list",
  // Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and file search in quick open. To exclude files from the recently opened list in quick open, patterns must be absolute (for example `**/node_modules/**`). Inherits all glob patterns from the `files.exclude` setting.
  "search.exclude": {
    "**/*.code-search": true,
    "**/bower_components": true,
    "**/node_modules": true
  },
  // Show notebook editor rich content results for closed notebooks. Please refresh your search results after changing this setting.
  "search.experimental.closedNotebookRichContentResults": false,
  // Controls whether to follow symlinks while searching.
  "search.followSymlinks": true,
  // Controls whether the Search view should read or modify the shared find clipboard on macOS.
  "search.globalFindClipboard": false,
  // This setting is deprecated. You can drag the search icon to a new location instead.
  // Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
  "search.location": "sidebar",
  // The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
  // When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
  "search.maintainFileSearchCache": false,
  // Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
  "search.maxResults": 20000,
  // Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the Search view, or in a search editor.
  //  - view: Search in the Search view, either in the panel or side bars.
  //  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
  //  - newEditor: Search in a new search editor.
  "search.mode": "view",
  // Controls whether the last typed input to Quick Search should be restored when opening it the next time.
  "search.quickAccess.preserveInput": false,
  // Controls sorting order of editor history in quick open when filtering.
  //  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
  //  - recency: History entries are sorted by recency. More recently opened entries appear first.
  "search.quickOpen.history.filterSortOrder": "default",
  // Whether to include results from recently opened files in the file results for Quick Open.
  "search.quickOpen.includeHistory": true,
  // Whether to include results from a global symbol search in the file results for Quick Open.
  "search.quickOpen.includeSymbols": false,
  // Number of threads to use for searching. When set to 0, the engine automatically determines this value.
  "search.ripgrep.maxThreads": 0,
  // The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
  "search.searchEditor.defaultNumberOfContextLines": 1,
  // Configure effect of double-clicking a result in a search editor.
  //  - selectWord: Double-clicking selects the word under the cursor.
  //  - goToLocation: Double-clicking opens the result in the active editor group.
  //  - openLocationToSide: Double-clicking opens the result in the editor group to the side, creating one if it does not yet exist.
  "search.searchEditor.doubleClickBehaviour": "goToLocation",
  // When a search is triggered, focus the Search Editor results instead of the Search Editor input.
  "search.searchEditor.focusResultsOnSearch": false,
  // When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
  "search.searchEditor.reusePriorSearchConfiguration": false,
  // Configure effect of single-clicking a result in a search editor.
  //  - default: Single-clicking does nothing.
  //  - peekDefinition: Single-clicking opens a Peek Definition window.
  "search.searchEditor.singleClickBehaviour": "default",
  // Search all files as you type.
  "search.searchOnType": true,
  // When `search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `#search.searchOnType` is disabled.
  "search.searchOnTypeDebouncePeriod": 300,
  // Enable keyword suggestions in the Search view.
  "search.searchView.keywordSuggestions": false,
  // Controls the behavior of the semantic search results displayed in the Search view.
  //  - manual: Only request semantic search results manually.
  //  - runOnEmpty: Request semantic results automatically only when text search results are empty.
  //  - auto: Request semantic results automatically with every search.
  "search.searchView.semanticSearchBehavior": "manual",
  // Update the search query to the editor's selected text when focusing the Search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
  "search.seedOnFocus": false,
  // Enable seeding search from the word nearest the cursor when the active editor has no selection.
  "search.seedWithNearestWord": false,
  // Controls whether to show line numbers for search results.
  "search.showLineNumbers": false,
  // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
  "search.smartCase": false,
  // Controls sorting order of search results.
  //  - default: Results are sorted by folder and file names, in alphabetical order.
  //  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
  //  - type: Results are sorted by file extensions, in alphabetical order.
  //  - modified: Results are sorted by file last modified date, in descending order.
  //  - countDescending: Results are sorted by count per file, in descending order.
  //  - countAscending: Results are sorted by count per file, in ascending order.
  "search.sortOrder": "default",
  // Controls whether to use your global gitignore file (for example, from `$HOME/.config/git/ignore`) when searching for files. Requires `search.useIgnoreFiles` to be enabled.
  "search.useGlobalIgnoreFiles": false,
  // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
  "search.useIgnoreFiles": true,
  // Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `search.useIgnoreFiles` to be enabled.
  "search.useParentIgnoreFiles": false,
  // Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
  // Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
  "search.usePCRE2": false,
  // Controls whether to open Replace Preview when selecting or replacing a match.
  "search.useReplacePreview": true,
  // Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
  // This setting is deprecated and now falls back on "search.usePCRE2".
  "search.useRipgrep": true,
  // Allow setting breakpoints in any file.
  "debug.allowBreakpointsEverywhere": false,
  // Controls whether variables that are lazily resolved, such as getters, are automatically resolved and expanded by the debugger.
  //  - auto: When in screen reader optimized mode, automatically expand lazy variables.
  //  - on: Always automatically expand lazy variables.
  //  - off: Never automatically expand lazy variables.
  "debug.autoExpandLazyVariables": "auto",
  // At the end of a debug session, all the read-only tabs associated with that session will be closed
  "debug.closeReadonlyTabsOnEnd": false,
  // Controls whether to confirm when the window closes if there are active debug sessions.
  //  - never: Never confirm.
  //  - always: Always confirm if there are debug sessions.
  "debug.confirmOnExit": "never",
  // Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.
  "debug.console.acceptSuggestionOnEnter": "off",
  // Controls if the Debug Console should be automatically closed when the debug session ends.
  "debug.console.closeOnEnd": false,
  // Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.
  "debug.console.collapseIdenticalLines": true,
  // Controls the font family in the Debug Console.
  "debug.console.fontFamily": "default",
  // Controls the font size in pixels in the Debug Console.
  "debug.console.fontSize": 12,
  // Controls if the Debug Console should suggest previously typed input.
  "debug.console.historySuggestions": true,
  // Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.
  "debug.console.lineHeight": 0,
  // Controls the maximum number of lines in the Debug Console.
  "debug.console.maximumLines": 10000,
  // Controls if the lines should wrap in the Debug Console.
  "debug.console.wordWrap": true,
  // Show Source Code in Disassembly View.
  "debug.disassemblyView.showSourceCode": true,
  // Color of the Status bar when debugger is active.
  "debug.enableStatusBarColor": true,
  // Controls whether the editor should be focused when the debugger breaks.
  "debug.focusEditorOnBreak": true,
  // Controls whether the workbench window should be focused when the debugger breaks.
  "debug.focusWindowOnBreak": true,
  // Controls the action to perform when clicking the editor gutter with the middle mouse button.
  //  - logpoint: Add Logpoint.
  //  - conditionalBreakpoint: Add Conditional Breakpoint.
  //  - triggeredBreakpoint: Add Triggered Breakpoint.
  //  - none: Don't perform any action.
  "debug.gutterMiddleClickAction": "logpoint",
  // Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when `debug.toolBarLocation` is not `docked`.
  "debug.hideLauncherWhileDebugging": false,
  // Hide the warning shown when a `preLaunchTask` has been running for a while.
  "debug.hideSlowPreLaunchWarning": false,
  // Show variable values inline in editor while debugging.
  //  - on: Always show variable values inline in editor while debugging.
  //  - off: Never show variable values inline in editor while debugging.
  //  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
  "debug.inlineValues": "auto",
  // Controls when the internal Debug Console should open.
  "debug.internalConsoleOptions": "openOnFirstSessionStart",
  // Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
  //  - always: Auto attach to every Node.js process launched in the terminal.
  //  - smart: Auto attach when running scripts that aren't in a node_modules folder.
  //  - onlyWithFlag: Only auto attach when the `--inspect` is given.
  //  - disabled: Auto attach is disabled and not shown in status bar.
  "debug.javascript.autoAttachFilter": "disabled",
  // Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
  "debug.javascript.autoAttachSmartPattern": [
    "${workspaceFolder}/**",
    "!**/node_modules/**",
    "**/$KNOWN_TOOLS$/**"
  ],
  // When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
  "debug.javascript.automaticallyTunnelRemoteServer": true,
  // Whether to stop when conditional breakpoints throw an error.
  "debug.javascript.breakOnConditionalError": false,
  // Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
  "debug.javascript.codelens.npmScripts": "top",
  // Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
  "debug.javascript.debugByLinkOptions": "on",
  // The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
  "debug.javascript.defaultRuntimeExecutable": {
    "pwa-node": "node"
  },
  // Enables the experimental network view for targets that support it.
  "debug.javascript.enableNetworkView": true,
  // Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
  "debug.javascript.pickAndAttachOptions": {},
  // Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
  //
  // A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
  "debug.javascript.resourceRequestOptions": {},
  // Default launch options for the JavaScript debug terminal and npm scripts.
  "debug.javascript.terminalOptions": {},
  // Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
  "debug.javascript.unmapMissingSources": false,
  // Controls what to do when errors are encountered after running a preLaunchTask.
  //  - debugAnyway: Ignore task errors and start debugging.
  //  - showErrors: Show the Problems view and do not start debugging.
  //  - prompt: Prompt user.
  //  - abort: Cancel debugging.
  "debug.onTaskErrors": "prompt",
  // Controls when the debug view should open.
  "debug.openDebug": "openOnDebugBreak",
  // Automatically open the explorer view at the end of a debug session.
  "debug.openExplorerOnEnd": false,
  // Controls what editors to save before starting a debug session.
  //  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
  //  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
  //  - none: Don't save any editors before starting a debug session.
  "debug.saveBeforeStart": "allEditorsInActiveGroup",
  // Controls whether breakpoints should be shown in the overview ruler.
  "debug.showBreakpointsInOverviewRuler": false,
  // Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
  "debug.showInlineBreakpointCandidates": true,
  // Controls when the debug Status bar should be visible.
  //  - never: Never show debug in Status bar
  //  - always: Always show debug in Status bar
  //  - onFirstSessionStart: Show debug in Status bar only after debug was started for the first time
  "debug.showInStatusBar": "onFirstSessionStart",
  // Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
  "debug.showSubSessionsInToolBar": false,
  // Show variable type in variable pane during debug session
  "debug.showVariableTypes": false,
  // Before starting a new debug session in an integrated or external terminal, clear the terminal.
  "debug.terminal.clearBeforeReusing": false,
  // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires `window.commandCenter`), or `hidden`.
  //  - floating: Show debug toolbar in all views.
  //  - docked: Show debug toolbar only in debug views.
  //  - commandCenter: `(Experimental)` Show debug toolbar in the command center.
  //  - hidden: Do not show debug toolbar.
  "debug.toolBarLocation": "floating",
  // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
  "launch": {
    "compounds": [],
    "configurations": []
  },
  // Always reveal the executed test when `testing.followRunningTest` is on. If this setting is turned off, only failed tests will be revealed.
  "testing.alwaysRevealTestOnStateChange": false,
  // Configures when the error Peek view is automatically opened.
  //  - failureAnywhere: Open automatically no matter where the failure is.
  //  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
  //  - never: Never automatically open.
  "testing.automaticallyOpenPeekView": "never",
  // Controls whether to automatically open the Peek view during continuous run mode.
  "testing.automaticallyOpenPeekViewDuringAutoRun": false,
  // Controls when the testing view should open.
  //  - neverOpen: Never automatically open the testing views
  //  - openOnTestStart: Open the test results view when tests start
  //  - openOnTestFailure: Open the test result view on any test failure
  //  - openExplorerOnTestStart: Open the test explorer when tests start
  "testing.automaticallyOpenTestResults": "openOnTestStart",
  // Controls the count badge on the Testing icon on the Activity Bar.
  //  - failed: Show the number of failed tests
  //  - off: Disable the testing count badge
  //  - passed: Show the number of passed tests
  //  - skipped: Show the number of skipped tests
  "testing.countBadge": "failed",
  // Configures the colors used for percentages in test coverage bars.
  "testing.coverageBarThresholds": {
    "green": 90,
    "red": 0,
    "yellow": 60
  },
  // Controls whether the coverage toolbar is shown in the editor.
  "testing.coverageToolbarEnabled": false,
  // Controls the action to take when left-clicking on a test decoration in the gutter.
  //  - run: Run the test.
  //  - debug: Debug the test.
  //  - runWithCoverage: Run the test with coverage.
  //  - contextMenu: Open the context menu for more options.
  "testing.defaultGutterClickAction": "run",
  // Configures what percentage is displayed by default for test coverage.
  //  - totalCoverage: A calculation of the combined statement, function, and branch coverage.
  //  - statement: The statement coverage.
  //  - minimum: The minimum of statement, function, and branch coverage.
  "testing.displayedCoveragePercent": "totalCoverage",
  // Controls whether the running test should be followed in the Test Explorer view.
  "testing.followRunningTest": false,
  // Controls whether test decorations are shown in the editor gutter.
  "testing.gutterEnabled": true,
  // Control whether save all dirty editors before running a test.
  "testing.saveBeforeTest": true,
  // Controls whether to show messages from all test runs.
  "testing.showAllMessages": false,
  // Whether test coverage should be down in the File Explorer view.
  "testing.showCoverageInExplorer": true,
  // Controls whether inline actions are always visible in the Source Control view.
  "scm.alwaysShowActions": false,
  // Controls whether repositories should always be visible in the Source Control view.
  "scm.alwaysShowRepositories": false,
  // Controls whether the Source Control view should automatically reveal and select files when opening them.
  "scm.autoReveal": true,
  // Controls whether the Source Control view should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element.
  "scm.compactFolders": true,
  // Controls the count badge on the Source Control icon on the Activity Bar.
  //  - all: Show the sum of all Source Control Provider count badges.
  //  - focused: Show the count badge of the focused Source Control Provider.
  //  - off: Disable the Source Control count badge.
  "scm.countBadge": "all",
  // Controls the default Source Control repository view mode.
  //  - tree: Show the repository changes as a tree.
  //  - list: Show the repository changes as a list.
  "scm.defaultViewMode": "list",
  // Controls the default Source Control repository changes sort order when viewed as a list.
  //  - name: Sort the repository changes by file name.
  //  - path: Sort the repository changes by path.
  //  - status: Sort the repository changes by Source Control status.
  "scm.defaultViewSortKey": "path",
  // Controls diff decorations in the editor.
  //  - all: Show the diff decorations in all available locations.
  //  - gutter: Show the diff decorations only in the editor gutter.
  //  - overview: Show the diff decorations only in the overview ruler.
  //  - minimap: Show the diff decorations only in the minimap.
  //  - none: Do not show the diff decorations.
  "scm.diffDecorations": "all",
  // Controls the behavior of Source Control diff gutter decorations.
  //  - diff: Show the inline diff Peek view on click.
  //  - none: Do nothing.
  "scm.diffDecorationsGutterAction": "diff",
  // Controls whether a pattern is used for the diff decorations in gutter.
  "scm.diffDecorationsGutterPattern": {
    "added": false,
    "modified": true
  },
  // Controls the visibility of the Source Control diff decorator in the gutter.
  //  - always: Show the diff decorator in the gutter at all times.
  //  - hover: Show the diff decorator in the gutter only on hover.
  "scm.diffDecorationsGutterVisibility": "always",
  // Controls the width(px) of diff decorations in gutter (added & modified).
  "scm.diffDecorationsGutterWidth": 3,
  // Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
  //  - true: Ignore leading and trailing whitespace.
  //  - false: Do not ignore leading and trailing whitespace.
  //  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
  "scm.diffDecorationsIgnoreTrimWhitespace": "false",
  // Controls which badges are shown in the Source Control Graph view. The badges are shown on the right side of the graph indicating the names of history item groups.
  //  - all: Show badges of all history item groups in the Source Control Graph view.
  //  - filter: Show only the badges of history item groups used as a filter in the Source Control Graph view.
  "scm.graph.badges": "filter",
  // Controls whether the Source Control Graph view will load the next page of items when you scroll to the end of the list.
  "scm.graph.pageOnScroll": true,
  // The number of items to show in the Source Control Graph view by default and when loading more items.
  "scm.graph.pageSize": 50,
  // Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
  "scm.inputFontFamily": "default",
  // Controls the font size for the input message in pixels.
  "scm.inputFontSize": 13,
  // Controls the maximum number of lines that the input will auto-grow to.
  "scm.inputMaxLineCount": 10,
  // Controls the minimum number of lines that the input will auto-grow from.
  "scm.inputMinLineCount": 1,
  // Controls the count badges on Source Control Provider headers. These headers appear in the Source Control view when there is more than one provider or when the `scm.alwaysShowRepositories` setting is enabled, and in the Source Control Repositories view.
  //  - hidden: Hide Source Control Provider count badges.
  //  - auto: Only show count badge for Source Control Provider when non-zero.
  //  - visible: Show Source Control Provider count badges.
  "scm.providerCountBadge": "hidden",
  // Controls the sort order of the repositories in the source control repositories view.
  //  - discovery time: Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.
  //  - name: Repositories in the Source Control Repositories and Source Control views are sorted by repository name.
  //  - path: Repositories in the Source Control Repositories and Source Control views are sorted by repository path.
  "scm.repositories.sortOrder": "discovery time",
  // Controls how many repositories are visible in the Source Control Repositories section. Set to 0, to be able to manually resize the view.
  "scm.repositories.visible": 10,
  // Controls whether an action button can be shown in the Source Control view.
  "scm.showActionButton": true,
  // Controls whether an action button can be shown in the Source Control input.
  "scm.showInputActionButton": true,
  // Controls the default working set to use when switching to a source control history item group that does not have a working set.
  //  - empty: Use an empty working set when switching to a source control history item group that does not have a working set.
  //  - current: Use the current working set when switching to a source control history item group that does not have a working set.
  "scm.workingSets.default": "current",
  // Controls whether to store editor working sets when switching between source control history item groups.
  "scm.workingSets.enabled": false,
  // Specify a list of extensions that are allowed to use. This helps maintain a secure and consistent development environment by restricting the use of unauthorized extensions. For more information on how to configure this setting, please visit the [Configure Allowed Extensions](https://code.visualstudio.com/docs/setup/enterprise#_configure-allowed-extensions) section.
  "extensions.allowed": "*",
  // When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
  "extensions.autoCheckUpdates": true,
  // Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
  //  - true: Download and install updates automatically for all extensions.
  //  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions.
  //  - false: Extensions are not automatically updated.
  "extensions.autoUpdate": true,
  // When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
  "extensions.closeExtensionDetailsOnViewChange": false,
  // When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
  "extensions.confirmedUriHandlerExtensionIds": [],
  // Configure an extension to execute in a different extension host process.
  "extensions.experimental.affinity": {},
  // When enabled, extensions which declare the `onStartupFinished` activation event will be activated after a timeout.
  "extensions.experimental.deferredStartupFinishedActivation": false,
  // When enabled, extensions can be searched for via Quick Access and report issues from there.
  "extensions.experimental.issueQuickAccess": true,
  // When enabled, the notifications for extension recommendations will not be shown.
  "extensions.ignoreRecommendations": false,
  // This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
  //
  "extensions.showRecommendationsOnlyOnDemand": false,
  // When enabled, Node.js navigator object is exposed on the global scope.
  "extensions.supportNodeGlobalNavigator": false,
  // Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
  "extensions.supportUntrustedWorkspaces": {},
  // Override the virtual workspaces support of an extension.
  "extensions.supportVirtualWorkspaces": {},
  // When enabled, extensions are verified to be signed before getting installed.
  "extensions.verifySignature": true,
  // Enable web worker extension host.
  //  - true: The Web Worker Extension Host will always be launched.
  //  - false: The Web Worker Extension Host will never be launched.
  //  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
  "extensions.webWorker": "auto",
  // When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched
  //  - integrated: Show the integrated terminal action.
  //  - external: Show the external terminal action.
  //  - both: Show both integrated and external terminal actions.
  "terminal.explorerKind": "integrated",
  // Customizes which terminal to run on Linux.
  "terminal.external.linuxExec": "xterm",
  // Customizes which terminal application to run on macOS.
  "terminal.external.osxExec": "Terminal.app",
  // Customizes which terminal to run on Windows.
  "terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",
  // Focus the terminal accessible view when a command is executed.
  "terminal.integrated.accessibleViewFocusOnCommandExecution": false,
  // Preserve the cursor position on reopen of the terminal's accessible view rather than setting it to the bottom of the buffer.
  "terminal.integrated.accessibleViewPreserveCursorPosition": false,
  // Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
  "terminal.integrated.allowChords": true,
  // An array of strings containing the URI schemes that the terminal is allowed to open links for. By default, only a small subset of possible schemes are allowed for security reasons.
  "terminal.integrated.allowedLinkSchemes": [
    "file",
    "http",
    "https",
    "mailto",
    "vscode",
    "vscode-insiders"
  ],
  // Whether to allow menubar mnemonics (for example Alt+F) to trigger the open of the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
  "terminal.integrated.allowMnemonics": false,
  // If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
  "terminal.integrated.altClickMovesCursor": true,
  // The terminal profile to use on Linux for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationProfile.linux": null,
  // The terminal profile to use on macOS for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationProfile.osx": null,
  // The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.windows` (now deprecated) is set.
  "terminal.integrated.automationProfile.windows": null,
  // A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
  //
  // Remarks:
  //
  // - Use `"Terminate batch job (Y/N)": "Y\r"` to automatically respond to the terminate batch job prompt on Windows.
  // - The message includes escape sequences so the reply might not happen with styled text.
  // - Each reply can only happen once every second.
  // - Use `"\r"` in the reply to mean the enter key.
  // - To unset a default key, set the value to null.
  // - Restart VS Code if new don't apply.
  "terminal.integrated.autoReplies": {},
  // The number of milliseconds to show the bell within a terminal tab when triggered.
  "terminal.integrated.bellDuration": 1000,
  // A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
  //
  // &nbsp;
  //
  // Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
  //
  // &nbsp;
  //
  // The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
  //
  // &nbsp;
  //
  // Default Skipped Commands:
  //
  // - editor.action.accessibilityHelp
  // - editor.action.toggleTabFocusMode
  // - notification.acceptPrimaryAction
  // - notifications.hideList
  // - notifications.hideToasts
  // - runCommands
  // - workbench.action.closeQuickOpen
  // - workbench.action.debug.continue
  // - workbench.action.debug.disconnect
  // - workbench.action.debug.pause
  // - workbench.action.debug.restart
  // - workbench.action.debug.run
  // - workbench.action.debug.start
  // - workbench.action.debug.stepInto
  // - workbench.action.debug.stepOut
  // - workbench.action.debug.stepOver
  // - workbench.action.debug.stop
  // - workbench.action.firstEditorInGroup
  // - workbench.action.focusActiveEditorGroup
  // - workbench.action.focusEighthEditorGroup
  // - workbench.action.focusFifthEditorGroup
  // - workbench.action.focusFirstEditorGroup
  // - workbench.action.focusFourthEditorGroup
  // - workbench.action.focusLastEditorGroup
  // - workbench.action.focusNextPart
  // - workbench.action.focusPreviousPart
  // - workbench.action.focusSecondEditorGroup
  // - workbench.action.focusSeventhEditorGroup
  // - workbench.action.focusSixthEditorGroup
  // - workbench.action.focusThirdEditorGroup
  // - workbench.action.lastEditorInGroup
  // - workbench.action.navigateDown
  // - workbench.action.navigateLeft
  // - workbench.action.navigateRight
  // - workbench.action.navigateUp
  // - workbench.action.nextEditor
  // - workbench.action.nextEditorInGroup
  // - workbench.action.nextPanelView
  // - workbench.action.nextSideBarView
  // - workbench.action.openNextRecentlyUsedEditor
  // - workbench.action.openNextRecentlyUsedEditorInGroup
  // - workbench.action.openPreviousRecentlyUsedEditor
  // - workbench.action.openPreviousRecentlyUsedEditorInGroup
  // - workbench.action.previousEditor
  // - workbench.action.previousEditorInGroup
  // - workbench.action.previousPanelView
  // - workbench.action.previousSideBarView
  // - workbench.action.quickOpen
  // - workbench.action.quickOpenLeastRecentlyUsedEditor
  // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenPreviousEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenView
  // - workbench.action.showCommands
  // - workbench.action.tasks.build
  // - workbench.action.tasks.reRunTask
  // - workbench.action.tasks.rerunForActiveTerminal
  // - workbench.action.tasks.restartTask
  // - workbench.action.tasks.runTask
  // - workbench.action.tasks.showLog
  // - workbench.action.tasks.showTasks
  // - workbench.action.tasks.terminate
  // - workbench.action.tasks.test
  // - workbench.action.terminal.acceptSelectedSuggestion
  // - workbench.action.terminal.acceptSelectedSuggestionEnter
  // - workbench.action.terminal.chat.cancel
  // - workbench.action.terminal.chat.close
  // - workbench.action.terminal.chat.discard
  // - workbench.action.terminal.chat.feedbackHelpful
  // - workbench.action.terminal.chat.feedbackReportIssue
  // - workbench.action.terminal.chat.feedbackUnhelpful
  // - workbench.action.terminal.chat.insertCommand
  // - workbench.action.terminal.chat.makeRequest
  // - workbench.action.terminal.chat.runCommand
  // - workbench.action.terminal.chat.start
  // - workbench.action.terminal.chat.viewInChat
  // - workbench.action.terminal.clear
  // - workbench.action.terminal.clearSelection
  // - workbench.action.terminal.copyAndClearSelection
  // - workbench.action.terminal.copyLastCommand
  // - workbench.action.terminal.copyLastCommandAndLastCommandOutput
  // - workbench.action.terminal.copyLastCommandOutput
  // - workbench.action.terminal.copySelection
  // - workbench.action.terminal.copySelectionAsHtml
  // - workbench.action.terminal.deleteToLineStart
  // - workbench.action.terminal.deleteWordLeft
  // - workbench.action.terminal.deleteWordRight
  // - workbench.action.terminal.findNext
  // - workbench.action.terminal.findPrevious
  // - workbench.action.terminal.focus
  // - workbench.action.terminal.focusAccessibleBuffer
  // - workbench.action.terminal.focusAtIndex1
  // - workbench.action.terminal.focusAtIndex2
  // - workbench.action.terminal.focusAtIndex3
  // - workbench.action.terminal.focusAtIndex4
  // - workbench.action.terminal.focusAtIndex5
  // - workbench.action.terminal.focusAtIndex6
  // - workbench.action.terminal.focusAtIndex7
  // - workbench.action.terminal.focusAtIndex8
  // - workbench.action.terminal.focusAtIndex9
  // - workbench.action.terminal.focusFind
  // - workbench.action.terminal.focusHover
  // - workbench.action.terminal.focusNext
  // - workbench.action.terminal.focusNextPane
  // - workbench.action.terminal.focusPrevious
  // - workbench.action.terminal.focusPreviousPane
  // - workbench.action.terminal.goToRecentDirectory
  // - workbench.action.terminal.hideFind
  // - workbench.action.terminal.hideSuggestWidget
  // - workbench.action.terminal.kill
  // - workbench.action.terminal.killEditor
  // - workbench.action.terminal.moveToEditor
  // - workbench.action.terminal.moveToLineEnd
  // - workbench.action.terminal.moveToLineStart
  // - workbench.action.terminal.moveToTerminalPanel
  // - workbench.action.terminal.new
  // - workbench.action.terminal.newInActiveWorkspace
  // - workbench.action.terminal.paste
  // - workbench.action.terminal.pasteSelection
  // - workbench.action.terminal.requestCompletions
  // - workbench.action.terminal.resizePaneDown
  // - workbench.action.terminal.resizePaneLeft
  // - workbench.action.terminal.resizePaneRight
  // - workbench.action.terminal.resizePaneUp
  // - workbench.action.terminal.runActiveFile
  // - workbench.action.terminal.runRecentCommand
  // - workbench.action.terminal.runSelectedText
  // - workbench.action.terminal.scrollDown
  // - workbench.action.terminal.scrollDownPage
  // - workbench.action.terminal.scrollToBottom
  // - workbench.action.terminal.scrollToNextCommand
  // - workbench.action.terminal.scrollToPreviousCommand
  // - workbench.action.terminal.scrollToTop
  // - workbench.action.terminal.scrollUp
  // - workbench.action.terminal.scrollUpPage
  // - workbench.action.terminal.searchWorkspace
  // - workbench.action.terminal.selectAll
  // - workbench.action.terminal.selectNextPageSuggestion
  // - workbench.action.terminal.selectNextSuggestion
  // - workbench.action.terminal.selectPrevPageSuggestion
  // - workbench.action.terminal.selectPrevSuggestion
  // - workbench.action.terminal.selectToNextCommand
  // - workbench.action.terminal.selectToNextLine
  // - workbench.action.terminal.selectToPreviousCommand
  // - workbench.action.terminal.selectToPreviousLine
  // - workbench.action.terminal.sendSequence
  // - workbench.action.terminal.sizeToContentWidth
  // - workbench.action.terminal.split
  // - workbench.action.terminal.splitInActiveWorkspace
  // - workbench.action.terminal.suggestToggleDetails
  // - workbench.action.terminal.suggestToggleDetailsFocus
  // - workbench.action.terminal.toggleFindCaseSensitive
  // - workbench.action.terminal.toggleFindRegex
  // - workbench.action.terminal.toggleFindWholeWord
  // - workbench.action.terminal.toggleTerminal
  // - workbench.action.toggleFullScreen
  // - workbench.action.toggleMaximizedPanel
  // - workbench.action.togglePanel
  "terminal.integrated.commandsToSkipShell": [],
  // Controls whether to confirm when the window closes if there are active terminal sessions. Background terminals like those launched by some extensions will not trigger the confirmation.
  //  - never: Never confirm.
  //  - always: Always confirm if there are terminals.
  //  - hasChildProcesses: Confirm if there are any terminals that have child processes.
  "terminal.integrated.confirmOnExit": "never",
  // Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell. Background terminals like those launched by some extensions will not trigger the confirmation.
  //  - never: Never confirm.
  //  - editor: Confirm if the terminal is in the editor.
  //  - panel: Confirm if the terminal is in the panel.
  //  - always: Confirm if the terminal is either in the editor or panel.
  "terminal.integrated.confirmOnKill": "editor",
  // Controls whether text selected in the terminal will be copied to the clipboard.
  "terminal.integrated.copyOnSelection": false,
  // Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": false,
  // Controls the style of terminal cursor when the terminal is focused.
  "terminal.integrated.cursorStyle": "block",
  // Controls the style of terminal cursor when the terminal is not focused.
  "terminal.integrated.cursorStyleInactive": "outline",
  // Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
  "terminal.integrated.cursorWidth": 1,
  // Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work when `terminal.integrated.gpuAcceleration` is disabled.
  "terminal.integrated.customGlyphs": true,
  // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
  "terminal.integrated.cwd": "",
  // Controls where newly created terminals will appear.
  //  - editor: Create terminals in the editor
  //  - view: Create terminals in the terminal view
  "terminal.integrated.defaultLocation": "view",
  // The default terminal profile on Linux.
  "terminal.integrated.defaultProfile.linux": null,
  // The default terminal profile on macOS.
  //  - null: Automatically detect the default
  //  - bash: $(terminal-bash) bash
  // - path: /bin/bash
  // - args: ['-l']
  //  - csh: $(terminal) csh
  // - path: /bin/csh
  //  - dash: $(terminal) dash
  // - path: /bin/dash
  //  - ksh: $(terminal) ksh
  // - path: /bin/ksh
  //  - sh: $(terminal) sh
  // - path: /bin/sh
  //  - tcsh: $(terminal) tcsh
  // - path: /bin/tcsh
  //  - zsh: $(terminal) zsh
  // - path: /opt/homebrew/bin/zsh
  // - args: ['-l']
  //  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
  // - extensionIdentifier: ms-vscode.js-debug
  //  - Spell Checker REPL: $(terminal) Spell Checker REPL
  // - extensionIdentifier: streetsidesoftware.code-spell-checker
  "terminal.integrated.defaultProfile.osx": null,
  // The default terminal profile on Windows.
  "terminal.integrated.defaultProfile.windows": null,
  // Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
  //  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
  //  - off: Do not set the `$LANG` environment variable.
  //  - on: Always set the `$LANG` environment variable.
  "terminal.integrated.detectLocale": "auto",
  // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
  "terminal.integrated.drawBoldTextInBrightColors": true,
  // This is now deprecated. Instead use the `terminal.integrated.enableVisualBell` and `accessibility.signals.terminalBell` settings.
  //
  "terminal.integrated.enableBell": false,
  // Whether to enable file links in terminals. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
  //  - off: Always off.
  //  - on: Always on.
  //  - notRemote: Enable only when not in a remote workspace.
  "terminal.integrated.enableFileLinks": "on",
  // Enables image support in the terminal, this will only work when `terminal.integrated.gpuAcceleration#` is enabled. Both sixel and iTerm's inline image protocol are supported on Linux and macOS. This will only work on Windows for versions of ConPTY >= v2 which is shipped with Windows itself, see also `#terminal.integrated.windowsUseConptyDll`. Images will currently not be restored between window reloads/reconnects.
  "terminal.integrated.enableImages": false,
  // Controls whether to show a warning dialog when pasting multiple lines into the terminal.
  //  - auto: Enable the warning but do not show it when:
  //
  // - Bracketed paste mode is enabled (the shell supports multi-line paste natively)
  // - The paste is handled by the shell's readline (in the case of pwsh)
  //  - always: Always show the warning if the text contains a new line.
  //  - never: Never show the warning.
  "terminal.integrated.enableMultiLinePasteWarning": "auto",
  // Persist terminal sessions/history for the workspace across window reloads.
  "terminal.integrated.enablePersistentSessions": true,
  // Controls whether the visual terminal bell is enabled. This shows up next to the terminal's name.
  "terminal.integrated.enableVisualBell": false,
  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
  "terminal.integrated.env.linux": {},
  // Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
  "terminal.integrated.env.osx": {},
  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
  "terminal.integrated.env.windows": {},
  // Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
  //  - off: Disable the indicator.
  //  - on: Enable the indicator.
  //  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
  "terminal.integrated.environmentChangesIndicator": "warnonly",
  // Whether to relaunch terminals automatically if extensions want to contribute to their environment and have not been interacted with yet.
  "terminal.integrated.environmentChangesRelaunch": true,
  // Scrolling speed multiplier when pressing `Alt`.
  "terminal.integrated.fastScrollSensitivity": 5,
  // Controls whether the terminal, accessible buffer, or neither will be focused after `Terminal: Run Selected Text In Active Terminal` has been run.
  //  - terminal: Always focus the terminal.
  //  - accessible-buffer: Always focus the accessible buffer.
  //  - none: Do nothing.
  "terminal.integrated.focusAfterRun": "none",
  // Controls the font family of the terminal. Defaults to `editor.fontFamily`'s value.
  "terminal.integrated.fontFamily": "",
  // Controls whether font ligatures are enabled in the terminal. Ligatures will only work if the configured `terminal.integrated.fontFamily` supports them.
  "terminal.integrated.fontLigatures.enabled": false,
  // When `terminal.integrated.gpuAcceleration#` is enabled and the particular `#terminal.integrated.fontFamily` cannot be parsed, this is the set of character sequences that will always be drawn together. This allows the use of a fixed set of ligatures even when the font isn't supported.
  "terminal.integrated.fontLigatures.fallbackLigatures": [
    "<--",
    "<---",
    "<<-",
    "<-",
    "->",
    "->>",
    "-->",
    "--->",
    "<==",
    "<===",
    "<<=",
    "<=",
    "=>",
    "=>>",
    "==>",
    "===>",
    ">=",
    ">>=",
    "<->",
    "<-->",
    "<--->",
    "<---->",
    "<=>",
    "<==>",
    "<===>",
    "<====>",
    "::",
    ":::",
    "<~~",
    "</",
    "</>",
    "/>",
    "~~>",
    "==",
    "!=",
    "/=",
    "~=",
    "<>",
    "===",
    "!==",
    "!===",
    "<:",
    ":=",
    "*=",
    "*+",
    "<*",
    "<*>",
    "*>",
    "<|",
    "<|>",
    "|>",
    "+*",
    "=*",
    "=:",
    ":>",
    "/*",
    "*/",
    "+++",
    "<!--",
    "<!---"
  ],
  // Controls what font feature settings are used when ligatures are enabled, in the format of the `font-feature-settings` CSS property. Some examples which may be valid depending on the font:
  //
  // - `"calt" off, "ss03"`
  // - `"liga" on`
  // - `"calt" off, "dlig" on`
  "terminal.integrated.fontLigatures.featureSettings": "\"calt\" on",
  // Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 12,
  // The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "terminal.integrated.fontWeight": "normal",
  // The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "terminal.integrated.fontWeightBold": "bold",
  // Controls whether the terminal will leverage the GPU to do its rendering.
  //  - auto: Let VS Code detect which renderer will give the best experience.
  //  - on: Enable GPU acceleration within the terminal.
  //  - off: Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.
  "terminal.integrated.gpuAcceleration": "auto",
  // Whether to hide the terminal view when the last terminal is closed. This will only happen when the terminal is the only visible view in the view container.
  "terminal.integrated.hideOnLastClosed": true,
  // Whether to hide the terminal view on startup, avoiding creating a terminal when there are no persistent sessions.
  //  - never: Never hide the terminal view on startup.
  //  - whenEmpty: Only hide the terminal when there are no persistent sessions restored.
  //  - always: Always hide the terminal, even when there are persistent sessions restored.
  "terminal.integrated.hideOnStartup": "never",
  // Controls whether the terminal will ignore bracketed paste mode even if the terminal was put into the mode, omitting the `\x1b[200~` and `\x1b[201~` sequences when pasting. This is useful when the shell is not respecting the mode which can happen in sub-shells for example.
  "terminal.integrated.ignoreBracketedPasteMode": false,
  // A set of process names to ignore when using the `terminal.integrated.confirmOnKill` setting.
  "terminal.integrated.ignoreProcessNames": [
    "starship",
    "oh-my-posh",
    "bash",
    "zsh"
  ],
  // Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
  "terminal.integrated.inheritEnv": true,
  // Controls if the first terminal without input will show a hint about available actions when it is focused.
  "terminal.integrated.initialHint": true,
  // Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.
  "terminal.integrated.letterSpacing": 0,
  // Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.
  "terminal.integrated.lineHeight": 1,
  // When local echo should be enabled. This will override `terminal.integrated.localEchoLatencyThreshold`
  //  - on: Always enabled
  //  - off: Always disabled
  //  - auto: Enabled only for remote workspaces
  "terminal.integrated.localEchoEnabled": "off",
  // Local echo will be disabled when any of these program names are found in the terminal title.
  "terminal.integrated.localEchoExcludePrograms": [
    "vim",
    "vi",
    "nano",
    "tmux"
  ],
  // Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
  "terminal.integrated.localEchoLatencyThreshold": 30,
  // Terminal style of locally echoed text; either a font style or an RGB color.
  "terminal.integrated.localEchoStyle": "dim",
  // Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
  "terminal.integrated.macOptionClickForcesSelection": false,
  // Controls whether to treat the option key as the meta key in the terminal on macOS.
  "terminal.integrated.macOptionIsMeta": false,
  // Controls how terminal reacts to middle click.
  //  - default: The platform default to focus the terminal. On Linux this will also paste the selection.
  //  - paste: Paste on middle click.
  "terminal.integrated.middleClickBehavior": "default",
  // When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:
  //
  // - 1: Do nothing and use the standard theme colors.
  // - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).
  // - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
  // - 21: White on black or black on white.
  "terminal.integrated.minimumContrastRatio": 4.5,
  // A multiplier to be used on the `deltaY` of mouse wheel scroll events.
  "terminal.integrated.mouseWheelScrollSensitivity": 1,
  // Zoom the font of the terminal when using mouse wheel and holding `Cmd`.
  "terminal.integrated.mouseWheelZoom": false,
  // When the terminal process must be shut down (for example on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.
  //
  // Caveats:
  //
  // - Restoring of the process current working directory depends on whether it is supported by the shell.
  // - Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.
  //  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
  //  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
  //  - never: Never restore the terminal buffers or recreate the process.
  "terminal.integrated.persistentSessionReviveProcess": "onExit",
  // Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
  "terminal.integrated.persistentSessionScrollback": 100,
  // A set of terminal profile customizations for Linux which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
  //
  // To override an existing profile use its profile name as the key, for example:
  //
  // ```json
  // "terminal.integrated.profile.linux": {
  //   "bash": null
  // }
  // ```
  //
  // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.linux": {
    "bash": {
      "icon": "terminal-bash",
      "path": "bash"
    },
    "fish": {
      "path": "fish"
    },
    "pwsh": {
      "icon": "terminal-powershell",
      "path": "pwsh"
    },
    "tmux": {
      "icon": "terminal-tmux",
      "path": "tmux"
    },
    "zsh": {
      "path": "zsh"
    }
  },
  // A set of terminal profile customizations for Mac which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
  //
  // To override an existing profile use its profile name as the key, for example:
  //
  // ```json
  // "terminal.integrated.profile.osx": {
  //   "bash": null
  // }
  // ```
  //
  // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.osx": {
    "bash": {
      "args": [
        "-l"
      ],
      "icon": "terminal-bash",
      "path": "bash"
    },
    "fish": {
      "args": [
        "-l"
      ],
      "path": "fish"
    },
    "pwsh": {
      "icon": "terminal-powershell",
      "path": "pwsh"
    },
    "tmux": {
      "icon": "terminal-tmux",
      "path": "tmux"
    },
    "zsh": {
      "args": [
        "-l"
      ],
      "path": "zsh"
    }
  },
  // A set of terminal profile customizations for Windows which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
  //
  // To override an existing profile use its profile name as the key, for example:
  //
  // ```json
  // "terminal.integrated.profile.windows": {
  //   "bash": null
  // }
  // ```
  //
  // [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.windows": {
    "Command Prompt": {
      "args": [],
      "icon": "terminal-cmd",
      "path": [
        "${env:windir}\\Sysnative\\cmd.exe",
        "${env:windir}\\System32\\cmd.exe"
      ]
    },
    "Git Bash": {
      "source": "Git Bash"
    },
    "PowerShell": {
      "icon": "terminal-powershell",
      "source": "PowerShell"
    }
  },
  // Whether to rescale glyphs horizontally that are a single cell wide but have glyphs that would overlap following cell(s). This typically happens for ambiguous width characters (eg. the roman numeral characters U+2160+) which aren't featured in monospace fonts. Emoji glyphs are never rescaled.
  "terminal.integrated.rescaleOverlappingGlyphs": true,
  // Controls how terminal reacts to right click.
  //  - default: Show the context menu.
  //  - copyPaste: Copy when there is a selection, otherwise paste.
  //  - paste: Paste on right click.
  //  - selectWord: Select the word under the cursor and show the context menu.
  //  - nothing: Do nothing and pass event to terminal.
  "terminal.integrated.rightClickBehavior": "selectWord",
  // Controls the maximum number of lines the terminal keeps in its buffer. We pre-allocate memory based on this value in order to ensure a smooth experience. As such, as the value increases, so will the amount of memory.
  "terminal.integrated.scrollback": 1000,
  // Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
  "terminal.integrated.sendKeybindingsToShell": false,
  // When shell integration is enabled, adds a decoration for each command.
  //  - both: Show decorations in the gutter (left) and overview ruler (right)
  //  - gutter: Show gutter decorations to the left of the terminal
  //  - overviewRuler: Show overview ruler decorations to the right of the terminal
  //  - never: Do not show decorations
  "terminal.integrated.shellIntegration.decorationsEnabled": "both",
  // Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection.
  //
  // Shell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.
  //
  // Supported shells:
  //
  // - Linux/macOS: bash, fish, pwsh, zsh
  //  - Windows: pwsh, git bash
  //
  // This setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.
  //
  //  Note that the script injection may not work if you have custom arguments defined in the terminal profile, have enabled `editor.accessibilitySupport#`, have a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see `#terminal.integrated.shellIntegration.decorationsEnabled`
  "terminal.integrated.shellIntegration.enabled": true,
  // Controls whether to report the shell environment, enabling its use in features such as `terminal.integrated.suggest.enabled`. This may cause a slowdown when printing your shell's prompt.
  "terminal.integrated.shellIntegration.environmentReporting": false,
  // Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.
  "terminal.integrated.shellIntegration.history": 100,
  // Whether to show the command guide when hovering over a command in the terminal.
  "terminal.integrated.shellIntegration.showCommandGuide": true,
  // Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
  "terminal.integrated.showExitAlert": true,
  // Whether to show hovers for links in the terminal output.
  "terminal.integrated.showLinkHover": true,
  // Controls whether the terminal will scroll using an animation.
  "terminal.integrated.smoothScrolling": false,
  // Controls the working directory a split terminal starts with.
  //  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
  //  - initial: A new split terminal will use the working directory that the parent terminal started with.
  //  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
  "terminal.integrated.splitCwd": "inherited",
  // Shows the current command at the top of the terminal. This feature requires [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) to be activated. See `terminal.integrated.shellIntegration.enabled`.
  "terminal.integrated.stickyScroll.enabled": false,
  // Defines the maximum number of sticky lines to show. Sticky scroll lines will never exceed 40% of the viewport regardless of this setting.
  "terminal.integrated.stickyScroll.maxLineCount": 5,
  // Controls whether to enable $CDPATH support which exposes children of the folders in the $CDPATH variable regardless of the current working directory. $CDPATH is expected to be semi colon-separated on Windows and colon-separated on other platforms.
  //  - off: Disable the feature.
  //  - relative: Enable the feature and use relative paths.
  //  - absolute: Enable the feature and use absolute paths. This is useful when the shell doesn't natively support `$CDPATH`.
  "terminal.integrated.suggest.cdPath": "absolute",
  // Enables terminal intellisense suggestions (preview) for supported shells (PowerShell v7+, zsh, bash, fish) when `terminal.integrated.shellIntegration.enabled` is set to `true`.
  //
  // If shell integration is installed manually, `VSCODE_SUGGEST` needs to be set to `1` before calling the shell integration script.
  "terminal.integrated.suggest.enabled": false,
  // Controls whether the shell's inline suggestion should be detected and how it is scored.
  //  - off: Disable the feature.
  //  - alwaysOnTopExceptExactMatch: Enable the feature and sort the inline suggestion without forcing it to be on top. This means that exact matches will be will be above the inline suggestion.
  //  - alwaysOnTop: Enable the feature and always put the inline suggestion on top.
  "terminal.integrated.suggest.inlineSuggestion": "alwaysOnTop",
  // Providers are enabled by default. Omit them by setting the id of the provider to `false`.
  "terminal.integrated.suggest.providers": {
    "lsp": true,
    "pwsh-shell-integration": true,
    "terminal-suggest": true
  },
  // Controls whether suggestions should automatically show up while typing. Also be aware of the `terminal.integrated.suggest.suggestOnTriggerCharacters`-setting which controls if suggestions are triggered by special characters.
  "terminal.integrated.suggest.quickSuggestions": {
    "arguments": "on",
    "commands": "on",
    "unknown": "off"
  },
  // Controls whether suggestions should run immediately when `Enter` (not `Tab`) is used to accept the result.
  //  - never: Never run on `Enter`.
  //  - exactMatch: Run on `Enter` when the suggestion is typed in its entirety.
  //  - exactMatchIgnoreExtension: Run on `Enter` when the suggestion is typed in its entirety or when a file is typed without its extension included.
  //  - always: Always run on `Enter`.
  "terminal.integrated.suggest.runOnEnter": "never",
  // Controls how suggestion selection works in the integrated terminal.
  //  - partial: Partially select a suggestion when automatically triggering IntelliSense. `Tab` can be used to accept the first suggestion, only after navigating the suggestions via `Down` will `Enter` also accept the active suggestion.
  //  - always: Always select a suggestion when automatically triggering IntelliSense. `Enter` or `Tab` can be used to accept the first suggestion.
  //  - never: Never select a suggestion when automatically triggering IntelliSense. The list must be navigated via `Down` before `Enter` or `Tab` can be used to accept the active suggestion.
  "terminal.integrated.suggest.selectionMode": "partial",
  // Controls whether the terminal suggestions status bar should be shown.
  "terminal.integrated.suggest.showStatusBar": true,
  // Controls whether suggestions should automatically show up when typing trigger characters.
  "terminal.integrated.suggest.suggestOnTriggerCharacters": true,
  // Determines whether the up arrow key navigates the command history when focus is on the first suggestion and navigation has not yet occurred. When set to false, the up arrow will move focus to the last suggestion instead.
  "terminal.integrated.suggest.upArrowNavigatesHistory": true,
  // A set of windows command executable extensions that will be included as suggestions in the terminal.
  //
  // Many executables are included by default, listed below:
  //
  // - bat
  // - cmd
  // - com
  // - exe
  // - jar
  // - js
  // - msi
  // - pl
  // - ps1
  // - py
  // - rb
  // - sh
  // - vbs.
  //
  // To exclude an extension, set it to `false`
  //
  // . To include one not in the list, add it and set it to `true`.
  "terminal.integrated.suggest.windowsExecutableExtensions": {},
  // A theme color ID to associate with terminal icons by default.
  "terminal.integrated.tabs.defaultColor": null,
  // A codicon ID to associate with terminal icons by default.
  //  - add: $(add)
  //  - plus: $(plus)
  //  - gist-new: $(gist-new)
  //  - repo-create: $(repo-create)
  //  - lightbulb: $(lightbulb)
  //  - light-bulb: $(light-bulb)
  //  - repo: $(repo)
  //  - repo-delete: $(repo-delete)
  //  - gist-fork: $(gist-fork)
  //  - repo-forked: $(repo-forked)
  //  - git-pull-request: $(git-pull-request)
  //  - git-pull-request-abandoned: $(git-pull-request-abandoned)
  //  - record-keys: $(record-keys)
  //  - keyboard: $(keyboard)
  //  - tag: $(tag)
  //  - git-pull-request-label: $(git-pull-request-label)
  //  - tag-add: $(tag-add)
  //  - tag-remove: $(tag-remove)
  //  - person: $(person)
  //  - person-follow: $(person-follow)
  //  - person-outline: $(person-outline)
  //  - person-filled: $(person-filled)
  //  - git-branch: $(git-branch)
  //  - git-branch-create: $(git-branch-create)
  //  - git-branch-delete: $(git-branch-delete)
  //  - source-control: $(source-control)
  //  - mirror: $(mirror)
  //  - mirror-public: $(mirror-public)
  //  - star: $(star)
  //  - star-add: $(star-add)
  //  - star-delete: $(star-delete)
  //  - star-empty: $(star-empty)
  //  - comment: $(comment)
  //  - comment-add: $(comment-add)
  //  - alert: $(alert)
  //  - warning: $(warning)
  //  - search: $(search)
  //  - search-save: $(search-save)
  //  - log-out: $(log-out)
  //  - sign-out: $(sign-out)
  //  - log-in: $(log-in)
  //  - sign-in: $(sign-in)
  //  - eye: $(eye)
  //  - eye-unwatch: $(eye-unwatch)
  //  - eye-watch: $(eye-watch)
  //  - circle-filled: $(circle-filled)
  //  - primitive-dot: $(primitive-dot)
  //  - close-dirty: $(close-dirty)
  //  - debug-breakpoint: $(debug-breakpoint)
  //  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
  //  - debug-hint: $(debug-hint)
  //  - terminal-decoration-success: $(terminal-decoration-success)
  //  - primitive-square: $(primitive-square)
  //  - edit: $(edit)
  //  - pencil: $(pencil)
  //  - info: $(info)
  //  - issue-opened: $(issue-opened)
  //  - gist-private: $(gist-private)
  //  - git-fork-private: $(git-fork-private)
  //  - lock: $(lock)
  //  - mirror-private: $(mirror-private)
  //  - close: $(close)
  //  - remove-close: $(remove-close)
  //  - x: $(x)
  //  - repo-sync: $(repo-sync)
  //  - sync: $(sync)
  //  - clone: $(clone)
  //  - desktop-download: $(desktop-download)
  //  - beaker: $(beaker)
  //  - microscope: $(microscope)
  //  - vm: $(vm)
  //  - device-desktop: $(device-desktop)
  //  - file: $(file)
  //  - file-text: $(file-text)
  //  - more: $(more)
  //  - ellipsis: $(ellipsis)
  //  - kebab-horizontal: $(kebab-horizontal)
  //  - mail-reply: $(mail-reply)
  //  - reply: $(reply)
  //  - organization: $(organization)
  //  - organization-filled: $(organization-filled)
  //  - organization-outline: $(organization-outline)
  //  - new-file: $(new-file)
  //  - file-add: $(file-add)
  //  - new-folder: $(new-folder)
  //  - file-directory-create: $(file-directory-create)
  //  - trash: $(trash)
  //  - trashcan: $(trashcan)
  //  - history: $(history)
  //  - clock: $(clock)
  //  - folder: $(folder)
  //  - file-directory: $(file-directory)
  //  - symbol-folder: $(symbol-folder)
  //  - logo-github: $(logo-github)
  //  - mark-github: $(mark-github)
  //  - github: $(github)
  //  - terminal: $(terminal)
  //  - console: $(console)
  //  - repl: $(repl)
  //  - zap: $(zap)
  //  - symbol-event: $(symbol-event)
  //  - error: $(error)
  //  - stop: $(stop)
  //  - variable: $(variable)
  //  - symbol-variable: $(symbol-variable)
  //  - array: $(array)
  //  - symbol-array: $(symbol-array)
  //  - symbol-module: $(symbol-module)
  //  - symbol-package: $(symbol-package)
  //  - symbol-namespace: $(symbol-namespace)
  //  - symbol-object: $(symbol-object)
  //  - symbol-method: $(symbol-method)
  //  - symbol-function: $(symbol-function)
  //  - symbol-constructor: $(symbol-constructor)
  //  - symbol-boolean: $(symbol-boolean)
  //  - symbol-null: $(symbol-null)
  //  - symbol-numeric: $(symbol-numeric)
  //  - symbol-number: $(symbol-number)
  //  - symbol-structure: $(symbol-structure)
  //  - symbol-struct: $(symbol-struct)
  //  - symbol-parameter: $(symbol-parameter)
  //  - symbol-type-parameter: $(symbol-type-parameter)
  //  - symbol-key: $(symbol-key)
  //  - symbol-text: $(symbol-text)
  //  - symbol-reference: $(symbol-reference)
  //  - go-to-file: $(go-to-file)
  //  - symbol-enum: $(symbol-enum)
  //  - symbol-value: $(symbol-value)
  //  - symbol-ruler: $(symbol-ruler)
  //  - symbol-unit: $(symbol-unit)
  //  - activate-breakpoints: $(activate-breakpoints)
  //  - archive: $(archive)
  //  - arrow-both: $(arrow-both)
  //  - arrow-down: $(arrow-down)
  //  - arrow-left: $(arrow-left)
  //  - arrow-right: $(arrow-right)
  //  - arrow-small-down: $(arrow-small-down)
  //  - arrow-small-left: $(arrow-small-left)
  //  - arrow-small-right: $(arrow-small-right)
  //  - arrow-small-up: $(arrow-small-up)
  //  - arrow-up: $(arrow-up)
  //  - bell: $(bell)
  //  - bold: $(bold)
  //  - book: $(book)
  //  - bookmark: $(bookmark)
  //  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
  //  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
  //  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
  //  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
  //  - debug-breakpoint-data: $(debug-breakpoint-data)
  //  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
  //  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
  //  - debug-breakpoint-log: $(debug-breakpoint-log)
  //  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
  //  - briefcase: $(briefcase)
  //  - broadcast: $(broadcast)
  //  - browser: $(browser)
  //  - bug: $(bug)
  //  - calendar: $(calendar)
  //  - case-sensitive: $(case-sensitive)
  //  - check: $(check)
  //  - checklist: $(checklist)
  //  - chevron-down: $(chevron-down)
  //  - chevron-left: $(chevron-left)
  //  - chevron-right: $(chevron-right)
  //  - chevron-up: $(chevron-up)
  //  - chrome-close: $(chrome-close)
  //  - chrome-maximize: $(chrome-maximize)
  //  - chrome-minimize: $(chrome-minimize)
  //  - chrome-restore: $(chrome-restore)
  //  - circle-outline: $(circle-outline)
  //  - circle: $(circle)
  //  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
  //  - terminal-decoration-incomplete: $(terminal-decoration-incomplete)
  //  - circle-slash: $(circle-slash)
  //  - circuit-board: $(circuit-board)
  //  - clear-all: $(clear-all)
  //  - clippy: $(clippy)
  //  - close-all: $(close-all)
  //  - cloud-download: $(cloud-download)
  //  - cloud-upload: $(cloud-upload)
  //  - code: $(code)
  //  - collapse-all: $(collapse-all)
  //  - color-mode: $(color-mode)
  //  - comment-discussion: $(comment-discussion)
  //  - credit-card: $(credit-card)
  //  - dash: $(dash)
  //  - dashboard: $(dashboard)
  //  - database: $(database)
  //  - debug-continue: $(debug-continue)
  //  - debug-disconnect: $(debug-disconnect)
  //  - debug-pause: $(debug-pause)
  //  - debug-restart: $(debug-restart)
  //  - debug-start: $(debug-start)
  //  - debug-step-into: $(debug-step-into)
  //  - debug-step-out: $(debug-step-out)
  //  - debug-step-over: $(debug-step-over)
  //  - debug-stop: $(debug-stop)
  //  - debug: $(debug)
  //  - device-camera-video: $(device-camera-video)
  //  - device-camera: $(device-camera)
  //  - device-mobile: $(device-mobile)
  //  - diff-added: $(diff-added)
  //  - diff-ignored: $(diff-ignored)
  //  - diff-modified: $(diff-modified)
  //  - diff-removed: $(diff-removed)
  //  - diff-renamed: $(diff-renamed)
  //  - diff: $(diff)
  //  - diff-sidebyside: $(diff-sidebyside)
  //  - discard: $(discard)
  //  - editor-layout: $(editor-layout)
  //  - empty-window: $(empty-window)
  //  - exclude: $(exclude)
  //  - extensions: $(extensions)
  //  - eye-closed: $(eye-closed)
  //  - file-binary: $(file-binary)
  //  - file-code: $(file-code)
  //  - file-media: $(file-media)
  //  - file-pdf: $(file-pdf)
  //  - file-submodule: $(file-submodule)
  //  - file-symlink-directory: $(file-symlink-directory)
  //  - file-symlink-file: $(file-symlink-file)
  //  - file-zip: $(file-zip)
  //  - files: $(files)
  //  - filter: $(filter)
  //  - flame: $(flame)
  //  - fold-down: $(fold-down)
  //  - fold-up: $(fold-up)
  //  - fold: $(fold)
  //  - folder-active: $(folder-active)
  //  - folder-opened: $(folder-opened)
  //  - gear: $(gear)
  //  - gift: $(gift)
  //  - gist-secret: $(gist-secret)
  //  - gist: $(gist)
  //  - git-commit: $(git-commit)
  //  - git-compare: $(git-compare)
  //  - compare-changes: $(compare-changes)
  //  - git-merge: $(git-merge)
  //  - github-action: $(github-action)
  //  - github-alt: $(github-alt)
  //  - globe: $(globe)
  //  - grabber: $(grabber)
  //  - graph: $(graph)
  //  - gripper: $(gripper)
  //  - heart: $(heart)
  //  - home: $(home)
  //  - horizontal-rule: $(horizontal-rule)
  //  - hubot: $(hubot)
  //  - inbox: $(inbox)
  //  - issue-reopened: $(issue-reopened)
  //  - issues: $(issues)
  //  - italic: $(italic)
  //  - jersey: $(jersey)
  //  - json: $(json)
  //  - kebab-vertical: $(kebab-vertical)
  //  - key: $(key)
  //  - law: $(law)
  //  - lightbulb-autofix: $(lightbulb-autofix)
  //  - link-external: $(link-external)
  //  - link: $(link)
  //  - list-ordered: $(list-ordered)
  //  - list-unordered: $(list-unordered)
  //  - live-share: $(live-share)
  //  - loading: $(loading)
  //  - location: $(location)
  //  - mail-read: $(mail-read)
  //  - mail: $(mail)
  //  - markdown: $(markdown)
  //  - megaphone: $(megaphone)
  //  - mention: $(mention)
  //  - milestone: $(milestone)
  //  - git-pull-request-milestone: $(git-pull-request-milestone)
  //  - mortar-board: $(mortar-board)
  //  - move: $(move)
  //  - multiple-windows: $(multiple-windows)
  //  - mute: $(mute)
  //  - no-newline: $(no-newline)
  //  - note: $(note)
  //  - octoface: $(octoface)
  //  - open-preview: $(open-preview)
  //  - package: $(package)
  //  - paintcan: $(paintcan)
  //  - pin: $(pin)
  //  - play: $(play)
  //  - run: $(run)
  //  - plug: $(plug)
  //  - preserve-case: $(preserve-case)
  //  - preview: $(preview)
  //  - project: $(project)
  //  - pulse: $(pulse)
  //  - question: $(question)
  //  - quote: $(quote)
  //  - radio-tower: $(radio-tower)
  //  - reactions: $(reactions)
  //  - references: $(references)
  //  - refresh: $(refresh)
  //  - regex: $(regex)
  //  - remote-explorer: $(remote-explorer)
  //  - remote: $(remote)
  //  - remove: $(remove)
  //  - replace-all: $(replace-all)
  //  - replace: $(replace)
  //  - repo-clone: $(repo-clone)
  //  - repo-force-push: $(repo-force-push)
  //  - repo-pull: $(repo-pull)
  //  - repo-push: $(repo-push)
  //  - report: $(report)
  //  - request-changes: $(request-changes)
  //  - rocket: $(rocket)
  //  - root-folder-opened: $(root-folder-opened)
  //  - root-folder: $(root-folder)
  //  - rss: $(rss)
  //  - ruby: $(ruby)
  //  - save-all: $(save-all)
  //  - save-as: $(save-as)
  //  - save: $(save)
  //  - screen-full: $(screen-full)
  //  - screen-normal: $(screen-normal)
  //  - search-stop: $(search-stop)
  //  - server: $(server)
  //  - settings-gear: $(settings-gear)
  //  - settings: $(settings)
  //  - shield: $(shield)
  //  - smiley: $(smiley)
  //  - sort-precedence: $(sort-precedence)
  //  - split-horizontal: $(split-horizontal)
  //  - split-vertical: $(split-vertical)
  //  - squirrel: $(squirrel)
  //  - star-full: $(star-full)
  //  - star-half: $(star-half)
  //  - symbol-class: $(symbol-class)
  //  - symbol-color: $(symbol-color)
  //  - symbol-constant: $(symbol-constant)
  //  - symbol-enum-member: $(symbol-enum-member)
  //  - symbol-field: $(symbol-field)
  //  - symbol-file: $(symbol-file)
  //  - symbol-interface: $(symbol-interface)
  //  - symbol-keyword: $(symbol-keyword)
  //  - symbol-misc: $(symbol-misc)
  //  - symbol-operator: $(symbol-operator)
  //  - symbol-property: $(symbol-property)
  //  - wrench: $(wrench)
  //  - wrench-subaction: $(wrench-subaction)
  //  - symbol-snippet: $(symbol-snippet)
  //  - tasklist: $(tasklist)
  //  - telescope: $(telescope)
  //  - text-size: $(text-size)
  //  - three-bars: $(three-bars)
  //  - thumbsdown: $(thumbsdown)
  //  - thumbsup: $(thumbsup)
  //  - tools: $(tools)
  //  - triangle-down: $(triangle-down)
  //  - triangle-left: $(triangle-left)
  //  - triangle-right: $(triangle-right)
  //  - triangle-up: $(triangle-up)
  //  - twitter: $(twitter)
  //  - unfold: $(unfold)
  //  - unlock: $(unlock)
  //  - unmute: $(unmute)
  //  - unverified: $(unverified)
  //  - verified: $(verified)
  //  - versions: $(versions)
  //  - vm-active: $(vm-active)
  //  - vm-outline: $(vm-outline)
  //  - vm-running: $(vm-running)
  //  - watch: $(watch)
  //  - whitespace: $(whitespace)
  //  - whole-word: $(whole-word)
  //  - window: $(window)
  //  - word-wrap: $(word-wrap)
  //  - zoom-in: $(zoom-in)
  //  - zoom-out: $(zoom-out)
  //  - list-filter: $(list-filter)
  //  - list-flat: $(list-flat)
  //  - list-selection: $(list-selection)
  //  - selection: $(selection)
  //  - list-tree: $(list-tree)
  //  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
  //  - debug-breakpoint-function: $(debug-breakpoint-function)
  //  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
  //  - debug-stackframe-active: $(debug-stackframe-active)
  //  - circle-small-filled: $(circle-small-filled)
  //  - debug-stackframe-dot: $(debug-stackframe-dot)
  //  - terminal-decoration-mark: $(terminal-decoration-mark)
  //  - debug-stackframe: $(debug-stackframe)
  //  - debug-stackframe-focused: $(debug-stackframe-focused)
  //  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
  //  - symbol-string: $(symbol-string)
  //  - debug-reverse-continue: $(debug-reverse-continue)
  //  - debug-step-back: $(debug-step-back)
  //  - debug-restart-frame: $(debug-restart-frame)
  //  - debug-alt: $(debug-alt)
  //  - call-incoming: $(call-incoming)
  //  - call-outgoing: $(call-outgoing)
  //  - menu: $(menu)
  //  - expand-all: $(expand-all)
  //  - feedback: $(feedback)
  //  - git-pull-request-reviewer: $(git-pull-request-reviewer)
  //  - group-by-ref-type: $(group-by-ref-type)
  //  - ungroup-by-ref-type: $(ungroup-by-ref-type)
  //  - account: $(account)
  //  - git-pull-request-assignee: $(git-pull-request-assignee)
  //  - bell-dot: $(bell-dot)
  //  - debug-console: $(debug-console)
  //  - library: $(library)
  //  - output: $(output)
  //  - run-all: $(run-all)
  //  - sync-ignored: $(sync-ignored)
  //  - pinned: $(pinned)
  //  - github-inverted: $(github-inverted)
  //  - server-process: $(server-process)
  //  - server-environment: $(server-environment)
  //  - pass: $(pass)
  //  - issue-closed: $(issue-closed)
  //  - stop-circle: $(stop-circle)
  //  - play-circle: $(play-circle)
  //  - record: $(record)
  //  - debug-alt-small: $(debug-alt-small)
  //  - vm-connect: $(vm-connect)
  //  - cloud: $(cloud)
  //  - merge: $(merge)
  //  - export: $(export)
  //  - graph-left: $(graph-left)
  //  - magnet: $(magnet)
  //  - notebook: $(notebook)
  //  - redo: $(redo)
  //  - check-all: $(check-all)
  //  - pinned-dirty: $(pinned-dirty)
  //  - pass-filled: $(pass-filled)
  //  - circle-large-filled: $(circle-large-filled)
  //  - circle-large: $(circle-large)
  //  - circle-large-outline: $(circle-large-outline)
  //  - combine: $(combine)
  //  - gather: $(gather)
  //  - table: $(table)
  //  - variable-group: $(variable-group)
  //  - type-hierarchy: $(type-hierarchy)
  //  - type-hierarchy-sub: $(type-hierarchy-sub)
  //  - type-hierarchy-super: $(type-hierarchy-super)
  //  - git-pull-request-create: $(git-pull-request-create)
  //  - run-above: $(run-above)
  //  - run-below: $(run-below)
  //  - notebook-template: $(notebook-template)
  //  - debug-rerun: $(debug-rerun)
  //  - workspace-trusted: $(workspace-trusted)
  //  - workspace-untrusted: $(workspace-untrusted)
  //  - workspace-unknown: $(workspace-unknown)
  //  - terminal-cmd: $(terminal-cmd)
  //  - terminal-debian: $(terminal-debian)
  //  - terminal-linux: $(terminal-linux)
  //  - terminal-powershell: $(terminal-powershell)
  //  - terminal-tmux: $(terminal-tmux)
  //  - terminal-ubuntu: $(terminal-ubuntu)
  //  - terminal-bash: $(terminal-bash)
  //  - arrow-swap: $(arrow-swap)
  //  - copy: $(copy)
  //  - person-add: $(person-add)
  //  - filter-filled: $(filter-filled)
  //  - wand: $(wand)
  //  - debug-line-by-line: $(debug-line-by-line)
  //  - inspect: $(inspect)
  //  - layers: $(layers)
  //  - layers-dot: $(layers-dot)
  //  - layers-active: $(layers-active)
  //  - compass: $(compass)
  //  - compass-dot: $(compass-dot)
  //  - compass-active: $(compass-active)
  //  - azure: $(azure)
  //  - issue-draft: $(issue-draft)
  //  - git-pull-request-closed: $(git-pull-request-closed)
  //  - git-pull-request-draft: $(git-pull-request-draft)
  //  - debug-all: $(debug-all)
  //  - debug-coverage: $(debug-coverage)
  //  - run-errors: $(run-errors)
  //  - folder-library: $(folder-library)
  //  - debug-continue-small: $(debug-continue-small)
  //  - beaker-stop: $(beaker-stop)
  //  - graph-line: $(graph-line)
  //  - graph-scatter: $(graph-scatter)
  //  - pie-chart: $(pie-chart)
  //  - bracket: $(bracket)
  //  - bracket-dot: $(bracket-dot)
  //  - bracket-error: $(bracket-error)
  //  - lock-small: $(lock-small)
  //  - azure-devops: $(azure-devops)
  //  - verified-filled: $(verified-filled)
  //  - newline: $(newline)
  //  - layout: $(layout)
  //  - layout-activitybar-left: $(layout-activitybar-left)
  //  - layout-activitybar-right: $(layout-activitybar-right)
  //  - layout-panel-left: $(layout-panel-left)
  //  - layout-panel-center: $(layout-panel-center)
  //  - layout-panel-justify: $(layout-panel-justify)
  //  - layout-panel-right: $(layout-panel-right)
  //  - layout-panel: $(layout-panel)
  //  - layout-sidebar-left: $(layout-sidebar-left)
  //  - layout-sidebar-right: $(layout-sidebar-right)
  //  - layout-statusbar: $(layout-statusbar)
  //  - layout-menubar: $(layout-menubar)
  //  - layout-centered: $(layout-centered)
  //  - target: $(target)
  //  - indent: $(indent)
  //  - record-small: $(record-small)
  //  - error-small: $(error-small)
  //  - terminal-decoration-error: $(terminal-decoration-error)
  //  - arrow-circle-down: $(arrow-circle-down)
  //  - arrow-circle-left: $(arrow-circle-left)
  //  - arrow-circle-right: $(arrow-circle-right)
  //  - arrow-circle-up: $(arrow-circle-up)
  //  - layout-sidebar-right-off: $(layout-sidebar-right-off)
  //  - layout-panel-off: $(layout-panel-off)
  //  - layout-sidebar-left-off: $(layout-sidebar-left-off)
  //  - blank: $(blank)
  //  - heart-filled: $(heart-filled)
  //  - map: $(map)
  //  - map-horizontal: $(map-horizontal)
  //  - fold-horizontal: $(fold-horizontal)
  //  - map-filled: $(map-filled)
  //  - map-horizontal-filled: $(map-horizontal-filled)
  //  - fold-horizontal-filled: $(fold-horizontal-filled)
  //  - circle-small: $(circle-small)
  //  - bell-slash: $(bell-slash)
  //  - bell-slash-dot: $(bell-slash-dot)
  //  - comment-unresolved: $(comment-unresolved)
  //  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
  //  - git-pull-request-new-changes: $(git-pull-request-new-changes)
  //  - search-fuzzy: $(search-fuzzy)
  //  - comment-draft: $(comment-draft)
  //  - send: $(send)
  //  - sparkle: $(sparkle)
  //  - insert: $(insert)
  //  - mic: $(mic)
  //  - thumbsdown-filled: $(thumbsdown-filled)
  //  - thumbsup-filled: $(thumbsup-filled)
  //  - coffee: $(coffee)
  //  - snake: $(snake)
  //  - game: $(game)
  //  - vr: $(vr)
  //  - chip: $(chip)
  //  - piano: $(piano)
  //  - music: $(music)
  //  - mic-filled: $(mic-filled)
  //  - repo-fetch: $(repo-fetch)
  //  - copilot: $(copilot)
  //  - lightbulb-sparkle: $(lightbulb-sparkle)
  //  - robot: $(robot)
  //  - sparkle-filled: $(sparkle-filled)
  //  - diff-single: $(diff-single)
  //  - diff-multiple: $(diff-multiple)
  //  - surround-with: $(surround-with)
  //  - share: $(share)
  //  - git-stash: $(git-stash)
  //  - git-stash-apply: $(git-stash-apply)
  //  - git-stash-pop: $(git-stash-pop)
  //  - vscode: $(vscode)
  //  - vscode-insiders: $(vscode-insiders)
  //  - code-oss: $(code-oss)
  //  - run-coverage: $(run-coverage)
  //  - run-all-coverage: $(run-all-coverage)
  //  - coverage: $(coverage)
  //  - github-project: $(github-project)
  //  - map-vertical: $(map-vertical)
  //  - fold-vertical: $(fold-vertical)
  //  - map-vertical-filled: $(map-vertical-filled)
  //  - fold-vertical-filled: $(fold-vertical-filled)
  //  - go-to-search: $(go-to-search)
  //  - percentage: $(percentage)
  //  - sort-percentage: $(sort-percentage)
  //  - attach: $(attach)
  //  - go-to-editing-session: $(go-to-editing-session)
  //  - edit-session: $(edit-session)
  //  - code-review: $(code-review)
  //  - copilot-warning: $(copilot-warning)
  //  - python: $(python)
  //  - copilot-large: $(copilot-large)
  //  - copilot-warning-large: $(copilot-warning-large)
  //  - keyboard-tab: $(keyboard-tab)
  //  - copilot-blocked: $(copilot-blocked)
  //  - copilot-not-connected: $(copilot-not-connected)
  //  - flag: $(flag)
  //  - lightbulb-empty: $(lightbulb-empty)
  //  - symbol-method-arrow: $(symbol-method-arrow)
  //  - copilot-unavailable: $(copilot-unavailable)
  //  - repo-pinned: $(repo-pinned)
  //  - keyboard-tab-above: $(keyboard-tab-above)
  //  - keyboard-tab-below: $(keyboard-tab-below)
  //  - git-pull-request-done: $(git-pull-request-done)
  //  - mcp: $(mcp)
  //  - extensions-large: $(extensions-large)
  //  - layout-panel-dock: $(layout-panel-dock)
  //  - layout-sidebar-left-dock: $(layout-sidebar-left-dock)
  //  - layout-sidebar-right-dock: $(layout-sidebar-right-dock)
  //  - copilot-in-progress: $(copilot-in-progress)
  //  - copilot-error: $(copilot-error)
  //  - copilot-success: $(copilot-success)
  //  - chat-sparkle: $(chat-sparkle)
  //  - search-sparkle: $(search-sparkle)
  //  - edit-sparkle: $(edit-sparkle)
  //  - copilot-snooze: $(copilot-snooze)
  //  - dialog-error: $(dialog-error)
  //  - dialog-warning: $(dialog-warning)
  //  - dialog-info: $(dialog-info)
  //  - dialog-close: $(dialog-close)
  //  - tree-item-expanded: $(tree-item-expanded)
  //  - tree-filter-on-type-on: $(tree-filter-on-type-on)
  //  - tree-filter-on-type-off: $(tree-filter-on-type-off)
  //  - tree-filter-clear: $(tree-filter-clear)
  //  - tree-item-loading: $(tree-item-loading)
  //  - menu-selection: $(menu-selection)
  //  - menu-submenu: $(menu-submenu)
  //  - menubar-more: $(menubar-more)
  //  - scrollbar-button-left: $(scrollbar-button-left)
  //  - scrollbar-button-right: $(scrollbar-button-right)
  //  - scrollbar-button-up: $(scrollbar-button-up)
  //  - scrollbar-button-down: $(scrollbar-button-down)
  //  - toolbar-more: $(toolbar-more)
  //  - quick-input-back: $(quick-input-back)
  //  - drop-down-button: $(drop-down-button)
  //  - symbol-customcolor: $(symbol-customcolor)
  //  - export: $(export)
  //  - workspace-unspecified: $(workspace-unspecified)
  //  - newline: $(newline)
  //  - thumbsdown-filled: $(thumbsdown-filled)
  //  - thumbsup-filled: $(thumbsup-filled)
  //  - git-fetch: $(git-fetch)
  //  - lightbulb-sparkle-autofix: $(lightbulb-sparkle-autofix)
  //  - debug-breakpoint-pending: $(debug-breakpoint-pending)
  "terminal.integrated.tabs.defaultIcon": "terminal",
  // Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
  // - `${cwd}`: the terminal's current working directory.
  // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
  // - `${workspaceFolder}`: the workspace in which the terminal was launched.
  // - `${workspaceFolderName}`: the `name` of the workspace in which the terminal was launched.
  // - `${local}`: indicates a local terminal in a remote workspace.
  // - `${process}`: the name of the terminal process.
  // - `${progress}`: the progress state as reported by the `OSC 9;4` sequence.
  // - `${separator}`: a conditional separator (` - `) that only shows when it's surrounded by variables with values or static text.
  // - `${sequence}`: the name provided to the terminal by the process.
  // - `${task}`: indicates this terminal is associated with a task.
  // - `${shellType}`: the detected shell type.
  // - `${shellCommand}`: the command being executed according to shell integration. This also requires high confidence in the detected command line, which may not work in some prompt frameworks.
  // - `${shellPromptInput}`: the shell's full prompt input according to shell integration.
  "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",
  // Controls whether terminal tab statuses support animation (eg. in progress tasks).
  "terminal.integrated.tabs.enableAnimation": true,
  // Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
  "terminal.integrated.tabs.enabled": true,
  // Controls whether focusing the terminal of a tab happens on double or single click.
  //  - singleClick: Focus the terminal when clicking a terminal tab
  //  - doubleClick: Focus the terminal when double-clicking a terminal tab
  "terminal.integrated.tabs.focusMode": "doubleClick",
  // Controls whether the terminal tabs view will hide under certain conditions.
  //  - never: Never hide the terminal tabs view
  //  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
  //  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
  "terminal.integrated.tabs.hideCondition": "singleTerminal",
  // Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
  //  - left: Show the terminal tabs view to the left of the terminal
  //  - right: Show the terminal tabs view to the right of the terminal
  "terminal.integrated.tabs.location": "right",
  // Separator used by `terminal.integrated.tabs.title#` and `#terminal.integrated.tabs.description`.
  "terminal.integrated.tabs.separator": " - ",
  // Controls whether terminal split and kill buttons are displays next to the new terminal button.
  //  - always: Always show the actions
  //  - singleTerminal: Show the actions when it is the only terminal opened
  //  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
  //  - never: Never show the actions
  "terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",
  // Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren't visible.
  //  - always: Always show the active terminal
  //  - singleTerminal: Show the active terminal when it is the only terminal opened
  //  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
  //  - never: Never show the active terminal
  "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",
  // Controls the terminal title. Variables are substituted based on the context:
  // - `${cwd}`: the terminal's current working directory.
  // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
  // - `${workspaceFolder}`: the workspace in which the terminal was launched.
  // - `${workspaceFolderName}`: the `name` of the workspace in which the terminal was launched.
  // - `${local}`: indicates a local terminal in a remote workspace.
  // - `${process}`: the name of the terminal process.
  // - `${progress}`: the progress state as reported by the `OSC 9;4` sequence.
  // - `${separator}`: a conditional separator (` - `) that only shows when it's surrounded by variables with values or static text.
  // - `${sequence}`: the name provided to the terminal by the process.
  // - `${task}`: indicates this terminal is associated with a task.
  // - `${shellType}`: the detected shell type.
  // - `${shellCommand}`: the command being executed according to shell integration. This also requires high confidence in the detected command line, which may not work in some prompt frameworks.
  // - `${shellPromptInput}`: the shell's full prompt input according to shell integration.
  "terminal.integrated.tabs.title": "${process}",
  // The number of cells in a tab stop.
  "terminal.integrated.tabStopWidth": 8,
  // Controls what version of Unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
  //  - 6: Version 6 of Unicode. This is an older version which should work better on older systems.
  //  - 11: Version 11 of Unicode. This version provides better support on modern systems that use modern versions of Unicode.
  "terminal.integrated.unicodeVersion": "11",
  // Controls whether or not WSL distros are shown in the terminal dropdown
  "terminal.integrated.useWslProfiles": true,
  // Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
  "terminal.integrated.windowsEnableConpty": true,
  // Whether to use the experimental conpty.dll (v1.22.250204002) shipped with VS Code, instead of the one bundled with Windows.
  "terminal.integrated.windowsUseConptyDll": false,
  // A string containing all characters to be considered word separators when double-clicking to select word and in the fallback 'word' link detection. Since this is used for link detection, including characters such as `:` that are used when detecting links will cause the line and column part of links like `file:10:5` to be ignored.
  "terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’“”|",
  // When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched
  //  - integrated: Show the integrated terminal action.
  //  - external: Show the external terminal action.
  //  - both: Show both integrated and external terminal actions.
  "terminal.sourceControlRepositoriesKind": "integrated",
  // Enable automatic tasks - note that tasks won't run in an untrusted workspace.
  //  - on: Always
  //  - off: Never
  "task.allowAutomaticTasks": "on",
  // Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
  "task.autoDetect": "on",
  // Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
  "task.problemMatchers.neverPrompt": false,
  // Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
  "task.quickOpen.detail": true,
  // Controls the number of recent items tracked in task quick open dialog.
  "task.quickOpen.history": 30,
  // Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
  "task.quickOpen.showAll": false,
  // Controls whether the task quick pick is skipped when there is only one task to pick from.
  "task.quickOpen.skip": false,
  // On window reload, reconnect to tasks that have problem matchers.
  "task.reconnection": true,
  // Save all dirty editors before running a task.
  //  - always: Always saves all editors before running.
  //  - never: Never saves editors before running.
  //  - prompt: Prompts whether to save editors before running.
  "task.saveBeforeRun": "always",
  // Configures whether a warning is shown when a provider is slow
  "task.slowProviderWarning": true,
  // Enable verbose logging for tasks.
  "task.verboseLogging": false,
  // Controls whether Problems view should automatically reveal files when opening them.
  "problems.autoReveal": true,
  // Show Errors & Warnings on files and folder. Overwritten by `problems.visibility` when it is off.
  "problems.decorations.enabled": true,
  // Controls the default view mode of the Problems view.
  "problems.defaultViewMode": "tree",
  // When enabled shows the current problem in the status bar.
  "problems.showCurrentInStatus": false,
  // Controls the order in which problems are navigated.
  //  - severity: Navigate problems ordered by severity
  //  - position: Navigate problems ordered by position
  "problems.sortOrder": "severity",
  // Controls whether the problems are visible throughout the editor and workbench.
  "problems.visibility": true,
  // Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
  "output.smartScroll.enabled": true,
  // Controls whether the comment thread should collapse when the thread is resolved.
  "comments.collapseOnResolve": true,
  // Controls whether the comments widget scrolls or expands.
  "comments.maxHeight": true,
  // This setting is deprecated in favor of `comments.openView`.
  // Controls when the comments panel should open.
  "comments.openPanel": "openOnSessionStartWithComments",
  // Controls when the comments view should open.
  //  - never: The comments view will never be opened.
  //  - file: The comments view will open when a file with comments is active.
  //  - firstFile: If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.
  //  - firstFileUnresolved: If the comments view has not been opened yet during this session and the comment is not resolved, it will open the first time during a session that a file with comments is active.
  "comments.openView": "firstFile",
  // Controls whether a confirmation dialog is shown when collapsing a comment thread.
  //  - whenHasUnsubmittedComments: Show a confirmation dialog when collapsing a comment thread with unsubmitted comments.
  //  - never: Never show a confirmation dialog when collapsing a comment thread.
  "comments.thread.confirmOnCollapse": "whenHasUnsubmittedComments",
  // Determines if relative time will be used in comment timestamps (ex. '1 day ago').
  "comments.useRelativeTime": true,
  // Controls the visibility of the comments bar and comment threads in editors that have commenting ranges and comments. Comments are still accessible via the Comments view and will cause commenting to be toggled on in the same way running the command "Comments: Toggle Editor Commenting" toggles comments.
  "comments.visible": true,
  // When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded. Also see `remote.autoForwardPortsSource`.
  "remote.autoForwardPorts": true,
  // The number of auto forwarded ports that will trigger the switch from `process` to `hybrid` when automatically forwarding ports and `remote.autoForwardPortsSource` is set to `process` by default. Set to `0` to disable the fallback. When `remote.autoForwardPortsFallback` hasn't been configured, but `remote.autoForwardPortsSource` has, `remote.autoForwardPortsFallback` will be treated as though it's set to `0`.
  "remote.autoForwardPortsFallback": 20,
  // Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts#` is true. When `#remote.autoForwardPorts#` is false, `#remote.autoForwardPortsSource` will be used to find information about ports that have already been forwarded. On Windows and macOS remotes, the `process` and `hybrid` options have no effect and `output` will be used.
  //  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
  //  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
  //  - hybrid: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports will be "un-forwarded" by watching for processes that listen on that port to be terminated.
  "remote.autoForwardPortsSource": "process",
  // List of extensions to install upon connection to a remote when already installed locally.
  "remote.defaultExtensionsIfInstalledLocally": [
    "GitHub.copilot",
    "GitHub.copilot-chat",
    "GitHub.vscode-pull-request-github"
  ],
  // When enabled extensions are downloaded locally and installed on remote.
  "remote.downloadExtensionsLocally": false,
  // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
  "remote.extensionKind": {
    "pub.name": [
      "ui"
    ]
  },
  // Controls whether local URLs with a port will be forwarded when opened from the terminal and the debug console.
  "remote.forwardOnOpen": true,
  // Specifies the local host name that will be used for port forwarding.
  "remote.localPortHost": "localhost",
  // Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
  //
  // ```
  // {
  //   "onAutoForward": "ignore"
  // }
  // ```
  "remote.otherPortsAttributes": {},
  // Set properties that are applied when a specific port number is forwarded. For example:
  //
  // ```
  // "3000": {
  //   "label": "Application"
  // },
  // "40000-55000": {
  //   "onAutoForward": "ignore"
  // },
  // ".+\\/server.js": {
  //  "onAutoForward": "openPreview"
  // }
  // ```
  "remote.portsAttributes": {
    "443": {
      "protocol": "https"
    },
    "8443": {
      "protocol": "https"
    }
  },
  // Restores the ports you forwarded in a workspace.
  "remote.restoreForwardedPorts": true,
  // The name under which the remote tunnel access is registered. If not set, the host name is used.
  "remote.tunnels.access.hostNameOverride": "",
  // Prevent this computer from sleeping when remote tunnel access is turned on.
  "remote.tunnels.access.preventSleep": false,
  // Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
  "timeline.pageOnScroll": true,
  // The number of items to show in the Timeline view by default and when loading more items. Setting to `null` will automatically choose a page size based on the visible area of the Timeline view.
  "timeline.pageSize": 50,
  // The limit of notebook output size in kilobytes (KB) where notebook files will no longer be backed up for hot reload. Use 0 for unlimited.
  "notebook.backup.sizeLimit": 10000,
  // When enabled, notebook breadcrumbs contain code cells.
  "notebook.breadcrumbs.showCodeCells": true,
  // Controls the verbosity of the cell execution time in the cell status bar.
  //  - default: The cell execution duration is visible, with advanced information in the hover tooltip.
  //  - verbose: The cell last execution timestamp and duration are visible, with advanced information in the hover tooltip.
  "notebook.cellExecutionTimeVerbosity": "default",
  // Show available diagnostics for cell failures.
  "notebook.cellFailureDiagnostics": true,
  // Controls where the focus indicator is rendered, either along the cell borders or on the left gutter.
  "notebook.cellFocusIndicator": "gutter",
  // Where the cell toolbar should be shown, or whether it should be hidden.
  "notebook.cellToolbarLocation": {
    "default": "right"
  },
  // Whether the cell toolbar should appear on hover or click.
  "notebook.cellToolbarVisibility": "click",
  // Run a series of Code Actions for a notebook on save. Code Actions must be specified and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, Code Actions will only be run when the file is saved explicitly. Example: `"notebook.source.organizeImports": "explicit"`
  "notebook.codeActionsOnSave": {},
  // Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
  "notebook.compactView": true,
  // Control whether a confirmation prompt is required to delete a running cell.
  "notebook.confirmDeleteRunningCell": true,
  // Control whether outputs action should be rendered in the output toolbar.
  "notebook.consolidatedOutputButton": true,
  // Control whether extra actions are shown in a dropdown next to the run button.
  "notebook.consolidatedRunButton": false,
  // Defines a default notebook formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
  //  - null: None
  //  - GitHub.copilot: Your AI pair programmer
  //  - GitHub.copilot-chat: AI chat features powered by Copilot
  //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
  //  - codezombiech.gitignore: Lets you pull .gitignore templates from the https://github.com/github/gitignore repository. Language support for .gitignore files.
  //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
  //  - vscode.json-language-features: Provides rich language support for JSON files.
  //  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - vscode.markdown-language-features: Provides rich language support for Markdown.
  //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
  //  - Oracle.mysql-shell-for-vs-code: The power of MySQL Shell as part of your VS Code workflow.
  //  - vscode.php-language-features: Provides rich language support for PHP files.
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - ms-python.python: Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.
  //  - humao.rest-client: REST Client for Visual Studio Code
  //  - jock.svg: SVG Coding, Minify, Pretty, Preview All-In-One
  //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
  //  - pranaygp.vscode-css-peek: Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.
  //  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
  //  - bmalehorn.vscode-fish: Fish syntax highlighting and formatting
  //  - ecmel.vscode-html-css: CSS Intellisense for HTML
  //  - stylelint.vscode-stylelint: Official Stylelint extension for Visual Studio Code
  //  - redhat.vscode-xml: XML Language Support by Red Hat
  //  - DotJoshJohnson.xml: XML Formatting, XQuery, and XPath Tools for Visual Studio Code
  //  - streetsidesoftware.code-spell-checker: Spelling checker for source code
  //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
  //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
  //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
  //  - ms-python.debugpy: Python Debugger extension using debugpy.
  //  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
  //  - vscode.emmet: Emmet support for VS Code
  //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
  //  - ms-vscode.extension-test-runner: Runs tests in VS Code extensions
  //  - vscode.git: Git SCM Integration
  //  - vscode.git-base: Git static contributions and pickers.
  //  - vscode.github: GitHub features for VS Code
  //  - vscode.github-authentication: GitHub Authentication Provider
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
  //  - ms-vscode.hexeditor: Allows viewing and editing files in a hex editor
  //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
  //  - vscode.jake: Extension to add Jake capabilities to VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - MariusAlchimavicius.json-to-ts: Convert JSON object to typescript interfaces
  //  - zhuangtongfa.material-theme: Atom's iconic One Dark theme for Visual Studio Code
  //  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
  //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
  //  - vscode.microsoft-authentication: Microsoft authentication provider
  //  - vscode.npm: Extension to add task support for npm scripts.
  //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
  //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
  //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
  //  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
  //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
  //  - clinyong.vscode-css-modules: Visual Studio Code extension for CSS Modules
  //  - github.vscode-github-actions: GitHub Actions workflows and runs for github.com hosted repositories in VS Code
  //  - vscode-icons-team.vscode-icons: Icons for Visual Studio Code
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - LeetCode.vscode-leetcode: Solve LeetCode problems in VS Code
  //  - unional.vscode-sort-package-json: Sort package.json
  "notebook.defaultFormatter": null,
  // Whether to use the enhanced text diff editor for notebook.
  "notebook.diff.enablePreview": true,
  // Enable the command to toggle the experimental notebook inline diff editor.
  "notebook.diff.experimental.toggleInline": false,
  // Hide Metadata Differences
  "notebook.diff.ignoreMetadata": false,
  // Hide Outputs Differences
  "notebook.diff.ignoreOutputs": false,
  // Whether to render the overview ruler in the diff editor for notebook.
  "notebook.diff.overviewRuler": false,
  // Priority list for output mime types
  "notebook.displayOrder": [],
  // Control whether the notebook editor should allow moving cells through drag and drop.
  "notebook.dragAndDropEnabled": true,
  // Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
  "notebook.editorOptionsCustomizations": {},
  // Enable experimental generate action to create code cell with inline chat enabled.
  "notebook.experimental.generate": true,
  // Enables the incremental saving of notebooks between processes and across Remote connections. When enabled, only the changes to the notebook are sent to the extension host, improving performance for large notebooks and slow network connections.
  "notebook.experimental.remoteSave": false,
  // Customize the Find Widget behavior for searching within notebook cells. When both markup source and markup preview are enabled, the Find Widget will search either the source code or preview based on the current state of the cell.
  "notebook.find.filters": {
    "codeOutput": true,
    "codeSource": true,
    "markupPreview": true,
    "markupSource": true
  },
  // Format a notebook cell upon execution. A formatter must be available.
  "notebook.formatOnCellExecution": false,
  // Format a notebook on save. A formatter must be available and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, the file will only be formatted when saved explicitly.
  "notebook.formatOnSave.enabled": false,
  // Control whether to render a global toolbar inside the notebook editor.
  "notebook.globalToolbar": true,
  // Control whether the actions on the notebook toolbar should render label or not.
  "notebook.globalToolbarShowLabel": "always",
  // When enabled, the Go to Symbol Quick Pick will display full code symbols from the notebook, as well as Markdown headers.
  "notebook.gotoSymbols.showAllSymbols": true,
  // Control whether to show inline values within notebook code cells after cell execution. Values will remain until the cell is edited, re-executed, or explicitly cleared via the Clear All Outputs toolbar button or the `Notebook: Clear Inline Values` command.
  //  - on: Always show inline values, with a regex fallback if no inline value provider is registered. Note: There may be a performance impact in larger cells if the fallback is used.
  //  - auto: Show inline values only when an inline value provider is registered.
  //  - off: Never show inline values.
  "notebook.inlineValues": "off",
  // When enabled, insert a final new line into the end of code cells when saving a notebook.
  "notebook.insertFinalNewline": false,
  // Control where the insert cell actions should appear.
  //  - betweenCells: A toolbar that appears on hover between cells.
  //  - notebookToolbar: The toolbar at the top of the notebook editor.
  //  - both: Both toolbars.
  //  - hidden: The insert actions don't appear anywhere.
  "notebook.insertToolbarLocation": "both",
  // Controls the display of line numbers in the cell editor.
  "notebook.lineNumbers": "off",
  // Controls the line height in pixels of markdown cells in notebooks. When set to `0`, `normal` will be used
  "notebook.markdown.lineHeight": 0,
  // Controls the font family of rendered markup in notebooks. When left blank, this will fall back to the default workbench font family.
  "notebook.markup.fontFamily": "",
  // Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
  "notebook.markup.fontSize": 0,
  // Experimental. Enables a limited set of multi cursor controls across multiple cells in the notebook editor. Currently supported are core editor actions (typing/cut/copy/paste/composition) and a limited subset of editor commands.
  "notebook.multiCursor.enabled": false,
  // When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
  "notebook.navigation.allowNavigateToSurroundingCells": true,
  // When enabled, notebook outline shows code cells.
  "notebook.outline.showCodeCells": false,
  // When enabled, notebook outline shows code cell symbols. Relies on `notebook.outline.showCodeCells` being enabled.
  "notebook.outline.showCodeCellSymbols": true,
  // When enabled, notebook outline will show only markdown cells containing a header.
  "notebook.outline.showMarkdownHeadersOnly": true,
  // The font family of the output text within notebook cells. When set to empty, the `editor.fontFamily` is used.
  "notebook.output.fontFamily": "",
  // Font size for the output text within notebook cells. When set to 0, `editor.fontSize` is used.
  "notebook.output.fontSize": 0,
  // Line height of the output text within notebook cells.
  //  - When set to 0, editor line height is used.
  //  - Values between 0 and 8 will be used as a multiplier with the font size.
  //  - Values greater than or equal to 8 will be used as effective values.
  "notebook.output.lineHeight": 0,
  // Control whether to disable filepath links in the output of notebook cells.
  "notebook.output.linkifyFilePaths": true,
  // Control whether to render error output in a minimal style.
  "notebook.output.minimalErrorRendering": false,
  // Initially render notebook outputs in a scrollable region when longer than the limit.
  "notebook.output.scrolling": false,
  // Controls how many lines of text are displayed in a text output. If `notebook.output.scrolling` is enabled, this setting is used to determine the scroll height of the output.
  "notebook.output.textLineLimit": 30,
  // Controls whether the lines in output should wrap.
  "notebook.output.wordWrap": false,
  // How far to scroll when revealing the next cell upon running notebook.cell.executeAndSelectBelow.
  //  - fullCell: Scroll to fully reveal the next cell.
  //  - firstLine: Scroll to reveal the first line of the next cell.
  //  - none: Do not scroll.
  "notebook.scrolling.revealNextCellOnExecute": "fullCell",
  // Whether the cell status bar should be shown.
  //  - hidden: The cell Status bar is always hidden.
  //  - visible: The cell Status bar is always visible.
  //  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
  "notebook.showCellStatusBar": "visible",
  // Controls when the Markdown header folding arrow is shown.
  //  - always: The folding controls are always visible.
  //  - never: Never show the folding controls and reduce the gutter size.
  //  - mouseover: The folding controls are visible only on mouseover.
  "notebook.showFoldingControls": "mouseover",
  // Experimental. Control whether to render notebook Sticky Scroll headers in the notebook editor.
  "notebook.stickyScroll.enabled": false,
  // Control whether nested sticky lines appear to stack flat or indented.
  //  - flat: Nested sticky lines appear flat.
  //  - indented: Nested sticky lines appear indented.
  "notebook.stickyScroll.mode": "indented",
  // Whether to use separate undo/redo stack for each cell.
  "notebook.undoRedoPerCell": true,
  // Enable the experimental notebook variables view within the debug panel.
  "notebook.variablesView": false,
  // Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.
  "interactiveWindow.alwaysScrollOnNewCell": true,
  // Controls whether code cells in the interactive window are collapsed by default.
  "interactiveWindow.collapseCellInputCode": "fromEditor",
  // Execute the Interactive Window (REPL) input box with shift+enter, so that enter can be used to create a newline.
  "interactiveWindow.executeWithShiftEnter": false,
  // Prompt to save the interactive window when it is closed. Only new interactive windows will be affected by this setting change.
  "interactiveWindow.promptToSaveOnClose": false,
  // Display a hint in the Interactive Window (REPL) input box to indicate how to execute code.
  "interactiveWindow.showExecutionHint": true,
  //
  //  - legacy: Uses the legacy diffing algorithm.
  //  - advanced: Uses the advanced diffing algorithm.
  "mergeEditor.diffAlgorithm": "advanced",
  // Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
  "mergeEditor.showDeletionMarkers": true,
  // Enable agent mode for Copilot Chat. When this is enabled, agent mode can be activated via the dropdown in the view.
  "chat.agent.enabled": true,
  // The maximum number of requests to allow Copilot to use per-turn in agent mode. When the limit is reached, Copilot will ask the user to confirm that it should continue.
  "chat.agent.maxRequests": 25,
  // Controls whether the command center shows a menu for actions to control Copilot (requires `window.commandCenter`).
  "chat.commandCenter.enabled": true,
  // Enables chat participant autodetection for panel chat.
  "chat.detectParticipant.enabled": true,
  // Delay after which changes made by chat are automatically accepted. Values are in seconds, `0` means disabled and `100` seconds is the maximum.
  "chat.editing.autoAcceptDelay": 0,
  // Whether to show a confirmation before removing a request and its associated edits.
  "chat.editing.confirmEditRequestRemoval": true,
  // Whether to show a confirmation before retrying a request and its associated edits.
  "chat.editing.confirmEditRequestRetry": true,
  // Controls the font family in chat codeblocks.
  "chat.editor.fontFamily": "default",
  // Controls the font size in pixels in chat codeblocks.
  "chat.editor.fontSize": 12,
  // Controls the font weight in chat codeblocks.
  "chat.editor.fontWeight": "default",
  // Controls the line height in pixels in chat codeblocks. Use 0 to compute the line height from the font size.
  "chat.editor.lineHeight": 0,
  // Controls whether lines should wrap in chat codeblocks.
  "chat.editor.wordWrap": "off",
  // Enables editing of requests in the chat. This allows you to change the request content and resubmit it to the model.
  "chat.editRequests": "hover",
  // Enable the new Edits mode that is based on tool-calling. When this is enabled, models that don't support tool-calling are unavailable for Edits mode.
  "chat.edits2.enabled": false,
  // This setting is deprecated. Please use `chat.detectParticipant.enabled` instead.
  // Enables chat participant autodetection for panel chat.
  "chat.experimental.detectParticipant.enabled": null,
  // Enable using tools contributed by third-party extensions.
  "chat.extensionTools.enabled": true,
  // Enables automatically using the active editor as chat context for specified chat locations.
  "chat.implicitContext.enabled": {
    "panel": "always"
  },
  // Specify location(s) of instructions files (`*.instructions.md`) that can be attached in Chat, Edits, and Inline Chat sessions. [Learn More](https://aka.ms/vscode-ghcp-custom-instructions).
  //
  // Relative paths are resolved from the root folder(s) of your workspace.
  "chat.instructionsFilesLocations": {
    ".github/instructions": true
  },
  // Configures discovery of Model Context Protocol servers on the machine. It may be set to `true` or `false` to disable or enable all sources, and an mapping sources you wish to enable.
  "chat.mcp.discovery.enabled": true,
  // Enables integration with Model Context Protocol servers to provide additional tools and functionality.
  "chat.mcp.enabled": true,
  // Configures which models are exposed to MCP servers for sampling (making model requests in the background). This setting can be edited in a graphical way under the `MCP: List Servers` command.
  "chat.mcp.serverSampling": {},
  // Specify location(s) of custom chat mode files (`*.chatmode.md`). [Learn More](https://aka.ms/vscode-ghcp-custom-chat-modes).
  //
  // Relative paths are resolved from the root folder(s) of your workspace.
  "chat.modeFilesLocations": {
    ".github/chatmodes": true
  },
  // Controls whether the Copilot window should notify the user when a confirmation is needed.
  "chat.notifyWindowOnConfirmation": true,
  // Enable reusable prompt (`*.prompt.md`) and instruction files in Chat, Edits, and Inline Chat sessions. [Learn More](.instructions.md).
  "chat.promptFiles": true,
  // Specify location(s) of reusable prompt files (`*.prompt.md`) that can be run in Chat, Edits, and Inline Chat sessions. [Learn More](https://aka.ms/vscode-ghcp-prompt-snippets).
  //
  // Relative paths are resolved from the root folder(s) of your workspace.
  "chat.promptFilesLocations": {
    ".github/prompts": true
  },
  // Controls whether related files should be rendered in the chat input.
  "chat.renderRelatedFiles": false,
  // Controls whether CSS of the selected element will be added to the chat. `chat.sendElementsToChat.enabled` must be enabled.
  "chat.sendElementsToChat.attachCSS": true,
  // Controls whether a screenshot of the selected element will be added to the chat. `chat.sendElementsToChat.enabled` must be enabled.
  "chat.sendElementsToChat.attachImages": true,
  // Controls whether elements can be sent to chat from the Simple Browser.
  "chat.sendElementsToChat.enabled": true,
  // Control variations of the sign-in dialog.
  "chat.setup.signInDialogVariant": "default",
  // Controls whether tool use should be automatically approved.
  //
  // Allows _all_ tools to run automatically without user confirmation, overriding any tool-specific settings such as terminal auto-approval.
  //
  // Use with caution: carefully review selected tools and be extra wary of possible sources of prompt injection!
  "chat.tools.autoApprove": false,
  // Controls whether the input of the chat should be restored when an undo request is made. The input will be filled with the text of the request that was restored.
  "chat.undoRequests.restoreInput": true,
  // Enables storing chat sessions on disk instead of in the storage service. Enabling this does a one-time per-workspace migration of existing sessions to the new format.
  "chat.useFileStorage": true,
  // Whether the inline chat also renders an accessible diff viewer for its changes.
  //  - auto: The accessible diff viewer is based on screen reader mode being enabled.
  //  - on: The accessible diff viewer is always enabled.
  //  - off: The accessible diff viewer is never enabled.
  "inlineChat.accessibleDiffView": "auto",
  // Whether to use the next version of inline chat.
  "inlineChat.enableV2": false,
  // Whether to finish an inline chat session when typing outside of changed regions.
  "inlineChat.finishOnType": false,
  // Whether to hide the inline chat widget after making a request. When enabled, the widget hides after a request has been made and instead the chat overlay shows. When hidden, the widget can always be shown again with the inline chat keybinding or from the chat overlay widget. *Note* that this setting requires `inlineChat.enableV2` to be enabled.
  "inlineChat.hideOnRequest": false,
  // Whether holding the inline chat keybinding will automatically enable speech recognition.
  "inlineChat.holdToSpeech": true,
  // Whether empty lines show a hint to generate code with inline chat.
  "inlineChat.lineEmptyHint": false,
  // Whether lines that are dominated by natural language or pseudo code show a hint to continue with inline chat. For instance, `class Person with name and hobbies` would show a hint to continue with chat.
  "inlineChat.lineNaturalLanguageHint": true,
  // Controls whether use of Electron's fetch implementation instead of Node.js' should be enabled. All local extensions will get Electron's fetch implementation for the global fetch API.
  "http.electronFetch": false,
  // Controls whether experimental loading of CA certificates from the OS should be enabled. This uses a more general approach than the default implementation. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  "http.experimental.systemCertificatesV2": false,
  // Controls whether Node.js' fetch implementation should be extended with additional support. Currently proxy support (`http.proxySupport#`) and system certificates (`#http.systemCertificates#`) are added when the corresponding settings are enabled. When during [remote development](https://aka.ms/vscode-remote) the `#http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  "http.fetchAdditionalSupport": true,
  // Specifies domain names for which proxy settings should be ignored for HTTP/HTTPS requests. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  "http.noProxy": [],
  // The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  "http.proxy": "",
  // The value to send as the `Proxy-Authorization` header for every network request. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  "http.proxyAuthorization": null,
  // Overrides the principal service name for Kerberos authentication with the HTTP proxy. A default based on the proxy hostname is used when this is not set. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  "http.proxyKerberosServicePrincipal": "",
  // Controls whether the proxy server certificate should be verified against the list of supplied CAs. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  "http.proxyStrictSSL": true,
  // Use the proxy support for extensions. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  //  - off: Disable proxy support for extensions.
  //  - on: Enable proxy support for extensions.
  //  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
  //  - override: Enable proxy support for extensions, override request options.
  "http.proxySupport": "override",
  // Controls whether CA certificates should be loaded from the OS. On Windows and macOS, a reload of the window is required after turning this off. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
  "http.systemCertificates": true,
  // Controls whether in the remote extension host the local proxy configuration should be used. This setting only applies as a remote setting during [remote development](https://aka.ms/vscode-remote).
  "http.useLocalProxyConfiguration": true,
  // Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
  "keyboard.dispatch": "code",
  // Enables the macOS touchbar buttons on the keyboard if available.
  "keyboard.touchbar.enabled": true,
  // A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).
  "keyboard.touchbar.ignored": [],
  // This setting is deprecated, please use 'update.mode' instead.
  // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
  "update.channel": "default",
  // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
  //  - none: Disable updates.
  //  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
  //  - start: Check for updates only on startup. Disable automatic background update checks.
  //  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
  "update.mode": "default",
  // Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
  "update.showReleaseNotes": true,
  // Controls whether to enable telemetry for detailed edit statistics (only sends statistics if general telemetry is enabled).
  "telemetry.editStats.details.enabled": false,
  // Controls whether to enable telemetry for edit statistics (only sends statistics if general telemetry is enabled).
  "telemetry.editStats.enabled": true,
  // Controls whether to show decorations for edit telemetry.
  "telemetry.editStats.showDecorations": false,
  // Controls whether to show the status bar for edit telemetry.
  "telemetry.editStats.showStatusBar": false,
  // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
  // Enable crash reports to be collected. This helps us improve stability.
  // This option requires restart to take effect.
  "telemetry.enableCrashReporter": true,
  // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
  // Enable diagnostic data to be collected. This helps us to better understand how Visual Studio Code is performing and where improvements need to be made. [Read more](https://go.microsoft.com/fwlink/?LinkId=521839) about what we collect and our privacy statement.
  "telemetry.enableTelemetry": true,
  // Enable feedback mechanisms such as the issue reporter, surveys, and feedback options in features like Copilot Chat.
  "telemetry.feedback.enabled": true,
  //
  // Controls Visual Studio Code telemetry, first-party extension telemetry, and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how Visual Studio Code is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry) and our [privacy statement](https://go.microsoft.com/fwlink/?LinkId=521839). A full restart of the application is necessary for crash reporting changes to take effect.
  //
  // &nbsp;
  //
  // The following table outlines the data sent with each setting:
  //
  // |       | Crash Reports | Error Telemetry | Usage Data |
  // |:------|:-------------:|:---------------:|:----------:|
  // | all   |       ✓       |        ✓        |     ✓      |
  // | error |       ✓       |        ✓        |     -      |
  // | crash |       ✓       |        -        |     -      |
  // | off   |       -       |        -        |     -      |
  //
  //
  // &nbsp;
  //
  // ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
  //
  //  - all: Sends usage data, errors, and crash reports.
  //  - error: Sends general error telemetry and crash reports.
  //  - crash: Sends OS level crash reports.
  //  - off: Disables all product telemetry.
  "telemetry.telemetryLevel": "all",
  // List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
  "settingsSync.ignoredExtensions": [],
  // Configure settings to be ignored while synchronizing.
  "settingsSync.ignoredSettings": [],
  // Synchronize keybindings for each platform.
  "settingsSync.keybindingsPerPlatform": true,
  // When enabled, slow renderers are automatically profiled.
  "application.experimental.rendererProfiling": false,
  // Controls the timeout in seconds before giving up resolving the shell environment when the application is not already launched from a terminal. See our [documentation](https://go.microsoft.com/fwlink/?linkid=2149667) for more information.
  "application.shellEnvironmentResolutionTimeout": 10,
  // If enabled, a dialog will ask for confirmation whenever a local file or workspace is about to open through a protocol handler.
  "security.promptForLocalFileProtocolHandling": true,
  // If enabled, a dialog will ask for confirmation whenever a remote file or workspace is about to open through a protocol handler.
  "security.promptForRemoteFileProtocolHandling": true,
  // Controls when the restricted mode banner is shown.
  //  - always: Show the banner every time an untrusted workspace is open.
  //  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
  //  - never: Do not show the banner when an untrusted workspace is open.
  "security.workspace.trust.banner": "untilDismissed",
  // Controls whether or not the empty window is trusted by default within VS Code. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of VS Code without prompting in an empty window.
  "security.workspace.trust.emptyWindow": true,
  // Controls whether or not Workspace Trust is enabled within VS Code.
  "security.workspace.trust.enabled": true,
  // Controls when the startup prompt to trust a workspace is shown.
  //  - always: Ask for trust every time an untrusted workspace is opened.
  //  - once: Ask for trust the first time an untrusted workspace is opened.
  //  - never: Do not ask for trust when an untrusted workspace is opened.
  "security.workspace.trust.startupPrompt": "once",
  // Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
  //  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
  //  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
  //  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
  "security.workspace.trust.untrustedFiles": "prompt",
  // Used to work around bugs in Reference Providers and Rename Providers.
  // Anything matching the provided Regular Expression will be removed from the text
  // before sending it to the Rename Provider.
  //
  // See: [Markdown: Fixing spelling issues in Header sections changes the entire line · Issue #1987](https://github.com/streetsidesoftware/vscode-spell-checker/issues/1987)
  //
  // It is unlikely that you would need to edit this setting. If you need to, please open an issue at
  // [Spell Checker Issues](https://github.com/streetsidesoftware/vscode-spell-checker/issues)
  //
  // This feature is used in connection with `cSpell.advanced.feature.useReferenceProviderWithRename`
  "cSpell.advanced.feature.useReferenceProviderRemove": "",
  // Use the Reference Provider when fixing spelling issues with the Rename Provider.
  // This feature is used in connection with `cSpell.fixSpellingWithRenameProvider`
  "cSpell.advanced.feature.useReferenceProviderWithRename": false,
  // Enable / Disable allowing word compounds.
  // - `true` means `arraylength` would be ok
  // - `false` means it would not pass.
  //
  // Note: this can also cause many misspelled words to seem correct.
  "cSpell.allowCompoundWords": false,
  // - Use `cSpell.enabledSchemes` instead.
  // Control which file schemes will be checked for spelling (VS Code must be restarted for this setting to take effect).
  //
  //
  // Some schemes have special meaning like:
  // - `untitled` - Used for new documents that have not yet been saved
  // - `vscode-notebook-cell` - Used for validating segments of a Notebook.
  // - `vscode-userdata` - Needed to spell check `.code-snippets`
  // - `vscode-scm` - Needed to spell check Source Control commit messages.
  // - `comment` - Used for new comment editors.
  "cSpell.allowedSchemas": [],
  // If a `cspell` configuration file is updated, format the configuration file
  // using the VS Code Format Document Provider. This will cause the configuration
  // file to be saved prior to being updated.
  "cSpell.autoFormatConfigFile": false,
  // The maximum average length of chunks of text without word breaks.
  //
  //
  // A chunk is the characters between absolute word breaks.
  // Absolute word breaks match: `/[\s,{}[\]]/`
  //
  //
  // **Error Message:** _Average word length is too long._
  //
  //
  // If you are seeing this message, it means that the file contains mostly long lines
  // without many word breaks.
  "cSpell.blockCheckingWhenAverageChunkSizeGreaterThan": 80,
  // The maximum line length.
  //
  //
  // Block spell checking if lines are longer than the value given.
  // This is used to prevent spell checking generated files.
  //
  //
  // **Error Message:** _Lines are too long._
  "cSpell.blockCheckingWhenLineLengthGreaterThan": 10000,
  // The maximum length of a chunk of text without word breaks.
  //
  //
  // It is used to prevent spell checking of generated files.
  //
  //
  // A chunk is the characters between absolute word breaks.
  // Absolute word breaks match: `/[\s,{}[\]]/`, i.e. spaces or braces.
  //
  //
  // **Error Message:** _Maximum word length exceeded._
  //
  //
  // If you are seeing this message, it means that the file contains a very long line
  // without many word breaks.
  "cSpell.blockCheckingWhenTextChunkSizeGreaterThan": 500,
  // Determines if words must match case and accent rules.
  //
  // - `false` - Case is ignored and accents can be missing on the entire word.
  //   Incorrect accents or partially missing accents will be marked as incorrect.
  //   Note: Some languages like Portuguese have case sensitivity turned on by default.
  //   You must use `cSpell.languageSettings` to turn it off.
  // - `true` - Case and accents are enforced by default.
  "cSpell.caseSensitive": false,
  // Set the maximum number of blocks of text to check.
  // Each block is 1024 characters.
  "cSpell.checkLimit": 500,
  // By default, the spell checker checks only enabled file types. Use `cSpell.enableFiletypes`
  // to turn on / off various file types.
  //
  // When this setting is `false`, all file types are checked except for the ones disabled by `cSpell.enabledFileTypes`.
  // See `cSpell.enableFiletypes` on how to disable a file type.
  "cSpell.checkOnlyEnabledFileTypes": true,
  // Spell check VS Code system files.
  // These include:
  // - `vscode-userdata:/**/settings.json`
  // - `vscode-userdata:/**/keybindings.json`
  "cSpell.checkVSCodeSystemFiles": false,
  // Define custom dictionaries to be included by default.
  // If `addWords` is `true` words will be added to this dictionary.
  //
  //
  // **Example:**
  //
  // ```js
  // "cSpell.customDictionaries": {
  //   "project-words": {
  //     "name": "project-words",
  //     "path": "${workspaceRoot}/project-words.txt",
  //     "description": "Words used in this project",
  //     "addWords": true
  //   },
  //   "custom": true, // Enable the `custom` dictionary
  //   "internal-terms": false // Disable the `internal-terms` dictionary
  // }
  // ```
  "cSpell.customDictionaries": {},
  // - Use `cSpell.customDictionaries` instead.
  // Define custom dictionaries to be included by default for the folder.
  // If `addWords` is `true` words will be added to this dictionary.
  "cSpell.customFolderDictionaries": [],
  // - Use `cSpell.customDictionaries` instead.
  // Define custom dictionaries to be included by default for the user.
  // If `addWords` is `true` words will be added to this dictionary.
  "cSpell.customUserDictionaries": [],
  // - Use `cSpell.customDictionaries` instead.
  // Define custom dictionaries to be included by default for the workspace.
  // If `addWords` is `true` words will be added to this dictionary.
  "cSpell.customWorkspaceDictionaries": [],
  // Decoration for dark themes.
  //
  // See:
  // - `cSpell.overviewRulerColor`
  // - `cSpell.textDecoration`
  "cSpell.dark": {},
  // The Diagnostic Severity Level determines how issues are shown in the Problems Pane and within the document.
  // Set the level to `Hint` to hide the issues from the Problems Pane.
  //
  // Note: `cSpell.useCustomDecorations` must be `false` to use VS Code Diagnostic Severity Levels.
  //
  // See: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)
  //  - Error: Report Spelling Issues as Errors
  //  - Warning: Report Spelling Issues as Warnings
  //  - Information: Report Spelling Issues as Information
  //  - Hint: Report Spelling Issues as Hints, will not show up in Problems
  "cSpell.diagnosticLevel": "Information",
  // Flagged word issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle.
  // By default, flagged words will use the same diagnostic level as general issues. Use this setting to customize them.
  //
  // See: [VS Code Diagnostic Severity Level](https://code.visualstudio.com/api/references/vscode-api#DiagnosticSeverity)
  //  - Error: Report Spelling Issues as Errors
  //  - Warning: Report Spelling Issues as Warnings
  //  - Information: Report Spelling Issues as Information
  //  - Hint: Report Spelling Issues as Hints, will not show up in Problems
  "cSpell.diagnosticLevelFlaggedWords": "",
  // Optional list of dictionaries to use.
  //
  // Each entry should match the name of the dictionary.
  //
  // To remove a dictionary from the list add `!` before the name.
  // i.e. `!typescript` will turn off the dictionary with the name `typescript`.
  //
  //
  // Example:
  //
  // ```jsonc
  // // Enable `lorem-ipsum` and disable `typescript`
  // "cSpell.dictionaries": ["lorem-ipsum", "!typescript"]
  // ```
  "cSpell.dictionaries": [],
  // Define custom dictionaries.
  // If `addWords` is `true` words will be added to this dictionary.
  //
  // This setting is subject to User/Workspace settings precedence rules: [Visual Studio Code User and Workspace Settings](https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence).
  //
  // It is better to use `cSpell.customDictionaries`
  //
  // **Example:**
  //
  // ```js
  // "cSpell.dictionaryDefinitions": [
  //   {
  //     "name": "project-words",
  //     "path": "${workspaceRoot}/project-words.txt",
  //     "description": "Words used in this project",
  //     "addWords": true
  //   }
  // ]
  // ```
  "cSpell.dictionaryDefinitions": [],
  // Use the VS Code Diagnostic Collection to render spelling issues.
  //
  // With some edit boxes, like the source control message box, the custom decorations do not show up.
  // This setting allows the use of the VS Code Diagnostic Collection to render spelling issues.
  "cSpell.doNotUseCustomDecorationForScheme": {
    "vscode-scm": true
  },
  // Enable / Disable the spell checker.
  "cSpell.enabled": true,
  // Enable / Disable checking file types (languageIds).
  //
  // This setting replaces: `cSpell.enabledLanguageIds#` and `#cSpell.enableFiletypes`.
  //
  // A Value of:
  // - `true` - enable checking for the file type
  // - `false` - disable checking for the file type
  //
  // A file type of `*` is a wildcard that enables all file types.
  //
  // **Example: enable all file types**
  //
  // | File Type | Enabled | Comment |
  // | --------- | ------- | ------- |
  // | `*`       | `true`  | Enable all file types. |
  // | `json`    | `false` | Disable checking for json files. |
  "cSpell.enabledFileTypes": {
    "*": true,
    "markdown": true
  },
  // - Use `cSpell.enabledFileTypes` instead.
  // Specify a list of file types to spell check. It is better to use `cSpell.enabledFileTypes` to Enable / Disable checking files types.
  "cSpell.enabledLanguageIds": [],
  // Control which notifications are displayed.
  "cSpell.enabledNotifications": {
    "Average Word Length too Long": true,
    "Lines too Long": true,
    "Maximum Word Length Exceeded": true
  },
  // Control which file schemes will be checked for spelling (VS Code must be restarted for this setting to take effect).
  //
  //
  // Some schemes have special meaning like:
  // - `untitled` - Used for new documents that have not yet been saved
  // - `vscode-notebook-cell` - Used for validating segments of a Notebook.
  // - `vscode-userdata` - Needed to spell check `.code-snippets`
  // - `vscode-scm` - Needed to spell check Source Control commit messages.
  // - `comment` - Used for new comment editors.
  "cSpell.enabledSchemes": {
    "comment": true,
    "file": true,
    "gist": true,
    "repo": true,
    "sftp": true,
    "untitled": true,
    "vscode-notebook-cell": true,
    "vscode-scm": true,
    "vscode-userdata": true,
    "vscode-vfs": true,
    "vsls": true
  },
  // - Use `cSpell.enabledFileTypes` instead.
  // Enable / Disable checking file types (languageIds).
  //
  // These are in additional to the file types specified by `cSpell.enabledLanguageIds`.
  // To disable a language, prefix with `!` as in `!json`,
  //
  //
  // **Example: individual file types**
  //
  // ```
  // jsonc       // enable checking for jsonc
  // !json       // disable checking for json
  // kotlin      // enable checking for kotlin
  // ```
  //
  // **Example: enable all file types**
  //
  // ```
  // *           // enable checking for all file types
  // !json       // except for json
  // ```
  "cSpell.enableFiletypes": [],
  // Show Regular Expression Explorer
  "cSpell.experimental.enableRegexpView": false,
  // Experiment with executeDocumentSymbolProvider.
  // This feature is experimental and will be removed in the future.
  "cSpell.experimental.symbols": false,
  // Glob patterns of files to be checked.
  // Glob patterns are relative to the `cSpell.globRoot` of the configuration file that defines them.
  "cSpell.files": [],
  // Use Rename Provider when fixing spelling issues.
  "cSpell.fixSpellingWithRenameProvider": true,
  // List of words to always be considered incorrect. Words found in `flagWords` override `words`.
  //
  // Format of `flagWords`
  // - single word entry - `word`
  // - with suggestions - `word:suggestion` or `word->suggestion, suggestions`
  //
  // Example:
  // ```ts
  // "flagWords": [
  //   "color: colour",
  //   "incase: in case, encase",
  //   "canot->cannot",
  //   "cancelled->canceled"
  // ]
  // ```
  "cSpell.flagWords": [],
  // The root to use for glob patterns found in this configuration.
  // Default: The current workspace folder.
  // Use `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file.
  // Defining globRoot, does not impact imported configurations.
  //
  // Special Values:
  //
  // - `${workspaceFolder}` - Default - globs will be relative to the current workspace folder
  // - `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.
  "cSpell.globRoot": "",
  // Hide the options to add words to dictionaries or settings.
  "cSpell.hideAddToDictionaryCodeActions": false,
  // Control how spelling issues are displayed while typing.
  // See: `cSpell.revealIssuesAfterDelayMS` to control when issues are revealed.
  //  - Off: Show issues while typing
  //  - Word: Hide issues while typing in the current word
  //  - Line: Hide issues while typing on the line
  //  - Document: Hide all issues while typing in the document
  "cSpell.hideIssuesWhileTyping": "Word",
  // Glob patterns of files to be ignored. The patterns are relative to the `cSpell.globRoot` of the configuration file that defines them.
  "cSpell.ignorePaths": [
    "package-lock.json",
    "node_modules",
    "vscode-extension",
    ".git/{info,lfs,logs,refs,objects}/**",
    ".git/{index,*refs,*HEAD}",
    ".vscode",
    ".vscode-insiders"
  ],
  // Ignore sequences of characters that look like random strings.
  "cSpell.ignoreRandomStrings": true,
  // List of regular expressions or Pattern names (defined in `cSpell.patterns`) to exclude from spell checking.
  //
  // - When using the VS Code Preferences UI, it is not necessary to escape the `\`, VS Code takes care of that.
  // - When editing the VS Code `settings.json` file,
  //   it is necessary to escape `\`.
  //   Each `\` becomes `\\`.
  //
  // The default regular expression flags are `gi`. Add `u` (`gui`), to enable Unicode.
  //
  // | VS Code UI          | settings.json         | Description                                  |
  // | :------------------ | :-------------------- | :------------------------------------------- |
  // | `/\\[a-z]+/gi`      | `/\\\\[a-z]+/gi`      | Exclude LaTeX command like `\mapsto`         |
  // | `/\b[A-Z]{3,5}\b/g` | `/\\b[A-Z]{3,5}\\b/g` | Exclude full-caps acronyms of 3-5 length.    |
  // | `CStyleComment`     | `CStyleComment`       | A built in pattern                           |
  "cSpell.ignoreRegExpList": [],
  // A list of words to be ignored by the spell checker.
  "cSpell.ignoreWords": [],
  // Allows this configuration to inherit configuration for one or more other files.
  //
  // See [Importing / Extending Configuration](https://cspell.org/configuration/imports/) for more details.
  "cSpell.import": [],
  // List of regular expression patterns or defined pattern names to match for spell checking.
  //
  // If this property is defined, only text matching the included patterns will be checked.
  "cSpell.includeRegExpList": [],
  // Current active spelling language.
  //
  // Example: `en-GB` for British English
  //
  // Example: `en,nl` to enable both English and Dutch
  "cSpell.language": "en",
  // Additional settings for individual programming languages and locales.
  "cSpell.languageSettings": [],
  // Decoration for light themes.
  //
  // See:
  // - `cSpell.overviewRulerColor`
  // - `cSpell.textDecoration`
  "cSpell.light": {},
  // Have the logs written to a file instead of to VS Code.
  "cSpell.logFile": "",
  // Set the Debug Level for logging messages.
  //  - None: Do not log
  //  - Error: Log only errors
  //  - Warning: Log errors and warnings
  //  - Information: Log errors, warnings, and info
  //  - Debug: Log everything (noisy)
  "cSpell.logLevel": "Error",
  // The maximum number of times the same word can be flagged as an error in a file.
  "cSpell.maxDuplicateProblems": 20,
  // Controls the maximum number of spelling errors per document.
  "cSpell.maxNumberOfProblems": 100,
  // Specify if fields from `.vscode/settings.json` are passed to the spell checker.
  // This only applies when there is a CSpell configuration file in the workspace.
  //
  // The purpose of this setting to help provide a consistent result compared to the
  // CSpell spell checker command line tool.
  //
  // Values:
  // - `true` - all settings will be merged based upon `cSpell.mergeCSpellSettingsFields`.
  // - `false` - only use `.vscode/settings.json` if a CSpell configuration is not found.
  //
  // Note: this setting is used in conjunction with `cSpell.mergeCSpellSettingsFields`.
  "cSpell.mergeCSpellSettings": true,
  // Specify which fields from `.vscode/settings.json` are passed to the spell checker.
  // This only applies when there is a CSpell configuration file in the workspace and
  // `cSpell.mergeCSpellSettings` is `true`.
  //
  // Values:
  // - `{ flagWords: true, userWords: false }` - Always allow `flagWords`, but never allow `userWords`.
  //
  // Example:
  // ```jsonc
  // "cSpell.mergeCSpellSettingsFields": { "userWords": false }
  // ```
  "cSpell.mergeCSpellSettingsFields": {
    "allowCompoundWords": true,
    "caseSensitive": true,
    "dictionaries": true,
    "dictionaryDefinitions": true,
    "enableGlobDot": true,
    "features": true,
    "files": true,
    "flagWords": true,
    "gitignoreRoot": true,
    "globRoot": true,
    "ignorePaths": true,
    "ignoreRegExpList": true,
    "ignoreWords": true,
    "import": true,
    "includeRegExpList": true,
    "language": true,
    "languageId": true,
    "languageSettings": true,
    "loadDefaultConfiguration": true,
    "minWordLength": true,
    "noConfigSearch": true,
    "noSuggestDictionaries": true,
    "numSuggestions": true,
    "overrides": true,
    "patterns": true,
    "pnpFiles": true,
    "reporters": true,
    "suggestWords": true,
    "useGitignore": true,
    "usePnP": true,
    "userWords": true,
    "validateDirectives": true,
    "words": true
  },
  // The minimum length of a random string to be ignored.
  "cSpell.minRandomLength": 40,
  // The minimum length of a word before checking it against a dictionary.
  "cSpell.minWordLength": 4,
  // Prevents searching for local configuration when checking individual documents.
  "cSpell.noConfigSearch": false,
  // Optional list of dictionaries that will not be used for suggestions.
  // Words in these dictionaries are considered correct, but will not be
  // used when making spell correction suggestions.
  //
  // Note: if a word is suggested by another dictionary, but found in
  // one of these dictionaries, it will be removed from the set of
  // possible suggestions.
  "cSpell.noSuggestDictionaries": [],
  // Controls the number of suggestions shown.
  "cSpell.numSuggestions": 8,
  // Overrides are used to apply settings for specific files in your project.
  //
  // **Example:**
  //
  // ```jsonc
  // "cSpell.overrides": [
  //   // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:
  //   {
  //     "filename": "**/{*.hrr,*.crr}",
  //     "languageId": "cpp"
  //   },
  //   // Force `dutch/**/*.txt` to be treated as Dutch (dictionary needs to be installed separately):
  //   {
  //     "filename": "**/dutch/**/*.txt",
  //     "language": "nl"
  //   }
  // ]
  // ```
  "cSpell.overrides": [],
  // The CSS color used to show issues in the ruler.
  //
  // Depends upon `cSpell.useCustomDecorations`.
  //
  // See:
  // - [`<color>` CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)
  // - [CSS Colors, W3C Schools](https://www.w3schools.com/cssref/css_colors.php)
  // - Hex colors
  // - Use "" (empty string) to disable.
  //
  // Examples:
  // - `green`
  // - `DarkYellow`
  // - `#ffff0080` - semi-transparent yellow.
  // - `rgb(255 153 0 / 80%)`
  "cSpell.overviewRulerColor": "#348feb80",
  // Defines a list of patterns that can be used with the `cSpell.ignoreRegExpList` and
  // `cSpell.includeRegExpList` options.
  //
  // **Example:**
  //
  // ```jsonc
  // "cSpell.patterns": [
  //   {
  //     "name": "comment-single-line",
  //     "pattern": "/#.*/g"
  //   },
  //   {
  //     "name": "comment-multi-line",
  //     "pattern": "/(?:\\/\\*[\\s\\S]*?\\*\\/)/g"
  //   }
  // ]
  // ```
  "cSpell.patterns": [],
  // By default, the spell checker reports all unknown words as misspelled. This setting allows for a more relaxed spell checking, by only
  // reporting unknown words as suggestions. Common spelling errors are still flagged as misspelled.
  //
  // - `true` - report unknown words as misspelled
  // - `false` - report unknown words as suggestions
  "cSpell.reportUnknownWords": true,
  // Reveal hidden issues related to `cSpell.hideIssuesWhileTyping` after a delay in milliseconds.
  "cSpell.revealIssuesAfterDelayMS": 1500,
  // Show CSpell in-document directives as you type.
  //
  // **Note:** VS Code must be restarted for this setting to take effect.
  "cSpell.showAutocompleteDirectiveSuggestions": true,
  // Show Spell Checker actions in Editor Context Menu
  "cSpell.showCommandsInEditorContextMenu": true,
  // Show spelling issues in the editor ruler.
  //
  // Note: This setting is only used when `cSpell.useCustomDecorations` is `true`.
  "cSpell.showInRuler": true,
  // No longer used.
  // Display the spell checker status on the status bar.
  "cSpell.showStatus": true,
  // No longer supported.
  // The side of the status bar to display the spell checker status.
  //  - Left: Left Side of Statusbar
  //  - Right: Right Side of Statusbar
  "cSpell.showStatusAlignment": "Right",
  // Show Spelling Suggestions link in the top level context menu.
  "cSpell.showSuggestionsLinkInEditorContextMenu": true,
  // Delay in ms after a document has changed before checking it for spelling errors.
  "cSpell.spellCheckDelayMs": 50,
  // Only spell check files that are in the currently open workspace.
  // This same effect can be achieved using the `cSpell.files` setting.
  //
  //
  // ```js
  // "cSpell.files": ["/**"]
  // ```
  "cSpell.spellCheckOnlyWorkspaceFiles": false,
  // The type of menu used to display spelling suggestions.
  //  - quickPick: Suggestions will appear as a drop down at the top of the IDE. (Best choice for Vim Key Bindings)
  //  - quickFix: Suggestions will appear inline near the word, inside the text editor.
  "cSpell.suggestionMenuType": "quickPick",
  // The maximum number of changes allowed on a word to be considered a suggestions.
  //
  // For example, appending an `s` onto `example` -> `examples` is considered 1 change.
  //
  // Range: between 1 and 5.
  "cSpell.suggestionNumChanges": 3,
  // The maximum amount of time in milliseconds to generate suggestions for a word.
  "cSpell.suggestionsTimeout": 400,
  // A list of suggested replacements for words.
  // Suggested words provide a way to make preferred suggestions on word replacements.
  // To hint at a preferred change, but not to require it.
  //
  // Format of `suggestWords`
  // - Single suggestion (possible auto fix)
  //     - `word: suggestion`
  //     - `word->suggestion`
  // - Multiple suggestions (not auto fixable)
  //    - `word: first, second, third`
  //    - `word->first, second, third`
  "cSpell.suggestWords": [],
  // The CSS Style used to decorate spelling issues. Depends upon `cSpell.useCustomDecorations`.
  //
  // This setting is used to manually configure the text decoration. If it is not set, the following settings are used:
  // - `cSpell.textDecorationLine` to pick the line type
  // - `cSpell.textDecorationStyle` to pick the style
  // - `cSpell.textDecorationColor` to set the color
  // - `cSpell.textDecorationThickness` to set the thickness.
  //
  // See: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
  //
  // Format:  `<line> [style] <color> [thickness]`
  //
  // - line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)
  // - style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)
  // - color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)
  // - thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)
  //
  // Examples:
  // - `underline green`
  // - `underline dotted yellow 0.2rem`
  // - `underline wavy #ff0c 1.5px` - Wavy underline with 1.5px thickness in semi-transparent yellow.
  //
  // To change the ruler color, use `cSpell.overviewRulerColor`.
  "cSpell.textDecoration": "",
  // The decoration color for normal spelling issues.
  //
  // See: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
  // - color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)
  //
  // To change the ruler color, use `cSpell.overviewRulerColor`.
  //
  // Examples:
  // - `green`
  // - `yellow`
  // - `#ff0c`
  "cSpell.textDecorationColor": "#348feb",
  // The decoration color for flagged issues.
  //
  // See: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
  // - color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)
  //
  // Examples:
  // - `green`
  // - `yellow`
  // - `#ff0c`
  "cSpell.textDecorationColorFlagged": "#f44",
  // The decoration color for spelling suggestions.
  //
  // See: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
  // - color - see: [text-decoration-color, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color)
  //
  // Common Format: `#RGBA` or `#RRGGBBAA` or `#RGB` or `#RRGGBB`
  //
  // Examples:
  // - `green`
  // - `yellow`
  // - `#ff0c`
  "cSpell.textDecorationColorSuggestion": "#8884",
  // The CSS line type used to decorate issues.
  //
  // See: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
  // - line - `underline`, `overline`, see: [text-decoration-line, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line)
  "cSpell.textDecorationLine": "underline",
  // The CSS line style used to decorate issues.
  //
  // See: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
  // - style - `solid`, `wavy`, `dotted`, see: [text-decoration-style, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style)
  "cSpell.textDecorationStyle": "dashed",
  // The CSS line thickness used to decorate issues.
  //
  // See: [text-decoration - CSS: Cascading Style Sheets, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
  // - thickness - see: [text-decoration-thickness, MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness)
  //
  // Examples:
  // - `auto`
  // - `from-font`
  // - `0.2rem`
  // - `1.5px`
  // - `10%`
  "cSpell.textDecorationThickness": "auto",
  // Enable loading JavaScript CSpell configuration files.
  //
  // This setting is automatically set to `true` in a trusted workspace. It is possible to override the setting to `false` in a trusted workspace,
  // but a setting of `true` in an untrusted workspace will be ignored.
  //
  // See:
  // - [Visual Studio Code Workspace Trust security](https://code.visualstudio.com/docs/editor/workspace-trust)
  // - [Workspace Trust Extension Guide -- Visual Studio Code Extension API](https://code.visualstudio.com/api/extension-guides/workspace-trust)
  "cSpell.trustedWorkspace": true,
  // Draw custom decorations on Spelling Issues.
  // - `true` - Use custom decorations. - VS Code Diagnostic Severity Levels are not used.
  // - `false` - Use the VS Code Diagnostic Collection to render spelling issues.
  //
  // Note: This setting overrides the VS Code Diagnostics setting: `cSpell.diagnosticLevel`.
  "cSpell.useCustomDecorations": false,
  // Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.
  "cSpell.useGitignore": true,
  // Search for `@cspell/cspell-bundled-dicts` in the workspace folder and use it if found.
  "cSpell.useLocallyInstalledCSpellDictionaries": true,
  // Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading
  // packages stored in the repository.
  //
  // When true, the spell checker will search up the directory structure for the existence
  // of a PnP file and load it.
  "cSpell.usePnP": false,
  // Words to add to global dictionary -- should only be in the user config file.
  "cSpell.userWords": [],
  // Verify that the in-document directives are correct.
  "cSpell.validateDirectives": false,
  // List of words to be considered correct.
  "cSpell.words": [],
  // Define the path to the workspace root folder in a multi-root workspace.
  // By default it is the first folder.
  //
  // This is used to find the `cspell.json` file for the workspace.
  //
  //
  // **Example: use the `client` folder**
  // ```
  // ${workspaceFolder:client}
  // ```
  "cSpell.workspaceRootPath": "",
  // When to validate class selectors.
  "css.autoValidation": "Never",
  // Insert semicolon at end of line when completing CSS properties.
  "css.completion.completePropertyWithSemicolon": true,
  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "css.completion.triggerPropertyValueCompletion": true,
  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
  //
  // VS Code loads custom data on startup to enhance its CSS support for CSS custom properties (variables), at-rules, pseudo-classes, and pseudo-elements you specify in the JSON files.
  //
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "css.customData": [],
  // List of languages which suggestions are desired.
  "css.enabledLanguages": [
    "html"
  ],
  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "css.format.braceStyle": "collapse",
  // Enable/disable default CSS formatter.
  "css.format.enable": true,
  // Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
  "css.format.maxPreserveNewLines": null,
  // Separate rulesets by a blank line.
  "css.format.newlineBetweenRules": true,
  // Separate selectors with a new line.
  "css.format.newlineBetweenSelectors": true,
  // Whether existing line breaks before rules and declarations should be preserved.
  "css.format.preserveNewLines": true,
  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "css.format.spaceAroundSelectorSeparator": false,
  // Show property and value documentation in CSS hovers.
  "css.hover.documentation": true,
  // Show references to MDN in CSS hovers.
  "css.hover.references": true,
  // Invalid number of parameters.
  "css.lint.argumentsInColorFunction": "error",
  // Do not use `width` or `height` when using `padding` or `border`.
  "css.lint.boxModel": "ignore",
  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "css.lint.compatibleVendorPrefixes": "ignore",
  // Do not use duplicate style definitions.
  "css.lint.duplicateProperties": "ignore",
  // Do not use empty rulesets.
  "css.lint.emptyRules": "warning",
  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "css.lint.float": "ignore",
  // `@font-face` rule must define `src` and `font-family` properties.
  "css.lint.fontFaceProperties": "warning",
  // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
  "css.lint.hexColorLength": "error",
  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "css.lint.idSelector": "ignore",
  // IE hacks are only necessary when supporting IE7 and older.
  "css.lint.ieHack": "ignore",
  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "css.lint.important": "ignore",
  // Import statements do not load in parallel.
  "css.lint.importStatement": "ignore",
  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "css.lint.propertyIgnoredDueToDisplay": "warning",
  // The universal selector (`*`) is known to be slow.
  "css.lint.universalSelector": "ignore",
  // Unknown at-rule.
  "css.lint.unknownAtRules": "warning",
  // Unknown property.
  "css.lint.unknownProperties": "warning",
  // Unknown vendor specific property.
  "css.lint.unknownVendorSpecificProperties": "ignore",
  // A list of properties that are not validated against the `unknownProperties` rule.
  "css.lint.validProperties": [],
  // When using a vendor-specific prefix, also include the standard property.
  "css.lint.vendorPrefix": "warning",
  // No unit for zero needed.
  "css.lint.zeroUnits": "ignore",
  // List of local or remote style sheets for suggestions.
  "css.styleSheets": [],
  // Traces the communication between VS Code and the CSS language server.
  "css.trace.server": "off",
  // Enables or disables all validations.
  "css.validate": true,
  // Transform classnames in autocomplete suggestions.
  "cssModules.camelCase": false,
  // Path alias for import module.
  "cssModules.pathAlias": {},
  // Controls the enablement.
  "cssPeek.enable": true,
  // A list of vscode language names where the extension should be used.
  "cssPeek.peekFromLanguages": [
    "html",
    "django-html",
    "laravel-blade",
    "razor",
    "vue",
    "blade",
    "pug",
    "jade",
    "handlebars",
    "php",
    "twig",
    "md",
    "nunjucks",
    "javascript",
    "javascriptreact",
    "erb",
    "typescript",
    "typescriptreact",
    "HTML (Eex)",
    "html-eex",
    "ejs",
    "hbs",
    "svelte"
  ],
  // A list of file globs that filters out peekable files
  "cssPeek.peekToExclude": [
    "**/node_modules/**",
    "**/bower_components/**"
  ],
  // Enable Peeking from HTML tags in addition to classnames and IDs. React components are ignored, but it's a good idea to disable this feature when using Angular
  "cssPeek.supportTags": true,
  // Traces the communication between VSCode and the language server.
  "cssPeek.trace.server": "off",
  // When debugging only step through user-written code. Disable this to allow stepping into library code.
  "debugpy.debugJustMyCode": true,
  // Whether to display inline values in the editor while debugging.
  "debugpy.showPythonInlineValues": false,
  // Automatically generates an .editorconfig file according to your current editor settings.
  "editorconfig.generateAuto": true,
  // Show the 'Generate .editorconfig' entry in the context menu of the Explorer view.
  "editorconfig.showMenuEntry": true,
  // If generateAuto is false, this template path will be used for each newly-generated .editorconfig file.
  "editorconfig.template": "default",
  // An array of languages where Emmet abbreviations should not be expanded.
  "emmet.excludeLanguages": [
    "markdown"
  ],
  // An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
  // In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
  // See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
  "emmet.extensionsPath": [],
  // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
  //  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
  "emmet.includeLanguages": {},
  // When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
  "emmet.optimizeStylesheetParsing": true,
  // Preferences used to modify behavior of some actions and resolvers of Emmet.
  "emmet.preferences": {},
  // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
  "emmet.showAbbreviationSuggestions": true,
  // Shows expanded Emmet abbreviations as suggestions.
  // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
  // The option `"always"` applies to all parts of the file regardless of markup/css.
  "emmet.showExpandedAbbreviation": "always",
  // If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
  "emmet.showSuggestionsAsSnippets": false,
  // Define profile for specified syntax or use your own profile with specific rules.
  "emmet.syntaxProfiles": {},
  // When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.
  "emmet.triggerExpansionOnTab": false,
  // If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
  "emmet.useInlineCompletions": false,
  // Variables to be used in Emmet snippets.
  "emmet.variables": {},
  // The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
  // Turns auto fix on save on or off.
  "eslint.autoFixOnSave": false,
  // Show disable lint rule in the quick fix menu.
  "eslint.codeAction.disableRuleComment": {
    "commentStyle": "line",
    "enable": true,
    "location": "separateLine"
  },
  // Show open lint rule documentation web page in the quick fix menu.
  "eslint.codeAction.showDocumentation": {
    "enable": true
  },
  // Specifies the code action mode. Possible values are 'all' and 'problems'.
  //  - all: Fixes all possible problems in the file. This option might take some time.
  //  - problems: Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster.
  "eslint.codeActionsOnSave.mode": "all",
  // The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
  "eslint.codeActionsOnSave.rules": null,
  // Enables ESLint debug mode (same as `--debug` on the command line)
  "eslint.debug": false,
  // Controls whether eslint is enabled or not.
  "eslint.enable": true,
  // Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
  "eslint.execArgv": null,
  // Use ESLint version 8.57 or later and `eslint.useFlatConfig` instead.
  // Enables support of experimental Flat Config (aka eslint.config.js). Requires ESLint version >= 8.21 < 8.57.0).
  "eslint.experimental.useFlatConfig": false,
  // Enables ESLint as a formatter.
  "eslint.format.enable": false,
  // If true, untitled files won't be validated by ESLint.
  "eslint.ignoreUntitled": false,
  // Controls whether a task for linting the whole workspace will be available.
  "eslint.lintTask.enable": false,
  // Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
  "eslint.lintTask.options": ".",
  // Whether ESlint should migrate auto fix on save settings.
  "eslint.migration.2_x": "on",
  // The value of `NODE_ENV` to use when running eslint tasks.
  "eslint.nodeEnv": null,
  // A path added to `NODE_PATH` when resolving the eslint module.
  "eslint.nodePath": null,
  // A special rules customization section for text cells in notebook documents.
  "eslint.notebooks.rules.customizations": [],
  // Whether ESLint should issue a warning on ignored files.
  "eslint.onIgnoredFiles": "off",
  // The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
  "eslint.options": {},
  // The setting is deprecated. The Package Manager is automatically detected now.
  // The package manager you use to install node modules.
  "eslint.packageManager": "npm",
  // An array of language ids for which the extension should probe if support is installed.
  "eslint.probe": [
    "astro",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "mdx",
    "vue",
    "markdown",
    "json",
    "jsonc"
  ],
  // Shortens the text spans of underlined problems to their first related line.
  "eslint.problems.shortenToSingleLine": false,
  // This option is deprecated. Use eslint.lintTask.enable instead.
  // Controls whether a task for linting the whole workspace will be available.
  "eslint.provideLintTask": false,
  // Turns on quiet mode, which ignores warnings.
  "eslint.quiet": false,
  // Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
  "eslint.rules.customizations": [],
  // Run the linter on save (onSave) or on type (onType)
  "eslint.run": "onType",
  // The location of the node binary to run ESLint under.
  "eslint.runtime": null,
  // The time budget in milliseconds to spend on computing fixes before showing a warning or error.
  "eslint.timeBudget.onFixes": {
    "error": 6000,
    "warn": 3000
  },
  // The time budget in milliseconds to spend on validation before showing a warning or error.
  "eslint.timeBudget.onValidation": {
    "error": 8000,
    "warn": 4000
  },
  // Traces the communication between VSCode and the eslint linter service.
  "eslint.trace.server": "off",
  // Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
  "eslint.useESLintClass": false,
  // Controls whether flat config should be used or not. This setting requires ESLint version 8.57 or later and is interpreted according to the [ESLint Flat Config rollout plan](https://eslint.org/blog/2023/10/flat-config-rollout-plans/).
  "eslint.useFlatConfig": null,
  // An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
  "eslint.validate": [],
  // Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
  "eslint.workingDirectories": [],
  // Options, normally found in the launch.json, to pass when debugging the extension. See [the docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-attributes) for a complete list of options.
  "extension-test-runner.debugOptions": {},
  // Configures how tests get extracted. You can configure:
  //
  // - The `extractWith` mode, that specifies if tests are extracted via evaluation or syntax-tree parsing.
  // - The `test` and `suite` identifiers the process extracts.
  "extension-test-runner.extractSettings": {
    "extractWith": "evaluation",
    "suite": [
      "describe",
      "suite"
    ],
    "test": [
      "it",
      "test"
    ]
  },
  // A wrapper script that runs tests. When running tests outside of debug mode, arguments will be passed to this script, and it should spawn the first argument as a child process.
  //
  // A common use case for this is to set it to `xvfb-run` for use in remotes which lack a display.
  "extension-test-runner.wrapper": null,
  // Path to the `fish` command
  "fish.path.fish": "fish",
  // Path to the `fish_indent` command
  "fish.path.fish_indent": "fish_indent",
  // Controls whether force push (with or without lease) is enabled.
  "git.allowForcePush": false,
  // Controls whether commits without running pre-commit and commit-msg hooks are allowed.
  "git.allowNoVerifyCommit": false,
  // Always show the Staged Changes resource group.
  "git.alwaysShowStagedChangesResourceGroup": false,
  // Controls the signoff flag for all commits.
  "git.alwaysSignOff": false,
  // When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
  "git.autofetch": false,
  // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
  "git.autofetchPeriod": 180,
  // Whether auto refreshing is enabled.
  "git.autorefresh": true,
  // Configures when repositories should be automatically detected.
  //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
  //  - false: Disable automatic repository scanning.
  //  - subFolders: Scan for subfolders of the currently opened folder.
  //  - openEditors: Scan for parent folders of open files.
  "git.autoRepositoryDetection": true,
  // Stash any changes before pulling and restore them after successful pull.
  "git.autoStash": false,
  // Controls whether to show blame information in the editor using editor decorations.
  "git.blame.editorDecoration.enabled": false,
  // Template for the blame information editor decoration. Supported variables:
  //
  // * `hash`: Commit hash
  //
  // * `hashShort`: First N characters of the commit hash according to `git.commitShortHashLength`
  //
  // * `subject`: First line of the commit message
  //
  // * `authorName`: Author name
  //
  // * `authorEmail`: Author email
  //
  // * `authorDate`: Author date
  //
  // * `authorDateAgo`: Time difference between now and the author date
  //
  //
  "git.blame.editorDecoration.template": "${subject}, ${authorName} (${authorDateAgo})",
  // Controls whether to show blame information in the status bar.
  "git.blame.statusBarItem.enabled": true,
  // Template for the blame information status bar item. Supported variables:
  //
  // * `hash`: Commit hash
  //
  // * `hashShort`: First N characters of the commit hash according to `git.commitShortHashLength`
  //
  // * `subject`: First line of the commit message
  //
  // * `authorName`: Author name
  //
  // * `authorEmail`: Author email
  //
  // * `authorDate`: Author date
  //
  // * `authorDateAgo`: Time difference between now and the author date
  //
  //
  "git.blame.statusBarItem.template": "${authorName} (${authorDateAgo})",
  // Prefix used when creating a new branch.
  "git.branchPrefix": "",
  // List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
  "git.branchProtection": [],
  // Controls whether a prompt is being shown before changes are committed to a protected branch.
  //  - alwaysCommit: Always commit changes to the protected branch.
  //  - alwaysCommitToNewBranch: Always commit changes to a new branch.
  //  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
  "git.branchProtectionPrompt": "alwaysPrompt",
  // List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
  //  - adjectives: A random adjective
  //  - animals: A random animal name
  //  - colors: A random color name
  //  - numbers: A random number between 100 and 999
  "git.branchRandomName.dictionary": [
    "adjectives",
    "animals"
  ],
  // Controls whether a random name is generated when creating a new branch.
  "git.branchRandomName.enable": false,
  // Controls the sort order for branches.
  "git.branchSortOrder": "committerdate",
  // A regular expression to validate new branch names.
  "git.branchValidationRegex": "",
  // The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
  "git.branchWhitespaceChar": "-",
  // Controls what type of Git refs are listed when running `Checkout to...`.
  //  - local: Local branches
  //  - tags: Tags
  //  - remote: Remote branches
  "git.checkoutType": [
    "local",
    "remote",
    "tags"
  ],
  // Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
  "git.closeDiffOnOperation": false,
  // List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
  "git.commandsToLog": [],
  // Controls the length of the commit short hash.
  "git.commitShortHashLength": 7,
  // Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
  "git.confirmEmptyCommits": true,
  // Controls whether to ask for confirmation before force-pushing.
  "git.confirmForcePush": true,
  // Controls whether to ask for confirmation before committing without verification.
  "git.confirmNoVerifyCommit": true,
  // Confirm before synchronizing Git repositories.
  "git.confirmSync": true,
  // Controls the Git count badge.
  //  - all: Count all changes.
  //  - tracked: Count only tracked changes.
  //  - off: Turn off counter.
  "git.countBadge": "all",
  // Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
  "git.decorations.enabled": true,
  // The name of the default branch (example: main, trunk, development) when initializing a new Git repository. When set to empty, the default branch name configured in Git will be used. **Note:** Requires Git version `2.28.0` or later.
  "git.defaultBranchName": "main",
  // The default location to clone a Git repository.
  "git.defaultCloneDirectory": null,
  // Controls whether to automatically detect Git submodules.
  "git.detectSubmodules": true,
  // Controls the limit of Git submodules detected.
  "git.detectSubmodulesLimit": 10,
  // Controls whether to check for unresolved diagnostics before committing.
  "git.diagnosticsCommitHook.enabled": false,
  // Controls the list of sources (**Item**) and the minimum severity (**Value**) to be considered before committing. **Note:** To ignore diagnostics from a particular source, add the source to the list and set the minimum severity to `none`.
  "git.diagnosticsCommitHook.sources": {
    "*": "error"
  },
  // Controls whether discarding untracked changes moves the file(s) to the Recycle Bin (Windows), Trash (macOS, Linux) instead of deleting them permanently. **Note:** This setting has no effect when connected to a remote or when running in Linux as a snap package.
  "git.discardUntrackedChangesToTrash": true,
  // Enables commit signing with GPG, X.509, or SSH.
  "git.enableCommitSigning": false,
  // Whether Git is enabled.
  "git.enabled": true,
  // Commit all changes when there are no staged changes.
  "git.enableSmartCommit": false,
  // Controls whether the Git Sync command appears in the status bar.
  "git.enableStatusBarSync": true,
  // When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
  "git.fetchOnPull": false,
  // Push all annotated tags when running the sync command.
  "git.followTagsWhenSync": false,
  // This setting is now deprecated, please use `github.gitAuthentication` instead.
  //
  "git.githubAuthentication": null,
  // List of Git repositories to ignore.
  "git.ignoredRepositories": [],
  // Ignores the legacy Git warning.
  "git.ignoreLegacyWarning": false,
  // Ignores the warning when there are too many changes in a repository.
  "git.ignoreLimitWarning": false,
  // Ignores the warning when Git is missing.
  "git.ignoreMissingGitWarning": false,
  // Ignores the warning when it looks like the branch might have been rebased when pulling.
  "git.ignoreRebaseWarning": false,
  // Ignore modifications to submodules in the file tree.
  "git.ignoreSubmodules": false,
  // Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
  "git.ignoreWindowsGit27Warning": false,
  // Controls whether to show commit message input validation diagnostics.
  "git.inputValidation": false,
  // Controls the commit message length threshold for showing a warning.
  "git.inputValidationLength": 72,
  // Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `git.inputValidationLength`.
  "git.inputValidationSubjectLength": 50,
  // Open the merge editor for files that are currently under conflict.
  "git.mergeEditor": false,
  // Controls whether to open a repository automatically after cloning.
  //  - always: Always open in current window.
  //  - alwaysNewWindow: Always open in a new window.
  //  - whenNoFolderOpen: Only open in current window when no folder is opened.
  //  - prompt: Always prompt for action.
  "git.openAfterClone": "prompt",
  // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
  "git.openDiffOnClick": true,
  // Control whether a repository in parent folders of workspaces or open files should be opened.
  //  - always: Always open a repository in parent folders of workspaces or open files.
  //  - never: Never open a repository in parent folders of workspaces or open files.
  //  - prompt: Prompt before opening a repository the parent folders of workspaces or open files.
  "git.openRepositoryInParentFolders": "prompt",
  // Controls whether to optimistically update the state of the Source Control view after running git commands.
  "git.optimisticUpdate": true,
  // Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
  "git.path": null,
  // Run a git command after a successful commit.
  //  - none: Don't run any command after a commit.
  //  - push: Run 'git push' after a successful commit.
  //  - sync: Run 'git pull' and 'git push' after a successful commit.
  "git.postCommitCommand": "none",
  // Controls whether Git should check for unsaved files before committing.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeCommit": "always",
  // Controls whether Git should check for unsaved files before stashing changes.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeStash": "always",
  // Prune when fetching.
  "git.pruneOnFetch": false,
  // Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.
  "git.pullBeforeCheckout": false,
  // Fetch all tags when pulling.
  "git.pullTags": true,
  // Force Git to use rebase when running the sync command.
  "git.rebaseWhenSync": false,
  // Remember the last git command that ran after a commit.
  "git.rememberPostCommitCommand": false,
  // Automatically replace the local tags with the remote tags in case of a conflict when running the pull command.
  "git.replaceTagsWhenPull": false,
  // List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
  "git.repositoryScanIgnoredFolders": [
    "node_modules"
  ],
  // Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
  "git.repositoryScanMaxDepth": 1,
  // Controls whether to require explicit Git user configuration or allow Git to guess if missing.
  "git.requireGitUserConfig": true,
  // List of paths to search for Git repositories in.
  "git.scanRepositories": [],
  // Controls whether an action button is shown in the Source Control view.
  "git.showActionButton": {
    "commit": true,
    "publish": true,
    "sync": true
  },
  // Controls whether to show the commit input in the Git source control panel.
  "git.showCommitInput": true,
  // Controls whether to show an inline Open File action in the Git changes view.
  "git.showInlineOpenFileAction": true,
  // Controls whether Git actions should show progress.
  "git.showProgress": true,
  // Controls whether to show a notification when a push is successful.
  "git.showPushSuccessNotification": false,
  // Controls whether to show the details of the last commit for Git refs in the checkout, branch, and tag pickers.
  "git.showReferenceDetails": true,
  // Controls the threshold of the similarity index (the amount of additions/deletions compared to the file's size) for changes in a pair of added/deleted files to be considered a rename. **Note:** Requires Git version `2.18.0` or later.
  "git.similarityThreshold": 50,
  // Control which changes are automatically staged by Smart Commit.
  //  - all: Automatically stage all changes.
  //  - tracked: Automatically stage tracked changes only.
  "git.smartCommitChanges": "all",
  // Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
  "git.statusLimit": 10000,
  // Suggests to enable smart commit (commit all changes when there are no staged changes).
  "git.suggestSmartCommit": true,
  // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
  "git.supportCancellation": false,
  // Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.
  "git.terminalAuthentication": true,
  // Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.
  "git.terminalGitEditor": false,
  // Controls which date to use for items in the Timeline view.
  //  - committed: Use the committed date
  //  - authored: Use the authored date
  "git.timeline.date": "committed",
  // Controls whether to show the commit author in the Timeline view.
  "git.timeline.showAuthor": true,
  // Controls whether to show uncommitted changes in the Timeline view.
  "git.timeline.showUncommitted": false,
  // Controls how untracked changes behave.
  //  - mixed: All changes, tracked and untracked, appear together and behave equally.
  //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
  //  - hidden: Untracked changes are hidden and excluded from several actions.
  "git.untrackedChanges": "mixed",
  // Controls whether to use the message from the commit input box as the default stash message.
  "git.useCommitInputAsStashMessage": false,
  // Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
  "git.useEditorAsCommitInput": true,
  // Controls whether force pushing uses the safer force-if-includes variant. Note: This setting requires the `git.useForcePushWithLease` setting to be enabled, and Git version `2.30.0` or later.
  "git.useForcePushIfIncludes": true,
  // Controls whether force pushing uses the safer force-with-lease variant.
  "git.useForcePushWithLease": true,
  // Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
  "git.useIntegratedAskPass": true,
  // Enable verbose output when `git.useEditorAsCommitInput` is enabled.
  "git.verboseCommit": false,
  // The name of the repository's git remote that points to GitHub
  "github-actions.remote-name": "origin",
  // If this is set to true, use the auth provider for the GitHub Enterprise URL configured in `github-enterprise.uri`
  "github-actions.use-enterprise": false,
  // Auto-refresh pinned workflows. Note: this uses polling and counts against your GitHub API rate limit
  "github-actions.workflows.pinned.refresh.enabled": false,
  // Time to wait between calls to update pinned workflows in seconds
  "github-actions.workflows.pinned.refresh.interval": 30,
  // Workflows to show in the status bar, identified by their paths
  "github-actions.workflows.pinned.workflows": [],
  // The URI for your GHE.com or GitHub Enterprise Server instance.
  //
  // Examples:
  // * GHE.com: `https://octocat.ghe.com`
  // * GitHub Enterprise Server: `https://github.octocat.com`
  //
  // > **Note:** This should _not_ be set to a GitHub.com URI. If your account exists on GitHub.com or is a GitHub Enterprise Managed User, you do not need any additional configuration and can simply log in to GitHub.
  "github-enterprise.uri": "",
  // Controls whether to query repository rules for GitHub repositories
  "github.branchProtection": true,
  //
  "github.copilot.advanced": {},
  // Automatically fix diagnostics for edited files.
  "github.copilot.chat.agent.autoFix": true,
  // When enabled, Copilot will include the name of the current active editor in the context for agent mode.
  "github.copilot.chat.agent.currentEditorContext.enabled": true,
  // Configures whether Copilot Edits can run workspace tasks in agent mode.
  "github.copilot.chat.agent.runTasks": true,
  // A list of commands or regular expressions that allow the run in terminal tool commands to run without explicit approval. These will be matched against the start of a command. A regular expression can be provided by wrapping the string in `/` characters.
  //
  // Examples:
  // - `"mkdir"` Will allow all command lines starting with `mkdir`
  // - `"npm run build"` Will allow all command lines starting with `npm run build`
  // - `"/^git (status|show\b.*)$/"` will allow `git status` and all command lines starting with `git show`
  // - `"/.*/"` will allow all command lines
  //
  // This will be overridden by anything that matches an entry in `github.copilot.config.agent.terminal.denyList`.
  "github.copilot.chat.agent.terminal.allowList": {},
  // A list of commands or regular expressions that override matches in `github.copilot.config.agent.terminal.allowList` and force a command line to require explicit approval. This will be matched against the start of a command. A regular expression can be provided by wrapping the string in `/` characters.
  //
  // Examples:
  // - `"rm"` will require explicit approval for any command starting with `rm`
  // - `"/^git (push|pull)/"` will require explicit approval for any command starting with `git push` or `git pull`
  //
  // This provides basic protection by preventing certain commands from running automatically, especially those a user would likely want to approve first. It is not intended as a comprehensive security measure or a defense against prompt injection.
  "github.copilot.chat.agent.terminal.denyList": {
    "chmod": true,
    "chown": true,
    "curl": true,
    "del": true,
    "eval": true,
    "kill": true,
    "Remove-Item": true,
    "rm": true,
    "rmdir": true,
    "wget": true
  },
  // Enables the thinking tool that allows Copilot to think deeply about your request before generating a response in agent mode.
  "github.copilot.chat.agent.thinkingTool": false,
  // The endpoint to use for the Ollama when accessed via bring your own key. Defaults to localhost.
  "github.copilot.chat.byok.ollamaEndpoint": "http://localhost:11434",
  // Use instructions files instead. See https://aka.ms/vscode-ghcp-custom-instructions for more information.
  // A set of instructions that will be added to Copilot requests that generate code.
  // Instructions can come from:
  // - a file in the workspace: `{ "file": "fileName" }`
  // - text in natural language: `{ "text": "Use underscore for field names." }`
  //
  // Note: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance.
  "github.copilot.chat.codeGeneration.instructions": [],
  // Controls whether code instructions from `.github/copilot-instructions.md` are added to Copilot requests.
  //
  // Note: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance. [Learn more](https://aka.ms/github-copilot-custom-instructions) about customizing Copilot.
  "github.copilot.chat.codeGeneration.useInstructionFiles": true,
  // Whether to enable agentic codesearch when using `#codebase`.
  "github.copilot.chat.codesearch.enabled": false,
  // A set of instructions that will be added to Copilot requests that generate commit messages.
  // Instructions can come from:
  // - a file in the workspace: `{ "file": "fileName" }`
  // - text in natural language: `{ "text": "Use conventional commit message format." }`
  //
  // Note: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance.
  "github.copilot.chat.commitMessageGeneration.instructions": [],
  // The execution mode of the TypeScript Copilot context provider.
  "github.copilot.chat.completionContext.typescript.mode": "off",
  // Whether the `copilot-debug` command is enabled in the terminal.
  "github.copilot.chat.copilotDebugCommand.enabled": true,
  // When making inline chat request whether to include recently viewed and edited files with Copilot requests.
  "github.copilot.chat.editor.temporalContext.enabled": false,
  // This setting is deprecated in favor of `github.copilot.chat.codesearch.enabled`.
  //
  "github.copilot.chat.edits.codesearch.enabled": false,
  // Whether to enable the new notebook tool in Copilot Edits.
  "github.copilot.chat.edits.newNotebook.enabled": true,
  // Whether to suggest source files from test files for the Copilot Edits working set.
  "github.copilot.chat.edits.suggestRelatedFilesForTests": true,
  // Whether to suggest related files from git history for the Copilot Edits working set.
  "github.copilot.chat.edits.suggestRelatedFilesFromGitHistory": true,
  // When making edits request whether to include recently viewed and edited files with Copilot requests.
  "github.copilot.chat.edits.temporalContext.enabled": false,
  // Show 'Generate tests' code lens for symbols that are not covered by current test coverage information.
  "github.copilot.chat.generateTests.codeLens": false,
  // Enables the TypeScript language context provider for /fix commands
  "github.copilot.chat.languageContext.fix.typescript.enabled": false,
  // Enables the TypeScript language context provider for inline chats (both generate and edit)
  "github.copilot.chat.languageContext.inline.typescript.enabled": false,
  // The cache population timeout for the TypeScript language context provider in milliseconds. The default is 500 milliseconds.
  "github.copilot.chat.languageContext.typescript.cacheTimeout": 500,
  // Enables the TypeScript language context provider for inline completions
  "github.copilot.chat.languageContext.typescript.enabled": false,
  // Specify a locale that Copilot should respond in, e.g. `en` or `fr`. By default, Copilot will respond using VS Code's configured display language locale.
  //  - auto: Use VS Code's configured display language
  //  - en: English
  //  - fr: français
  //  - it: italiano
  //  - de: Deutsch
  //  - es: español
  //  - ru: русский
  //  - zh-CN: 中文(简体)
  //  - zh-TW: 中文(繁體)
  //  - ja: 日本語
  //  - ko: 한국어
  //  - cs: čeština
  //  - pt-br: português
  //  - tr: Türkçe
  //  - pl: polski
  "github.copilot.chat.localeOverride": "auto",
  // Whether to enable new agentic workspace creation.
  "github.copilot.chat.newWorkspaceCreation.enabled": true,
  // Controls whether the currently executing cell is revealed into the viewport upon execution from Copilot.
  "github.copilot.chat.notebook.followCellExecution.enabled": false,
  // A set of instructions that will be added to Copilot requests that generate pull request titles and descriptions.
  // Instructions can come from:
  // - a file in the workspace: `{ "file": "fileName" }`
  // - text in natural language: `{ "text": "Always include a list of key changes." }`
  //
  // Note: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance.
  "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [],
  // Enables code review on current selection.
  "github.copilot.chat.reviewSelection.enabled": true,
  // A set of instructions that will be added to Copilot requests that provide code review for the current selection.
  // Instructions can come from:
  // - a file in the workspace: `{ "file": "fileName" }`
  // - text in natural language: `{ "text": "Use underscore for field names." }`
  //
  // Note: Keep your instructions short and precise. Poor instructions can degrade Copilot's effectiveness.
  "github.copilot.chat.reviewSelection.instructions": [],
  // Whether to prompt the user to select a specific symbol scope if the user uses `/explain` and the active editor has no selection.
  "github.copilot.chat.scopeSelection": false,
  // Enables the `/setupTests` intent and prompting in `/tests` generation.
  "github.copilot.chat.setupTests.enabled": true,
  // Enables the `/startDebugging` intent in panel chat. Generates or finds launch config to match the query (if any), project structure, and more.
  "github.copilot.chat.startDebugging.enabled": true,
  // Whether to auto-summarize agent conversation history once the context window is filled.
  "github.copilot.chat.summarizeAgentConversationHistory.enabled": true,
  // Controls where chat queries from the terminal should be opened.
  //  - chatView: Open the chat view.
  //  - quickChat: Open quick chat.
  //  - terminal: Open terminal inline chat
  "github.copilot.chat.terminalChatLocation": "chatView",
  // Use instructions files instead. See https://aka.ms/vscode-ghcp-custom-instructions for more information.
  // A set of instructions that will be added to Copilot requests that generate tests.
  // Instructions can come from:
  // - a file in the workspace: `{ "file": "fileName" }`
  // - text in natural language: `{ "text": "Use underscore for field names." }`
  //
  // Note: Keep your instructions short and precise. Poor instructions can degrade Copilot's quality and performance.
  "github.copilot.chat.testGeneration.instructions": [],
  // Use relevant GitHub projects as starter projects when using `/new`
  "github.copilot.chat.useProjectTemplates": true,
  // Controls if Copilot commands are shown as Code Actions when available
  "github.copilot.editor.enableCodeActions": true,
  // Enable or disable auto triggering of Copilot completions for specified [languages](https://code.visualstudio.com/docs/languages/identifiers). You can still trigger suggestions manually using `Alt + \`
  "github.copilot.enable": {
    "*": true,
    "markdown": false,
    "plaintext": false,
    "scminput": false
  },
  // Whether to enable next edit suggestions (NES).
  //
  // NES can propose a next edit based on your recent changes. [Learn more](https://aka.ms/vscode-nes) about next edit suggestions.
  "github.copilot.nextEditSuggestions.enabled": false,
  // Whether to offer fixes for diagnostics via next edit suggestions (NES).
  "github.copilot.nextEditSuggestions.fixes": true,
  // Controls whether Copilot generates suggestions for renaming
  "github.copilot.renameSuggestions.triggerAutomatically": true,
  // The currently selected completion model ID. To select from a list of available models, use the __"Change Completions Model"__ command or open the model picker (from the Copilot menu in the VS Code title bar, select __"Configure Code Completions"__ then __"Change Completions Model"__. The value must be a valid model ID. An empty value indicates that the default model will be used.
  "github.copilot.selectedCompletionModel": "",
  // Controls whether to enable automatic GitHub authentication for git commands within VS Code.
  "github.gitAuthentication": true,
  // Controls which protocol is used to clone a GitHub repository
  "github.gitProtocol": "https",
  // Controls whether to show the GitHub avatar of the commit author in various hovers (ex: Git blame, Timeline, Source Control Graph, etc.)
  "github.showAvatar": true,
  // Number of seconds the list of `.gitignore` files retrieved from github will be cached
  "gitignore.cacheExpirationInterval": 3600,
  // Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
  "grunt.autoDetect": "off",
  // Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
  "gulp.autoDetect": "off",
  // The number of bytes per row to show in the editor.
  "hexeditor.columnWidth": 16,
  // Whether to auto reveal the data inspector when the hex editor is opened.
  "hexeditor.dataInspector.autoReveal": true,
  // The endianness selected when loading the editor.
  "hexeditor.defaultEndianness": "little",
  // Where the data inspector should be shown in the hex editor.
  "hexeditor.inspectorType": "aside",
  // The max file size (in MB) that the editor will try to open before warning you.
  "hexeditor.maxFileSize": 10,
  // Whether decoded text should be shown in the editor.
  "hexeditor.showDecodedText": true,
  // Show Hex Editor button in editor menu.
  "hexeditor.showOpenFileButton": false,
  // Enable/disable autoclosing of HTML tags.
  "html.autoClosingTags": true,
  // Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
  "html.autoCreateQuotes": true,
  // Controls the default value for attributes when completion is accepted.
  //  - doublequotes: Attribute value is set to "".
  //  - singlequotes: Attribute value is set to ''.
  //  - empty: Attribute value is not set.
  "html.completion.attributeDefaultValue": "doublequotes",
  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
  //
  // VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
  //
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "html.customData": [],
  // List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
  "html.format.contentUnformatted": "pre,code,textarea",
  // Enable/disable default HTML formatter.
  "html.format.enable": true,
  // List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
  "html.format.extraLiners": "head, body, /html",
  // Format and indent `{{#foo}}` and `{{/foo}}`.
  "html.format.indentHandlebars": false,
  // Indent `<head>` and `<body>` sections.
  "html.format.indentInnerHtml": false,
  // Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
  "html.format.maxPreserveNewLines": null,
  // Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
  "html.format.preserveNewLines": true,
  // Honor django, erb, handlebars and php templating language tags.
  "html.format.templating": false,
  // List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
  "html.format.unformatted": "wbr",
  // Keep text content together between this string.
  "html.format.unformattedContentDelimiter": "",
  // Wrap attributes.
  //  - auto: Wrap attributes only when line length is exceeded.
  //  - force: Wrap each attribute except first.
  //  - force-aligned: Wrap each attribute except first and keep aligned.
  //  - force-expand-multiline: Wrap each attribute.
  //  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
  //  - preserve: Preserve wrapping of attributes.
  //  - preserve-aligned: Preserve wrapping of attributes but align.
  "html.format.wrapAttributes": "auto",
  // Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to `aligned`.
  "html.format.wrapAttributesIndentSize": null,
  // Maximum amount of characters per line (0 = disable).
  "html.format.wrapLineLength": 120,
  // Show tag and attribute documentation in hover.
  "html.hover.documentation": true,
  // Show references to MDN in hover.
  "html.hover.references": true,
  // Deprecated in favor of `editor.linkedEditing`
  // Enable/disable mirroring cursor on matching HTML tag.
  "html.mirrorCursorOnMatchingTag": false,
  // Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
  "html.suggest.html5": true,
  // Traces the communication between VS Code and the HTML language server.
  "html.trace.server": "off",
  // Controls whether the built-in HTML language support validates embedded scripts.
  "html.validate.scripts": true,
  // Controls whether the built-in HTML language support validates embedded styles.
  "html.validate.styles": true,
  // Experimental feature to serialize the Jupyter notebook in a worker thread.
  "ipynb.experimental.serialization": true,
  // Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.
  "ipynb.pasteImagesAsAttachments.enabled": true,
  // Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
  "jake.autoDetect": "off",
  // Enable/disable automatic closing of JSX tags.
  "javascript.autoClosingTags": true,
  // Enable/disable default JavaScript formatter.
  "javascript.format.enable": true,
  // Indent case clauses in switch statements. Requires using TypeScript 5.1+ in the workspace.
  "javascript.format.indentSwitchCase": true,
  // Defines space handling after a comma delimiter.
  "javascript.format.insertSpaceAfterCommaDelimiter": true,
  // Defines space handling after the constructor keyword.
  "javascript.format.insertSpaceAfterConstructor": false,
  // Defines space handling after function keyword for anonymous functions.
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
  // Defines space handling after keywords in a control flow statement.
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
  // Defines space handling after opening and before closing empty braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
  // Defines space handling after opening and before closing JSX expression braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
  // Defines space handling after opening and before closing non-empty braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  // Defines space handling after opening and before closing non-empty brackets.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
  // Defines space handling after opening and before closing non-empty parenthesis.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
  // Defines space handling after opening and before closing template string braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  // Defines space handling after a semicolon in a for statement.
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,
  // Defines space handling after a binary operator.
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
  // Defines space handling before function argument parentheses.
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,
  // Defines whether an open brace is put onto a new line for control blocks or not.
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
  // Defines whether an open brace is put onto a new line for functions or not.
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,
  // Defines handling of optional semicolons.
  //  - ignore: Don't insert or remove any semicolons.
  //  - insert: Insert semicolons at statement ends.
  //  - remove: Remove unnecessary semicolons.
  "javascript.format.semicolons": "ignore",
  // Enable/disable inlay hints for implicit return types on function signatures:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
  // Enable/disable inlay hints for parameter names:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  //  - none: Disable parameter name hints.
  //  - literals: Enable parameter name hints only for literal arguments.
  //  - all: Enable parameter name hints for literal and non-literal arguments.
  "javascript.inlayHints.parameterNames.enabled": "none",
  // Suppress parameter name hints on arguments whose text is identical to the parameter name.
  "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  // Enable/disable inlay hints for implicit parameter types:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  "javascript.inlayHints.parameterTypes.enabled": false,
  // Enable/disable inlay hints for implicit types on property declarations:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  "javascript.inlayHints.propertyDeclarationTypes.enabled": false,
  // Enable/disable inlay hints for implicit variable types:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  "javascript.inlayHints.variableTypes.enabled": false,
  // Suppress type hints on variables whose name is identical to the type name.
  "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
  // Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.
  "javascript.preferences.autoImportFileExcludePatterns": [],
  // Specify regular expressions to exclude auto imports with matching import specifiers. Examples:
  //
  // - `^node:`
  // - `lib/internal` (slashes don't need to be escaped...)
  // - `/lib\/internal/i` (...unless including surrounding slashes for `i` or `u` flags)
  // - `^lodash$` (only allow subpath imports from lodash)
  "javascript.preferences.autoImportSpecifierExcludeRegexes": [],
  // Preferred path style for auto imports.
  //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
  //  - relative: Prefers a relative path to the imported file location.
  //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
  //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
  "javascript.preferences.importModuleSpecifier": "shortest",
  // Preferred path ending for auto imports.
  //  - auto: Use project settings to select a default.
  //  - minimal: Shorten `./component/index.js` to `./component`.
  //  - index: Shorten `./component/index.js` to `./component/index`.
  //  - js: Do not shorten path endings; include the `.js` or `.ts` extension.
  "javascript.preferences.importModuleSpecifierEnding": "auto",
  // Preferred style for JSX attribute completions.
  //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
  //  - braces: Insert `={}` after attribute names.
  //  - none: Only insert attribute names.
  "javascript.preferences.jsxAttributeCompletionStyle": "auto",
  // Advanced preferences that control how imports are ordered.
  "javascript.preferences.organizeImports": {},
  // Preferred quote style to use for Quick Fixes.
  //  - auto: Infer quote type from existing code
  //  - single: Always use single quotes: `'`
  //  - double: Always use double quotes: `"`
  "javascript.preferences.quoteStyle": "auto",
  // When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.
  "javascript.preferences.renameMatchingJsxTags": true,
  // Enable/disable introducing aliases for object shorthand properties during renames.
  "javascript.preferences.useAliasesForRenames": true,
  // Makes `Go to Definition` avoid type declaration files when possible by triggering `Go to Source Definition` instead. This allows `Go to Source Definition` to be triggered with the mouse gesture.
  "javascript.preferGoToSourceDefinition": false,
  // Enable/disable references CodeLens in JavaScript files.
  "javascript.referencesCodeLens.enabled": false,
  // Enable/disable references CodeLens on all functions in JavaScript files.
  "javascript.referencesCodeLens.showOnAllFunctions": false,
  // Enable/disable auto import suggestions.
  "javascript.suggest.autoImports": true,
  // Enable/disable snippet completions for class members.
  "javascript.suggest.classMemberSnippets.enabled": true,
  // Complete functions with their parameter signature.
  "javascript.suggest.completeFunctionCalls": false,
  // Enable/disable suggestion to complete JSDoc comments.
  "javascript.suggest.completeJSDocs": true,
  // Enable/disable autocomplete suggestions.
  "javascript.suggest.enabled": true,
  // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
  "javascript.suggest.includeAutomaticOptionalChainCompletions": true,
  // Enable/disable auto-import-style completions on partially-typed import statements.
  "javascript.suggest.includeCompletionsForImportStatements": true,
  // Enable/disable generating `@returns` annotations for JSDoc templates.
  "javascript.suggest.jsdoc.generateReturns": true,
  // Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
  "javascript.suggest.names": true,
  // Enable/disable suggestions for paths in import statements and require calls.
  "javascript.suggest.paths": true,
  // Enable/disable suggestion diagnostics for JavaScript files in the editor.
  "javascript.suggestionActions.enabled": true,
  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
  //  - prompt: Prompt on each rename.
  //  - always: Always update paths automatically.
  //  - never: Never rename paths and don't prompt.
  "javascript.updateImportsOnFileMove.enabled": "prompt",
  // Automatically update imports when pasting code. Requires TypeScript 5.6+.
  "javascript.updateImportsOnPaste.enabled": true,
  // Enable/disable JavaScript validation.
  "javascript.validate.enable": true,
  // The maximum number of characters in a hover. If the hover is longer than this, it will be truncated. Requires TypeScript 5.9+.
  "js/ts.hover.maximumLength": 500,
  // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.checkJs": false,
  // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.experimentalDecorators": false,
  // Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.
  "js/ts.implicitProjectConfig.module": "ESNext",
  // Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.strictFunctionTypes": true,
  // Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.strictNullChecks": true,
  // Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.
  "js/ts.implicitProjectConfig.target": "ES2022",
  // The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
  // Enables or disables color decorators
  "json.colorDecorators.enable": true,
  // Enable/disable default JSON formatter
  "json.format.enable": true,
  // Keep all existing new lines when formatting.
  "json.format.keepLines": false,
  // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
  "json.maxItemsComputed": 5000,
  // When enabled, JSON schemas can be fetched from http and https locations.
  "json.schemaDownload.enable": true,
  // Associate schemas to JSON files in the current project.
  "json.schemas": [],
  // Traces the communication between VS Code and the JSON language server.
  "json.trace.server": "off",
  // Enable/disable JSON validation.
  "json.validate.enable": true,
  // When `latex-workshop.bibtex-fields.sort.enabled` is true, these fields are put at the top, in the order defined by the array.
  "latex-workshop.bibtex-entries.first": [
    "string",
    "xdata"
  ],
  // When `latex-workshop.bibtex-fields.sort.enabled` is true, sort fields according the order defined here and then alphabetically for non listed fields.
  "latex-workshop.bibtex-fields.order": [],
  // Sort fields inside every entry. The sorting order is defined by `latex-workshop.bibtex-fields.order`. This variable only has effect when formatting bibtex aligns fields. It is not possible to sort entries without aligning them.
  "latex-workshop.bibtex-fields.sort.enabled": false,
  // Align equal signs when calling VSCode format on a .bib file.
  "latex-workshop.bibtex-format.align-equal.enabled": true,
  // Determines if field names should be formatted like 'AUTHOR' or 'author'.
  "latex-workshop.bibtex-format.case": "lowercase",
  // How to handle duplicates found by the bibtex sorting functions. Duplicates are decided according to the `bibtex-format.sortby` config.
  "latex-workshop.bibtex-format.handleDuplicates": "Highlight Duplicates",
  // Sort content when calling VSCode format on a .bib file.
  "latex-workshop.bibtex-format.sort.enabled": false,
  // An array of strings to sort by. Either a bibtex field name (title, author, year, etc.), or `"year-desc"` to sort by year in descending order, or `"key"` for the entry key, or `"type"` for the entry type (article, book, misc, etc.). E.g. `["author", "year-desc", "title"]`.
  "latex-workshop.bibtex-format.sortby": [
    "key"
  ],
  // Surround each field value with either {Curly braces} or "Quotation marks".
  "latex-workshop.bibtex-format.surround": "Curly braces",
  // Indentation for each field. The string can be `"tab"` or of the form `"X spaces"` or simply `"X"` where `X` is a number.
  "latex-workshop.bibtex-format.tab": "2 spaces",
  // Keep the trailing comma of the last field item.
  "latex-workshop.bibtex-format.trailingComma": false,
  // Defines the maximum bibtex file size for the extension to parse in MB.
  "latex-workshop.bibtex.maxFileSize": 5,
  // Use alternative keymap combo, i.e., `ctrl`+`l` `alt`+`key`, to replace the default `ctrl`/`cmd`+`alt` shortcuts.
  "latex-workshop.bind.altKeymap.enabled": false,
  // Enable the automatic insertion of `\item` on a newline when pressing `Enter` in a line starting in `\item`.
  "latex-workshop.bind.enter.key": true,
  // Enable checking for duplicated labels. A new check is triggered every time the intellisense data is updated, see `latex-workshop.intellisense.update.aggressive.enabled`.
  "latex-workshop.check.duplicatedLabels.enabled": true,
  // Delay to wait for GitHub Codespaces Authentication of port forwarding to be resolved, in milliseconds.
  "latex-workshop.codespaces.portforwarding.openDelay": 20000,
  // Enable docker-based LaTeX distribution support. Do not set this item to `true` unless you are aware of what it means. This extension will use the images defined in `latex-workshop.docker.image.latex` to execute `latexmk`, `synctex`, `texcount`, and `latexindent`.
  "latex-workshop.docker.enabled": false,
  // Define the image for `latexmk`, `synctex`, `texcount`, and `latexindent`.
  "latex-workshop.docker.image.latex": "",
  // Docker (or Podman) executable name or path.
  "latex-workshop.docker.path": "docker",
  // Define the program to format the LaTeX document.
  //  - none: Do not use any formatter.
  //  - latexindent: Use `latexindent` to format the LaTeX document.
  //  - tex-fmt: Use `tex-fmt` to format the LaTeX document.
  "latex-workshop.formatting.latex": "none",
  // Define the command line arguments for latexindent. In the addition to the placeholders defined at https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders, the following placeholders are accepted
  // - %TMPFILE%: The full path of the raw TeX file to be formatted. At this moment you need to use it as an input file of `latexindent`.
  // - %INDENT%: The indent character of the file, typically `	`, `' '`, `' '`.
  //
  // Note that the option `-c` requires a trailing slash.
  "latex-workshop.formatting.latexindent.args": [
    "-c",
    "%DIR%/",
    "%TMPFILE%",
    "-y=defaultIndent: '%INDENT%'"
  ],
  // Define the location of the latexindent executable file.
  "latex-workshop.formatting.latexindent.path": "latexindent",
  // Define the command line arguments for tex-fmt. Refer to https://github.com/WGUNDERWOOD/tex-fmt?tab=readme-ov-file#usage for more information about the arguments. Note that `--stdin` is added by the extension, so no need to add it again. For key-value arguments, separate the key and value in two strings, e.g., ["--tab", "4"].
  "latex-workshop.formatting.tex-fmt.args": [
    "--nowrap"
  ],
  // This configuration has been extended to `latex-workshop.formatting.tex-fmt.args` and has no effect.
  //
  "latex-workshop.formatting.tex-fmt.doNotWrap": true,
  // Define the location of the tex-fmt executable file.
  "latex-workshop.formatting.tex-fmt.path": "tex-fmt",
  // Enable Hover on Citations.
  "latex-workshop.hover.citation.enabled": true,
  // Enable Hover on Commands to show the possible signatures.
  "latex-workshop.hover.command.enabled": true,
  // The color of cursor in Hover Preview.
  "latex-workshop.hover.preview.cursor.color": "auto",
  // Render cursor in Hover Preview at the current position.
  "latex-workshop.hover.preview.cursor.enabled": true,
  // Cursor symbol in Hover Preview.
  "latex-workshop.hover.preview.cursor.symbol": "\\!|\\!",
  // Enable Hover Preview.
  "latex-workshop.hover.preview.enabled": true,
  // MathJax extensions to load for Hover Preview. See [the list](https://docs.mathjax.org/en/latest/input/tex/extensions/index.html). Note that the following extensions are loaded by default: `ams`, `color`, `newcommand`, `noerrors`, and `noundefined`. They cannot be disabled.
  "latex-workshop.hover.preview.mathjax.extensions": [],
  // Maximum number of lines between the beginning of the math environment and the cursor position to allow preview.
  "latex-workshop.hover.preview.maxLines": 20,
  // Set the path of a file containing newcommands to be used in Hover Preview. If the path is relative, it is joined with the root dir.
  "latex-workshop.hover.preview.newcommand.newcommandFile": "",
  // Enable newcommands defined in the current TeX file to be included in Hover Preview.
  "latex-workshop.hover.preview.newcommand.parseTeXFile.enabled": true,
  // Scaling of Hover Preview.
  "latex-workshop.hover.preview.scale": 1,
  // Enable Hover on References.
  "latex-workshop.hover.ref.enabled": true,
  // Show number assigned to the reference in the previous compilation.
  "latex-workshop.hover.ref.number.enabled": true,
  // Many snippets use text hints of the form `${\d:some_tex}` for their argument. You may prefer to hide instead by setting this configuration to `false`.
  "latex-workshop.intellisense.argumentHint.enabled": true,
  // Character to trigger snippet suggestions as part of intellisense. Set this variable to `''` to deactivate these suggestions.
  "latex-workshop.intellisense.atSuggestion.trigger.latex": "@",
  // Dictionary of `"@prefix": "snippet command"` to add to, replace, or remove the default suggestions in `data/at-suggestions.json`. The key of the dictionary is the triggering string, which **must** starts with `@` regardless of `latex-workshop.intellisense.atSuggestion.trigger.latex`. The value of the dictionary is the snippet to be inserted. If the key is identical to a default snippet defined in `data/at-suggestions.json`, the new value in the dictionary is used for suggestion. If the value is an empty string, the snippet is removed from suggestion. For example, `{ "@.": "\cdot", "@6": "" }`.
  "latex-workshop.intellisense.atSuggestion.user": {},
  // Dictionary of `"entry name": ["array", "of", "fields"]` to replace the default fields used in `data/biblatex-entries.json`. See `data/biblatex-entries.json` for the list of fields for each entry. This variable is used when `latex-workshop.intellisense.citation.backend` is set to `biblatex`.
  "latex-workshop.intellisense.biblatexJSON.replace": {},
  // Dictionary of `"entry name": ["array", "of", "fields"]` to replace the default fields used in `data/bibtex-entries.json`. See `data/bibtex-entries.json` for the list of fields for each entry. This variable is used when `latex-workshop.intellisense.citation.backend` is set to `bibtex`.
  "latex-workshop.intellisense.bibtexJSON.replace": {},
  // Backend to use for citation intellisense.
  "latex-workshop.intellisense.citation.backend": "bibtex",
  // Defines what contents are used to filter citation entries when user types characters in inline mode. Sorting is somewhat controlled by the order of contents defined by this config.
  //  - bibtex key: BibTeX keys.
  //  - title: Publication titles.
  //  - other fields: Other BibTeX fields except for title, order preserved as defined in BibTeX.
  "latex-workshop.intellisense.citation.filterText": [
    "bibtex key",
    "title",
    "other fields"
  ],
  // List of fields to display for citation preview and intellisense. This list is also used as the filter text to narrow down the intellisense suggestions.
  "latex-workshop.intellisense.citation.format": [
    "author",
    "title",
    "journal",
    "publisher",
    "booktitle",
    "year"
  ],
  // Defines what to show as suggestion labels when intellisense provides citation suggestions in inline mode.
  //  - bibtex key: Show bibtex keys in the inline mode.
  //  - title: Show publication titles in the inline mode.
  //  - authors: Show publication authors in the inline mode.
  "latex-workshop.intellisense.citation.label": "bibtex key",
  // Defines which type of hint to show when intellisense provides citation suggestions.
  //  - inline: Use the inline intellisense to provide citation completion items.
  //  - browser: Use a dropdown menu to provide citation completion items.
  "latex-workshop.intellisense.citation.type": "inline",
  // Dictionary of `"command name": "command snippet"` to add to, replace, or remove the default ones in `data/commands.json`. The key of the dictionary is the command name with optional braces indicating the command arguments. The value of the dictionary is the snippet to be inserted. If the key is identical to a default command suggestion defined in `data/commands.json`, the new value in the dictionary is used for suggestion. If the value is an empty string, the command is removed from suggestion. Leading backslashes will be added to both the name and snippet by the extension, so don't include them in this config. For example, `{"mycommand[]{}": "notsamecommand[${2:option}]{$TM_SELECTED_TEXT$1}", "parbox{}{}": "parbox{${2:width}}{$TM_SELECTED_TEXT$1}", "overline{}": ""}` adds a new command with name `mycommand[]{} that inserts `\notsamecommand[]{}`, replaces the default snippet of `\parbox{}{}` to make it include current selected text, and removes `\overline{}` from suggestion.
  "latex-workshop.intellisense.command.user": {},
  // Specify the base directory for file completion
  //  - root relative: Completion from the root file directory
  //  - file relative: Completion from the current file directory
  //  - both: both
  "latex-workshop.intellisense.file.base": "root relative",
  // Patterns to ignore in file completion
  "latex-workshop.intellisense.file.exclude": [
    "**/*.aux",
    "**/*.bbl",
    "**/*.bcf",
    "**/*.blg",
    "**/*.idx",
    "**/*.ind",
    "**/*.lof",
    "**/*.lot",
    "**/*.out",
    "**/*.toc",
    "**/*.acn",
    "**/*.acr",
    "**/*.alg",
    "**/*.glg",
    "**/*.glo",
    "**/*.gls",
    "**/*.ist",
    "**/*.fls",
    "**/*.log",
    "**/*.nav",
    "**/*.snm",
    "**/*.fdb_latexmk",
    "**/*.synctex.gz",
    "**/*.run.xml"
  ],
  // Enable preview for `\includegraphics` completion.
  "latex-workshop.intellisense.includegraphics.preview.enabled": true,
  // The name of LaTeX commands that indicates a label definition. The command must accept one mandatory argument of the label reference string, e.g, \linelabel{ref-str}.
  "latex-workshop.intellisense.label.command": [
    "label",
    "linelabel"
  ],
  // Some LaTeX commands can have several forms, each with different arguments. If set to True, the intellisense completion list will have one entry for each form of a given command. Default is true.
  "latex-workshop.intellisense.optionalArgsEntries.enabled": true,
  // List of extra directories to look for package completion files in addition to those provided by the extension. Files found in these directories have a higher priority over the default ones. LaTeX-Workshop bundles a limited number of package macro/env suggestions. Additional ones can be downloaded from https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2FJames-Yu%2FLaTeX-Workshop%2Ftree%2Fmaster%2Fdev%2Fpackages . For custom packages, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Intellisense#commands-starting-with- to learn how to generate these files. This setting is only relevant when `latex-workshop.intellisense.package.env.enabled` is true. You can use only 2 placeholders: `%WORKSPACE_FOLDER%`, `%RELATIVE_DIR%`. Please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders for their definitions.
  "latex-workshop.intellisense.package.dirs": [],
  // Auto-complete commands and environments from used packages.
  "latex-workshop.intellisense.package.enabled": true,
  // If true, every environment provided by an included package is available by a snippet `\envname`. Only applies when `latex-workshop.intellisense.package.enabled` is true.
  "latex-workshop.intellisense.package.env.enabled": true,
  // List of packages to exclude from the auto-completion mechanism. When `latex-workshop.intellisense.package.enabled#` is set to `true`, the commands and environments defined in these packages will not be added to the intellisense suggestions. This setting has a higher priority over `#latex-workshop.intellisense.package.extra`. You may include the string "lw-default" in the list to remove all default commands and environments.
  "latex-workshop.intellisense.package.exclude": [],
  // List of extra packages to always add to the auto-completion mechanism. When `latex-workshop.intellisense.package.enabled` is set to `true`, the commands and environments defined in these extra packages will be added to the intellisense suggestions.
  "latex-workshop.intellisense.package.extra": [],
  // Auto-complete less used commands and environments from used packages. This config is only effective when `latex-workshop.intellisense.package.enabled` is set to `true`.
  "latex-workshop.intellisense.package.unusual": false,
  // Auto-complete sub- and super-scripts from the current project.
  "latex-workshop.intellisense.subsuperscript.enabled": false,
  // Additional trigger characters for intellisense of LaTeX documents.
  "latex-workshop.intellisense.triggers.latex": [],
  // When `\` is typed, show unimath symbols in the dropdown selector.
  "latex-workshop.intellisense.unimathsymbols.enabled": false,
  // Defines whether the extension aggressively parses the changed content after stopped typing. Disable this config will let the extension only update intellisense after saving changed files.
  "latex-workshop.intellisense.update.aggressive.enabled": false,
  // Defines the delay in milliseconds for the extension to update current active file content for intellisense after stopped typing. This config works only when `intellisense.update.aggressive.enabled` is enabled. Lower this value to let the extension know newly defined commands/references/environments more quickly, at the cost of more frequent content parsing: more computational burden.
  "latex-workshop.intellisense.update.delay": 1000,
  // Use kpsewhich as defined by `latex-workshop.kpsewhich.path` to resolve bibliography file paths for intellisense parsing.
  "latex-workshop.kpsewhich.bibtex.enabled": true,
  // Use kpsewhich as defined by `latex-workshop.kpsewhich.path` to resolve latex class paths for intellisense parsing.
  "latex-workshop.kpsewhich.class.enabled": true,
  // Define the location of the kpsewhich executable file.
  "latex-workshop.kpsewhich.path": "kpsewhich",
  // Delete LaTeX auxiliary files when errors occur during build and retry. This property defines whether LaTeX Workshop will try to clean and build the project once again after errors happen in the build toolchain.
  "latex-workshop.latex.autoBuild.cleanAndRetry.enabled": true,
  // The minimal time interval in milliseconds for an auto build to trigger after the previous (manual and auto) build. This value is recommended to be greater than ~500.
  "latex-workshop.latex.autoBuild.interval": 1000,
  // When the extension shall auto build LaTeX project using the default (first) recipe.
  // - `onSave` builds the project upon saving a `tex` file in vscode.
  // - `onFileChange` builds the project upon detecting a file change in any of the dependencies, even modified by other applications.
  //
  //  Note that `onSave` is more restrictive than `onFileChange`
  //  - never: Never run auto build
  //  - onSave: Auto build whenever a file is saved
  //  - onFileChange: Auto build whenever a dependency file changes on disk
  "latex-workshop.latex.autoBuild.run": "onFileChange",
  // When LaTeX auxiliary files should be deleted. The folder to be cleaned is defined in `latex-workshop.latex.outDir`.
  // - `onFailed` cleans the project when compilation fails.
  // - `onBuilt` cleans the project when compilation is done, whether successful or failed.
  //  - never: Never clean the project
  //  - onFailed: Clean compilation fails
  //  - onSucceeded: Clean compilation successes
  //  - onBuilt: Clean after build, be it successful or not
  "latex-workshop.latex.autoClean.run": "never",
  // List of directories where to look for `.bib` files. Absolute paths are required. This setting is only used by the intellisense feature, you may also need to set the environment variable `BIBINPUTS` properly for the LaTeX compiler to find the `.bib` files.
  "latex-workshop.latex.bibDirs": [],
  // Clear the LaTeX Compiler logs before every step of a recipe. Set this property to false to keep the logs of all tools in a recipe.
  "latex-workshop.latex.build.clearLog.everyRecipeStep.enabled": true,
  // Force the use the recipe mechanism even if some magic comments are present.
  "latex-workshop.latex.build.forceRecipeUsage": true,
  // Whether to include the name of the root file being built in the status bar. You can use only 2 placeholders: `%WORKSPACE_FOLDER%`, `%RELATIVE_DIR%`. Please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders for their definitions.
  "latex-workshop.latex.build.rootfileInStatus": false,
  // The arguments of `latex-workshop.latex.clean.command`. Placeholders listed in https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders can be used to populate the argument strings. Besides, an additional `%TEX%` placeholder refers to the full path of the tex file from which the clean command is called.
  "latex-workshop.latex.clean.args": [
    "-outdir=%OUTDIR%",
    "-c",
    "%TEX%"
  ],
  // The command to be used to remove temporary files when `latex-workshop.latex.clean.method` is set to `command`.
  "latex-workshop.latex.clean.command": "latexmk",
  // Files to clean when `latex-workshop.latex.clean.method` is set to `glob`. This property must be an array of strings. Placeholders listed in https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders can be used to populate the glob strings. File globs such as `*.removeme`, `something?.aux` can be used. Users can also specify glob patterns like `emptyfolder*/` to remove empty folders. Non-empty folders will be ignored. The folder globs must end with a slash and the last path component must not contain the globstar `**`, otherwise the folders will not be removed. The following globs patterns are correct `['abc/', 'abc*/', '**/abc*/', 'abc/**/def/']` but these are not ['**', '**/', 'abc/**', 'abc/**/', 'abc/def**/', 'abc/d**ef/']`.
  "latex-workshop.latex.clean.fileTypes": [
    "%DOCFILE%.aux",
    "%DOCFILE%.bbl",
    "%DOCFILE%.blg",
    "%DOCFILE%.idx",
    "%DOCFILE%.ind",
    "%DOCFILE%.lof",
    "%DOCFILE%.lot",
    "%DOCFILE%.out",
    "%DOCFILE%.toc",
    "%DOCFILE%.acn",
    "%DOCFILE%.acr",
    "%DOCFILE%.alg",
    "%DOCFILE%.glg",
    "%DOCFILE%.glo",
    "%DOCFILE%.gls",
    "%DOCFILE%.fls",
    "%DOCFILE%.log",
    "%DOCFILE%.fdb_latexmk",
    "%DOCFILE%.snm",
    "%DOCFILE%.synctex(busy)",
    "%DOCFILE%.synctex.gz(busy)",
    "%DOCFILE%.nav",
    "%DOCFILE%.vrb"
  ],
  // Define how temporary files will be cleaned.
  //  - glob: Clean all the files located in `latex-workshop.latex.outDir#` and matching the glob patterns listed in `#latex-workshop.latex.clean.fileTypes`.
  //  - command: Run `latex-workshop.latex.clean.command` to clean temporary files.
  "latex-workshop.latex.clean.method": "command",
  // Delete LaTeX auxiliary files recursively in sub-folders of `latex-workshop.latex.outDir`. Note that sub-folders are not removed.
  "latex-workshop.latex.clean.subfolder.enabled": false,
  // The arguments of `latex-workshop.latex.external.build.command` when calling latex-workshop.build.
  "latex-workshop.latex.external.build.args": [],
  // The external command to execute when calling latex-workshop.build. This is useful when compiling relies on a Makefile or a bespoke script. When defined, it completely bypasses the recipes and root file detection mechanism.
  "latex-workshop.latex.external.build.command": "",
  // The list of extra file extensions to be considered as LaTeX files. The extension will parse these files for references and to provide intellisense.
  "latex-workshop.latex.extraExts": [],
  // The jobname argument of the compiling tool, which is used by the extension to find project files (e.g., PDF and SyncTeX files). This config should be set identical to the value provided to the `-jobname=` argument, and should not have placeholders. Leave the config empty to ignore jobname and keep the default behavior.
  "latex-workshop.latex.jobname": "",
  // Define the arguments to be input to magic command executable. This can be overridden by using "% !TeX options".
  "latex-workshop.latex.magic.args": [
    "-synctex=1",
    "-interaction=nonstopmode",
    "-file-line-error",
    "%DOC%"
  ],
  // Define the arguments to be input to BIB magic command executable. This can be overridden by using "% !BIB options".
  "latex-workshop.latex.magic.bib.args": [
    "%DOCFILE%"
  ],
  // Add `--max-print-line` option to LaTeX build commands. This flag tells some MikTeX compilers to produce non hard wrapped log messages. Non hard wrapped log messages are required for the _Problem_ Pane to properly display messages.
  "latex-workshop.latex.option.maxPrintLine.enabled": true,
  // The directory where the extension tries to find project files (e.g., PDF and SyncTeX files) are located. Both relative and absolute paths are supported. Relative path start from the root file location, so beware if it is located in sub-directory. The path must not contain a trailing slash. The LaTeX toolchain should output files to this path. For a list of supported placeholders, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders. Note that if this config is set to %DIR% (default value) or %DIR_W32%, the extension will try to parse the last LaTeX tools used and look for `-out-directory=` and `-outdir=`, and automatically determine the output directory. This means that you can safely ignore this config if you use `latexmk` and do not manually `mv` the output files in your recipe.
  "latex-workshop.latex.outDir": "%DIR%",
  // Define which recipe is used by `latex-workshop.build#`. It also applies to auto build. Recipes are referred to by their names as defined in `#latex-workshop.latex.recipes`. Note there are two particular values:
  // - `first` means to use the first recipe in `latex-workshop.latex.recipes`;
  // - `lastUsed` means to use the last run recipe.
  "latex-workshop.latex.recipe.default": "first",
  // Define LaTeX compiling recipes. Each recipe in the list is an object containing its name and the names of tools to be used sequentially, which are defined in `latex-workshop.latex.tools`. By default, the first recipe is used to compile the project. For details, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipes.
  "latex-workshop.latex.recipes": [
    {
      "name": "latexmk",
      "tools": [
        "latexmk"
      ]
    },
    {
      "name": "latexmk (latexmkrc)",
      "tools": [
        "latexmk_rconly"
      ]
    },
    {
      "name": "latexmk (lualatex)",
      "tools": [
        "lualatexmk"
      ]
    },
    {
      "name": "latexmk (xelatex)",
      "tools": [
        "xelatexmk"
      ]
    },
    {
      "name": "pdflatex -> bibtex -> pdflatex * 2",
      "tools": [
        "pdflatex",
        "bibtex",
        "pdflatex",
        "pdflatex"
      ]
    },
    {
      "name": "Compile Rnw files",
      "tools": [
        "rnw2tex",
        "latexmk"
      ]
    },
    {
      "name": "Compile Jnw files",
      "tools": [
        "jnw2tex",
        "latexmk"
      ]
    },
    {
      "name": "Compile Pnw files",
      "tools": [
        "pnw2tex",
        "latexmk"
      ]
    },
    {
      "name": "tectonic",
      "tools": [
        "tectonic"
      ]
    }
  ],
  // When the `subfile` package is used, either the main file or any subfile containing `\documentclass[main.tex]{subfile}` can be LaTeXing. When `false`, the `build` and `view` commands  ask the user's choice first. When `true`, the subfile is used when `latex-workshop.latex.rootFile.useSubFile` is also `true`, otherwise the rootFile is used.
  "latex-workshop.latex.rootFile.doNotPrompt": false,
  // Determine if the root file is detected based on the presence of \documentclass[]{} or \begin{document}.
  "latex-workshop.latex.rootFile.indicator": "\\documentclass[]{}",
  // When the `subfile` package is used, either the main file or any subfile containing `\documentclass[main.tex]{subfile}` can be LaTeXing. When `true`, the extension uses the subfile as the rootFile for the `autobuild`, `clean` and `synctex` commands.
  "latex-workshop.latex.rootFile.useSubFile": true,
  // Patterns of files to exclude from the root detection mechanism. See also `latex-workshop.latex.search.rootFiles.include`. For more details, see the https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#multi-file-projects.
  "latex-workshop.latex.search.rootFiles.exclude": [],
  // Patterns of files to consider for the root detection mechanism. Relative paths are computed from the workspace folder. To detect the root file and the tex file tree, we parse all the `.tex` listed here. If you want to specify all `.tex` files inside directory, say `foo`, and all its subdirectories recursively, you need to use `**/foo/**/*.tex`. If you only want to match `.tex` files at the top level of the workspace, use `*.tex`. For more details, see https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#multi-file-projects
  "latex-workshop.latex.search.rootFiles.include": [
    "**/*.tex",
    "**/*.rnw",
    "**/*.Rnw"
  ],
  // List of directories where to look for extra input `.tex` files.
  // Absolute paths are required. You may also need to set the environment variable `TEXINPUTS` properly for the LaTeX compiler to find the `.tex` files, see the `env` parameter of [recipes](https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipes).
  "latex-workshop.latex.texDirs": [],
  // Define LaTeX compiling tools to be used in recipes. Each tool is labeled by its `name`. When invoked, `command` is spawned with arguments defined in `args` and environment variables defined in `env`. Typically no spaces should appear in each argument unless in paths. List of available placeholders: `%DOC%`, `%DOC_W32%, %DOC_EXT%`, `%DOC_EXT_W32%`, `%DOCFILE%`, `%DOCFILE_EXT%`, `%DIR%`, `%DIR_W32%`, `%TMPDIR%` and `%OUTDIR%`, `%OUTDIR_W32%`. Please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders for a complete list of all placeholders.
  "latex-workshop.latex.tools": [
    {
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "-pdf",
        "-outdir=%OUTDIR%",
        "%DOC%"
      ],
      "command": "latexmk",
      "env": {},
      "name": "latexmk"
    },
    {
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "-lualatex",
        "-outdir=%OUTDIR%",
        "%DOC%"
      ],
      "command": "latexmk",
      "env": {},
      "name": "lualatexmk"
    },
    {
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "-xelatex",
        "-outdir=%OUTDIR%",
        "%DOC%"
      ],
      "command": "latexmk",
      "env": {},
      "name": "xelatexmk"
    },
    {
      "args": [
        "%DOC%"
      ],
      "command": "latexmk",
      "env": {},
      "name": "latexmk_rconly"
    },
    {
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "%DOC%"
      ],
      "command": "pdflatex",
      "env": {},
      "name": "pdflatex"
    },
    {
      "args": [
        "%DOCFILE%"
      ],
      "command": "bibtex",
      "env": {},
      "name": "bibtex"
    },
    {
      "args": [
        "-e",
        "knitr::opts_knit$set(concordance = TRUE); knitr::knit('%DOCFILE_EXT%')"
      ],
      "command": "Rscript",
      "env": {},
      "name": "rnw2tex"
    },
    {
      "args": [
        "-e",
        "using Weave; weave(\"%DOC_EXT%\", doctype=\"tex\")"
      ],
      "command": "julia",
      "env": {},
      "name": "jnw2tex"
    },
    {
      "args": [
        "-e",
        "using Weave; weave(\"%DOC_EXT%\", doctype=\"texminted\")"
      ],
      "command": "julia",
      "env": {},
      "name": "jnw2texminted"
    },
    {
      "args": [
        "-f",
        "tex",
        "%DOC_EXT%"
      ],
      "command": "pweave",
      "env": {},
      "name": "pnw2tex"
    },
    {
      "args": [
        "-f",
        "texminted",
        "%DOC_EXT%"
      ],
      "command": "pweave",
      "env": {},
      "name": "pnw2texminted"
    },
    {
      "args": [
        "--synctex",
        "--keep-logs",
        "--print",
        "%DOC%.tex"
      ],
      "command": "tectonic",
      "env": {},
      "name": "tectonic"
    }
  ],
  // List environments with verbatim-like content. These environments are stripped off the `.tex` files before any parsing occurs. Note that this variable has no effect on syntax highlighting.
  "latex-workshop.latex.verbatimEnvs": [
    "verbatim",
    "lstlisting",
    "minted"
  ],
  // Defines the time delay before confirming a non-binary file is indeed deleted. Increase this value if your toolchain involves external file changes with a delete-then-create pattern. LaTeX Workshop internally monitors file change events and initiates auto-builds, intellisense parsing, latex importing, and/or PDF viewing refresh. We use this config to control the file polling delay before confirming that the file deletion is not a delete-then-create.
  "latex-workshop.latex.watch.delay": 250,
  // Files to ignore from the watching mechanism, i.e., no intellisense or build-on-file-change. However, document structure/outline and build-on-save won't be affected. This property must be an array of glob patterns. The patterns are matched against the absolute file path. To ignore everything inside the `texmf` tree, `**/texmf/**` can be used.
  "latex-workshop.latex.watch.files.ignore": [
    "**/*.bbx",
    "**/*.bbl",
    "**/*.cbx",
    "**/*.cfg",
    "**/*.clo",
    "**/*.cnf",
    "**/*.def",
    "**/*.dfu",
    "**/*.enc",
    "**/*.fd",
    "**/*.fmt",
    "**/*.lbx",
    "**/*.map",
    "**/*.mkii",
    "**/*.pfb",
    "**/*.tfm",
    "**/*.vf",
    "**/*.code.tex",
    "**/*.sty",
    "**/texmf-{dist,var}/**",
    "**/Local/MiKTeX/**",
    "**/Local/Programs/MiKTeX/**",
    "**/Roaming/MiKTeX/**",
    "**/Program*/MiKTeX*/**",
    "**/.miktex/texmfs/**",
    "/var/cache/miktex-texmf/**",
    "/usr/local/share/miktex-texmf/**",
    "**/Library/Application Support/MiKTeX/texmfs/**",
    "/dev/null"
  ],
  // Defines the time delay before confirming a PDF-like binary file is fully changed. Increase this value if you encounter repeated viewer refreshes and/or loss of PDF scrolling position. LaTeX Workshop internally monitors file change events and initiates auto-builds and/or PDF viewing refresh. When LaTeX is changing large files (particularly binary files like PDFs), multiple consecutive file change events may be emitted, potentially causing file corruption issues. We use this config to control the file polling delay before confirming that the file change has been stabilized. Note that non-binary files such as `.tex`, `.bib`, and `.cls` are not affected.
  "latex-workshop.latex.watch.pdf.delay": 250,
  // This config is renamed to `latex-workshop.formatting.latexindent.args`.
  //
  "latex-workshop.latexindent.args": [
    "-c",
    "%DIR%/",
    "%TMPFILE%",
    "-y=defaultIndent: '%INDENT%'"
  ],
  // This config is renamed to `latex-workshop.formatting.latexindent.path`.
  //
  "latex-workshop.latexindent.path": "latexindent",
  // Write the `TabSize` number from `.chktexrc`. The default value "-1" means that LaTeX Workshop will try to find `.chktexrc` and to read the value from it.
  "latex-workshop.linting.chktex.convertOutput.column.chktexrcTabSize": -1,
  // Enable converting ChkTeX outputs' column numbers for non-ASCII characters.
  "latex-workshop.linting.chktex.convertOutput.column.enabled": true,
  // Enable linting LaTeX with `chktex`. Check `latex-workshop.linting.run` to control when `chktex` is executed if this config is set to `true.
  "latex-workshop.linting.chktex.enabled": false,
  // Linter arguments to check LaTeX syntax of the current file state in real time with ChkTeX. Arguments must be in separate strings in the array. Additional arguments, i.e., `-I0 -f%f:%l:%c:%d:%k:%n:%m\n` will be appended when constructing the command. Current file contents will be piped to the command through stdin.
  "latex-workshop.linting.chktex.exec.args": [
    "-wall",
    "-n22",
    "-n30",
    "-e16",
    "-q"
  ],
  // Define the location of ChkTeX executive file. This command will be joint with `latex-workshop.linting.chktex.exec.args` and required arguments to form a complete command of ChkTeX.
  "latex-workshop.linting.chktex.exec.path": "chktex",
  // Defines the delay in milliseconds for linter to wait after stopped typing. This config only matters when `latex-workshop.linting.run` is set to `onType`.
  "latex-workshop.linting.delay": 500,
  // Enable linting LaTeX with `lacheck`. Check `latex-workshop.linting.run` to control when `lacheck` is executed if this config is set to `true.
  "latex-workshop.linting.lacheck.enabled": false,
  // Define the location of LaCheck executive file.
  "latex-workshop.linting.lacheck.exec.path": "lacheck",
  // When LaTeX should be linted.
  // - `onSave`: the whole LaTeX project will be linted upon saving.
  // - `onType`: the active document will be linted when input is stopped for a period of time defined in `latex-workshop.linting.delay`. It also implies `onSave`.
  //  - onSave: Lint the whole LaTeX project upon saving
  //  - onType: Lint the active document when input is stopped
  "latex-workshop.linting.run": "onSave",
  // [Experimental] Render a cursor on the math preview panel. **This feature is experimental. If you report an issue to us on this feature, we will not fix it. We will not accept any pull requests.**
  "latex-workshop.mathpreviewpanel.cursor.enabled": false,
  // The editor group in which to open the math preview panel.
  //  - current: Use the current editor group
  //  - left: Put the math preview panel in a new group on the left of the current one
  //  - right: Put the math preview panel in a new group on the right of the current one
  //  - above: Put the math preview panel in a new group above the current one
  //  - below: Put the math preview panel in a new group below the current one
  "latex-workshop.mathpreviewpanel.editorGroup": "below",
  // Show badbox information in the problems panel.
  "latex-workshop.message.badbox.show": "both",
  // Exclude biber log messages matching the given regexp from the problems panel.
  "latex-workshop.message.biberlog.exclude": [],
  // Exclude bibtex log messages matching the given regexp from the problems panel.
  "latex-workshop.message.bibtexlog.exclude": [],
  // Convert the encoding of filenames if necessary when displaying them in the problems panel.
  "latex-workshop.message.convertFilenameEncoding": true,
  // Display error messages in popup notifications.
  "latex-workshop.message.error.show": true,
  // Display information messages in popup notifications.
  "latex-workshop.message.information.show": false,
  // Exclude latex log messages matching the given regexp from the problems panel.
  "latex-workshop.message.latexlog.exclude": [],
  // Display LaTeX Workshop debug log in output panel. This property defines whether LaTeX Workshop will output its debug log to the log panel.
  "latex-workshop.message.log.show": true,
  // Display warning messages in popup notifications.
  "latex-workshop.message.warning.show": true,
  // Enable AST based smart selection. Command ids are `editor.action.smartSelect.expand` and `editor.action.smartSelect.shrink`.
  "latex-workshop.selection.smart.latex.enabled": true,
  // Enable the LaTeX contextual menu. This menu is deactivated as it is available through the new LaTeX badge. Just set this variable to `true` to recover the menu.
  "latex-workshop.showContextMenu": false,
  // Execute forward synctex at cursor position after compiling LaTeX project.
  "latex-workshop.synctex.afterBuild.enabled": false,
  // Define the visibility and style of SyncTeX indicator after a forward SyncTeX in the PDF viewer.
  //  - none: Hide the indicator.
  //  - circle: Indicates a possible location with a red circular SyncTeX indicator.
  //  - rectangle: Indicates the whole line selected in the TeX file with a red rectangular SyncTeX indicator. Only valid when SyncTeX binary is executable.
  "latex-workshop.synctex.indicator": "rectangle",
  // Define the location of SyncTeX executive file. Additional arguments, e.g., synctex modes and position of click, will be appended to this command.
  "latex-workshop.synctex.path": "synctex",
  // TeXCount arguments to count words in the LaTeX documents of the entire project from the root file, or the current document. Arguments must be in separate strings in the array. Additional arguments, i.e., `-merge %DOC%` for the project and the current document path for counting current file will be appended when constructing the command.
  "latex-workshop.texcount.args": [],
  // When to call `texcount`. Default is never.
  //  - onSave: Count words in the current document
  //  - never: Never automatically call texcount
  "latex-workshop.texcount.autorun": "never",
  // The minimal time interval between two consecutive runs of `texcount` in milliseconds when `latex-workshop.texcount.autorun` is set to `onSave`.
  "latex-workshop.texcount.interval": 1000,
  // Define the location of TeXCount executive file/script. This command will be joint with `latex-workshop.texcount.args` and required arguments to form a complete command of TeXCount.
  "latex-workshop.texcount.path": "texcount",
  // Texdoc arguments to see a package documentation. Arguments must be in separate strings in the array. The package name is automatically appended to the arguments.
  "latex-workshop.texdoc.args": [
    "--view"
  ],
  // Define the location of the `texdoc` executable. This command is used to show a package documentation.
  "latex-workshop.texdoc.path": "texdoc",
  // Auto focus the LaTeX view when switching from non-tex to tex files. This will cause the view to appear consistently upon activating the extension.
  "latex-workshop.view.autoFocus.enabled": false,
  // The names of the commands to be shown in the outline/structure views. The commands must be called in the form `\commandname{arg}`.
  "latex-workshop.view.outline.commands": [
    "label"
  ],
  // Show the float caption in the outline/structure views.
  "latex-workshop.view.outline.floats.caption.enabled": true,
  // Show the floating objects (figures and tables) in the outline/structure views.
  "latex-workshop.view.outline.floats.enabled": true,
  // Show the float number in the outline/structure views.
  "latex-workshop.view.outline.floats.number.enabled": true,
  // Whether scrolling the editor will also reveal corresponding structure items.
  "latex-workshop.view.outline.follow.editor": true,
  // Show the sectioning numbers in the outline/structure views.
  "latex-workshop.view.outline.numbers.enabled": true,
  // The section names of LaTeX outline hierarchy. It is also used by the folding mechanism. This property is an array of case-sensitive strings in the order of document structure hierarchy. For multiple tags in the same level, separate the tags with `|` as delimiters, e.g., `section|alternative`.
  "latex-workshop.view.outline.sections": [
    "part",
    "chapter",
    "section",
    "subsection",
    "subsubsection"
  ],
  // Whether clicking on structure items will also call synctex to scroll the PDF viewer to the corresponding location.
  "latex-workshop.view.outline.sync.viewer": false,
  // The background color of the viewer 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.backgroundColor": "#ffffff",
  // The border color of the PDF pages 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageBorderColor": "lightgrey",
  // The background color of the PDF document 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageColorsBackground": "",
  // The foreground color of the PDF document 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageColorsForeground": "",
  // The background color of the viewer 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.backgroundColor": "#ffffff",
  // The border color of the PDF pages 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageBorderColor": "lightgrey",
  // The background color of the PDF document 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageColorsBackground": "",
  // The foreground color of the PDF document 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageColorsForeground": "",
  // The arguments for `latex-workshop.view.pdf.external.synctex.args` when forward synctex to external viewer. %LINE% is the line number, %PDF% is the placeholder for the absolute path to the generated PDF file, and %TEX% is the source LaTeX file path with `.tex` extension from which syncTeX is fired.
  "latex-workshop.view.pdf.external.synctex.args": [
    "%LINE%",
    "%PDF%",
    "%TEX%"
  ],
  // The command to execute when forward synctex to external viewer. This function is not officially supported.
  "latex-workshop.view.pdf.external.synctex.command": "",
  // The arguments for `latex-workshop.view.pdf.external.viewer.command` when using external viewer. This function is not officially supported. %PDF% is the placeholder for the absolute path to the generated PDF file.
  "latex-workshop.view.pdf.external.viewer.args": [
    "%PDF%"
  ],
  // The command to execute when using external viewer. This function is not officially supported.
  "latex-workshop.view.pdf.external.viewer.command": "",
  // Define if the hand tool is enabled by default in the PDF viewer.
  "latex-workshop.view.pdf.hand": false,
  // Rebroadcasting KeyboardEvent on the internal viewers. If keyboard shortcuts on the internal viewer do not work well, change this setting.
  "latex-workshop.view.pdf.internal.keyboardEvent": "auto",
  // Define the port to listen on for communicating with the internal viewer. The default value "0" means the port is chosen randomly by the application. If this config is set, only one Visual Studio Code instance with this extension active can be opened. Otherwise, a port conflict may happen.
  "latex-workshop.view.pdf.internal.port": 0,
  // Which keybinding to use for the internal viewer for reverse synctex. `ctrl`/`cmd` + click (default) or double click.
  "latex-workshop.view.pdf.internal.synctex.keybinding": "ctrl-click",
  // Define the CSS invert filter level of the PDF viewer. This config can invert the color of PDF. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invert": 0,
  // Define the CSS brightness filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 2.
  "latex-workshop.view.pdf.invertMode.brightness": 1,
  // Enable the CSS invert filter.
  //  - auto: Enable the invert filter when using a dark theme.
  //  - always: Always enable invert filter.
  //  - compat: Enable the invert filter only if `invert > 0`.
  //  - never: Disable the invert filter
  "latex-workshop.view.pdf.invertMode.enabled": "compat",
  // Define the CSS grayscale filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invertMode.grayscale": 0.6,
  // Define the CSS hue-rotate filter angle of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 360.
  "latex-workshop.view.pdf.invertMode.hueRotate": 180,
  // Define the CSS sepia filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invertMode.sepia": 0,
  // PDF viewer used for [View on PDF] link on \ref.
  "latex-workshop.view.pdf.ref.viewer": "auto",
  // The transition animation between PDF page reloads.
  //  - none: No transition animation
  //  - fade: Fading transition animation
  "latex-workshop.view.pdf.reload.transition": "fade",
  // The default scroll mode of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `0` (vertical), `1`(horizontal), `2` (wrapped), `3` (page).
  "latex-workshop.view.pdf.scrollMode": 0,
  // The default state of the PDF viewer sidebar. Possible values are `off` (the sidebar is closed), `on` (the sidebar is opened), and `persist` (the on/off state is remembered across PDF viewer sessions).
  "latex-workshop.view.pdf.sidebar.open": "off",
  // The default view of the PDF viewer sidebar. Possible values are `thumbnails`, `outline`, `attachments`, `layers`, and `persist` (the last used view is remembered across PDF viewer sessions).
  "latex-workshop.view.pdf.sidebar.view": "thumbnails",
  // The default spread mode of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `0` (none), `1` (odd) and `2` (even).
  "latex-workshop.view.pdf.spreadMode": 0,
  // The editor group in which to open the tab viewer.
  //  - current: Use the current editor group
  //  - left: Put the viewer tab in a new group on the left of the current one
  //  - right: Put the viewer tab in a new group on the right of the current one
  //  - above: Put the viewer tab in a new group above the current one
  //  - below: Put the viewer tab in a new group below the current one
  "latex-workshop.view.pdf.tab.editorGroup": "right",
  // The timeout delay in second to hide the toolbar. Setting this value to zero will disable toolbar hiding.
  "latex-workshop.view.pdf.toolbar.hide.timeout": 1,
  // The default trim percentage of the PDF viewer. This should be an integer between 0 and 99, indicating the portion of PDF to be trimmed. For example, setting the value to `10` means that 10% of the height and width of PDF pages are trimmed off.
  "latex-workshop.view.pdf.trim": 0,
  // The default PDF viewer.
  //  - browser: Open PDF with the default web browser.
  //  - tab: Open PDF with the built-in tab viewer.
  //  - external: [Experimental] Open PDF with the external viewer set in "View > Pdf > External: command".
  //  - legacy: [Legacy] Open PDF with the built-in tab viewer with vscode WebView API.
  //  - singleton: [Legacy] Open PDF with the built-in tab viewer with vscode WebView API, reveal existing one if possible.
  "latex-workshop.view.pdf.viewer": "tab",
  // The default zoom level of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `auto`, `page-actual`, `page-fit`, `page-width`, and one-based scale values (e.g., 0.5 for 50%, 2.0 for 200%).
  "latex-workshop.view.pdf.zoom": "auto",
  // Allow LeetCode to report anonymous usage data to improve the product.
  "leetcode.allowReportData": true,
  // Add difficulty badge and colorize problems files in explorer tree.
  "leetcode.colorizeProblems": true,
  // Default language for solving the problems.
  "leetcode.defaultLanguage": "",
  // Customize the shortcuts in editors.
  //  - submit: Submit your answer to LeetCode.
  //  - test: Test your answer with customized test cases.
  //  - star: Star or unstar the current problem.
  //  - solution: Show the top voted solution for the current problem.
  //  - description: Show the problem description page.
  "leetcode.editor.shortcuts": [
    "submit",
    "test"
  ],
  // Determine whether to group all webview pages into the second editor column when solving problems.
  "leetcode.enableSideMode": true,
  // Show the LeetCode status bar or not.
  "leetcode.enableStatusBar": true,
  // Endpoint of the user account.
  "leetcode.endpoint": "leetcode",
  // The output folder and filename to save the problem files.
  "leetcode.filePath": {
    "default": {
      "filename": "${id}.${kebab-case-name}.${ext}",
      "folder": ""
    }
  },
  // Hide solved problems.
  "leetcode.hideSolved": false,
  // Show a hint to configure commands key binding.
  "leetcode.hint.commandShortcut": true,
  // Show a hint to enable comment description in solution code file.
  "leetcode.hint.commentDescription": true,
  // Show a hint to change webview appearance through markdown config.
  "leetcode.hint.configWebviewMarkdown": true,
  // Show a hint to set the default language.
  "leetcode.hint.setDefaultLanguage": true,
  // The Node.js executable path. for example, C:\Program Files\nodejs\node.exe
  "leetcode.nodePath": "node",
  // Sorting strategy for problems list.
  "leetcode.problems.sortStrategy": "None",
  // This setting will be deprecated in 0.17.0, please use 'leetcode.showDescription' instead
  // [Deprecated] Include problem description in comments.
  "leetcode.showCommentDescription": false,
  // Specify where to show the description.
  //  - In Webview: Show the problem description in a new webview window
  //  - In File Comment: Show the problem description in the file's comment
  "leetcode.showDescription": "In Webview",
  // Use endpoint's translation (if available)
  "leetcode.useEndpointTranslation": true,
  // Use the Windows Subsystem for Linux.
  "leetcode.useWsl": false,
  // The path of the workspace folder to store the problem files.
  "leetcode.workspaceFolder": "",
  // Insert semicolon at end of line when completing CSS properties.
  "less.completion.completePropertyWithSemicolon": true,
  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "less.completion.triggerPropertyValueCompletion": true,
  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "less.format.braceStyle": "collapse",
  // Enable/disable default LESS formatter.
  "less.format.enable": true,
  // Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
  "less.format.maxPreserveNewLines": null,
  // Separate rulesets by a blank line.
  "less.format.newlineBetweenRules": true,
  // Separate selectors with a new line.
  "less.format.newlineBetweenSelectors": true,
  // Whether existing line breaks before rules and declarations should be preserved.
  "less.format.preserveNewLines": true,
  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "less.format.spaceAroundSelectorSeparator": false,
  // Show property and value documentation in LESS hovers.
  "less.hover.documentation": true,
  // Show references to MDN in LESS hovers.
  "less.hover.references": true,
  // Invalid number of parameters.
  "less.lint.argumentsInColorFunction": "error",
  // Do not use `width` or `height` when using `padding` or `border`.
  "less.lint.boxModel": "ignore",
  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "less.lint.compatibleVendorPrefixes": "ignore",
  // Do not use duplicate style definitions.
  "less.lint.duplicateProperties": "ignore",
  // Do not use empty rulesets.
  "less.lint.emptyRules": "warning",
  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "less.lint.float": "ignore",
  // `@font-face` rule must define `src` and `font-family` properties.
  "less.lint.fontFaceProperties": "warning",
  // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
  "less.lint.hexColorLength": "error",
  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "less.lint.idSelector": "ignore",
  // IE hacks are only necessary when supporting IE7 and older.
  "less.lint.ieHack": "ignore",
  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "less.lint.important": "ignore",
  // Import statements do not load in parallel.
  "less.lint.importStatement": "ignore",
  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "less.lint.propertyIgnoredDueToDisplay": "warning",
  // The universal selector (`*`) is known to be slow.
  "less.lint.universalSelector": "ignore",
  // Unknown at-rule.
  "less.lint.unknownAtRules": "warning",
  // Unknown property.
  "less.lint.unknownProperties": "warning",
  // Unknown vendor specific property.
  "less.lint.unknownVendorSpecificProperties": "ignore",
  // A list of properties that are not validated against the `unknownProperties` rule.
  "less.lint.validProperties": [],
  // When using a vendor-specific prefix, also include the standard property.
  "less.lint.vendorPrefix": "warning",
  // No unit for zero needed.
  "less.lint.zeroUnits": "ignore",
  // Enables or disables all validations.
  "less.validate": true,
  // Configures the path and file name of files created by copy/paste or drag and drop. This is a map of globs that match against a Markdown document path to the destination path where the new file should be created.
  //
  // The destination path may use the following variables:
  //
  // - `${documentDirName}` — Absolute parent directory path of the Markdown document, e.g. `/Users/me/myProject/docs`.
  // - `${documentRelativeDirName}` — Relative parent directory path of the Markdown document, e.g. `docs`. This is the same as `${documentDirName}` if the file is not part of a workspace.
  // - `${documentFileName}` — The full filename of the Markdown document, e.g. `README.md`.
  // - `${documentBaseName}` — The basename of the Markdown document, e.g. `README`.
  // - `${documentExtName}` — The extension of the Markdown document, e.g. `md`.
  // - `${documentFilePath}` — Absolute path of the Markdown document, e.g. `/Users/me/myProject/docs/README.md`.
  // - `${documentRelativeFilePath}` — Relative path of the Markdown document, e.g. `docs/README.md`. This is the same as `${documentFilePath}` if the file is not part of a workspace.
  // - `${documentWorkspaceFolder}` — The workspace folder for the Markdown document, e.g. `/Users/me/myProject`. This is the same as `${documentDirName}` if the file is not part of a workspace.
  // - `${fileName}` — The file name of the dropped file, e.g. `image.png`.
  // - `${fileExtName}` — The extension of the dropped file, e.g. `png`.
  // - `${unixTime}` — The current Unix timestamp in milliseconds.
  // - `${isoTime}` — The current time in ISO 8601 format, e.g. '2025-06-06T08:40:32.123Z'.
  "markdown.copyFiles.destination": {},
  // Controls if files created by drop or paste should overwrite existing files.
  //  - nameIncrementally: If a file with the same name already exists, append a number to the file name, for example: `image.png` becomes `image-1.png`.
  //  - overwrite: If a file with the same name already exists, overwrite it.
  "markdown.copyFiles.overwriteBehavior": "nameIncrementally",
  // Controls if files outside of the workspace that are dropped into a Markdown editor should be copied into the workspace.
  //
  // Use `markdown.copyFiles.destination` to configure where copied dropped files should be created
  //  - mediaFiles: Try to copy external image and video files into the workspace.
  //  - never: Do not copy external files into the workspace.
  "markdown.editor.drop.copyIntoWorkspace": "mediaFiles",
  // Enable dropping files into a Markdown editor while holding Shift. Requires enabling `editor.dropIntoEditor.enabled`.
  //  - always: Always insert Markdown links.
  //  - smart: Smartly create Markdown links by default when not dropping into a code block or other special element. Use the drop widget to switch between pasting as plain text or as Markdown links.
  //  - never: Never create Markdown links.
  "markdown.editor.drop.enabled": "smart",
  // Snippet used when adding audio to Markdown. This snippet can use the following variables:
  // - `${src}` — The resolved path of the audio  file.
  // - `${title}` — The title used for the audio. A snippet placeholder will automatically be created for this variable.
  "markdown.editor.filePaste.audioSnippet": "<audio controls src=\"${src}\" title=\"${title}\"></audio>",
  // Controls if files outside of the workspace that are pasted into a Markdown editor should be copied into the workspace.
  //
  // Use `markdown.copyFiles.destination` to configure where copied files should be created.
  //  - mediaFiles: Try to copy external image and video files into the workspace.
  //  - never: Do not copy external files into the workspace.
  "markdown.editor.filePaste.copyIntoWorkspace": "mediaFiles",
  // Enable pasting files into a Markdown editor to create Markdown links. Requires enabling `editor.pasteAs.enabled`.
  //  - always: Always insert Markdown links.
  //  - smart: Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
  //  - never: Never create Markdown links.
  "markdown.editor.filePaste.enabled": "smart",
  // Snippet used when adding videos to Markdown. This snippet can use the following variables:
  // - `${src}` — The resolved path of the video file.
  // - `${title}` — The title used for the video. A snippet placeholder will automatically be created for this variable.
  "markdown.editor.filePaste.videoSnippet": "<video controls src=\"${src}\" title=\"${title}\"></video>",
  // Controls if Markdown links are created when URLs are pasted into a Markdown editor. Requires enabling `editor.pasteAs.enabled`.
  //  - always: Always insert Markdown links.
  //  - smart: Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
  //  - smartWithSelection: Smartly create Markdown links by default when you have selected text and are not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
  //  - never: Never create Markdown links.
  "markdown.editor.pasteUrlAsFormattedLink.enabled": "smartWithSelection",
  // Enable/disable a paste option that updates links and reference in text that is copied and pasted between Markdown editors.
  //
  // To use this feature, after pasting text that contains updatable links, just click on the Paste Widget and select `Paste and update pasted links`.
  "markdown.editor.updateLinksOnPaste.enabled": true,
  // Controls where links in Markdown files should be opened.
  //  - currentGroup: Open links in the active editor group.
  //  - beside: Open links beside the active editor.
  "markdown.links.openLocation": "currentGroup",
  // Enable/disable rendering math in the built-in Markdown preview.
  "markdown.math.enabled": true,
  // A collection of custom macros. Each macro is a key-value pair where the key is a new command name and the value is the expansion of the macro.
  "markdown.math.macros": {},
  // Enable highlighting link occurrences in the current document.
  "markdown.occurrencesHighlight.enabled": false,
  // Controls if file extensions (for example `.md`) are added or not for links to Markdown files. This setting is used when file paths are added by tooling such as path completions or file renames.
  //  - auto: For existing paths, try to maintain the file extension style. For new paths, add file extensions.
  //  - includeExtension: Prefer including the file extension. For example, path completions to a file named `file.md` will insert `file.md`.
  //  - removeExtension: Prefer removing the file extension. For example, path completions to a file named `file.md` will insert `file` without the `.md`.
  "markdown.preferredMdPathExtensionStyle": "auto",
  // Sets how line-breaks are rendered in the Markdown preview. Setting it to `true` creates a `<br>` for newlines inside paragraphs.
  "markdown.preview.breaks": false,
  // Double-click in the Markdown preview to switch to the editor.
  "markdown.preview.doubleClickToSwitchToEditor": true,
  // Controls the font family used in the Markdown preview.
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
  // Controls the font size in pixels used in the Markdown preview.
  "markdown.preview.fontSize": 14,
  // Controls the line height used in the Markdown preview. This number is relative to the font size.
  "markdown.preview.lineHeight": 1.6,
  // Convert URL-like text to links in the Markdown preview.
  "markdown.preview.linkify": true,
  // Mark the current editor selection in the Markdown preview.
  "markdown.preview.markEditorSelection": true,
  // Controls how links to other Markdown files in the Markdown preview should be opened.
  //  - inPreview: Try to open links in the Markdown preview.
  //  - inEditor: Try to open links in the editor.
  "markdown.preview.openMarkdownLinks": "inPreview",
  // When a Markdown preview is scrolled, update the view of the editor.
  "markdown.preview.scrollEditorWithPreview": true,
  // When a Markdown editor is scrolled, update the view of the preview.
  "markdown.preview.scrollPreviewWithEditor": true,
  // Enable some language-neutral replacement and quotes beautification in the Markdown preview.
  "markdown.preview.typographer": false,
  // Controls the logging level of the Markdown language server.
  "markdown.server.log": "off",
  // A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
  "markdown.styles": [],
  // Enable path suggestions while writing links in Markdown files.
  "markdown.suggest.paths.enabled": true,
  // Enable suggestions for headers in other Markdown files in the current workspace. Accepting one of these suggestions inserts the full path to header in that file, for example: `[link text](/path/to/file.md#header)`.
  //  - never: Disable workspace header suggestions.
  //  - onDoubleHash: Enable workspace header suggestions after typing `#` in a path, for example: `[link text](#`.
  //  - onSingleOrDoubleHash: Enable workspace header suggestions after typing either `#` or `#` in a path, for example: `[link text](#` or `[link text](#`.
  "markdown.suggest.paths.includeWorkspaceHeaderCompletions": "onDoubleHash",
  // Traces the communication between VS Code and the Markdown language server.
  "markdown.trace.server": "off",
  // Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `markdown.updateLinksOnFileMove.include` to configure which files trigger link updates.
  //  - prompt: Prompt on each file move.
  //  - always: Always update links automatically.
  //  - never: Never try to update link and don't prompt.
  "markdown.updateLinksOnFileMove.enabled": "never",
  // Enable updating links when a directory is moved or renamed in the workspace.
  "markdown.updateLinksOnFileMove.enableForDirectories": true,
  // Glob patterns that specifies files that trigger automatic link updates. See `markdown.updateLinksOnFileMove.enabled` for details about this feature.
  "markdown.updateLinksOnFileMove.include": [
    "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
    "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
  ],
  // Validate duplicated definitions in the current file.
  "markdown.validate.duplicateLinkDefinitions.enabled": "warning",
  // Enable all error reporting in Markdown files.
  "markdown.validate.enabled": false,
  // Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.validate.enabled`.
  "markdown.validate.fileLinks.enabled": "warning",
  // Validate the fragment part of links to headers in other files in Markdown files, for example: `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.validate.fragmentLinks.enabled` by default.
  "markdown.validate.fileLinks.markdownFragmentLinks": "inherit",
  // Validate fragment links to headers in the current Markdown file, for example: `[link](#header)`. Requires enabling `markdown.validate.enabled`.
  "markdown.validate.fragmentLinks.enabled": "warning",
  // Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
  "markdown.validate.ignoredLinks": [],
  // Validate reference links in Markdown files, for example: `[link][ref]`. Requires enabling `markdown.validate.enabled`.
  "markdown.validate.referenceLinks.enabled": "warning",
  // Validate link definitions that are unused in the current file.
  "markdown.validate.unusedLinkDefinitions.enabled": "hint",
  // Start playing videos on mute automatically.
  "mediaPreview.video.autoPlay": false,
  // Loop videos over again automatically.
  "mediaPreview.video.loop": false,
  // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
  "merge-conflict.autoNavigateNextConflict.enabled": false,
  // Create a CodeLens for merge conflict blocks within editor.
  "merge-conflict.codeLens.enabled": true,
  // Create decorators for merge conflict blocks within editor.
  "merge-conflict.decorators.enabled": true,
  // Controls where the diff view should be opened when comparing changes in merge conflicts.
  //  - Current: Open the diff view in the current editor group.
  //  - Beside: Open the diff view next to the current editor group.
  //  - Below: Open the diff view below the current editor group.
  "merge-conflict.diffViewPosition": "Current",
  // The authentication implementation to use for signing in with a Microsoft account.
  //
  // *NOTE: The `classic` implementation is deprecated and will be removed, along with this setting, in a future release. If only the `classic` implementation works for you, please [open an issue](command:workbench.action.openIssueReporter) and explain what you are trying to log in to.*
  //  - msal: Use the Microsoft Authentication Library (MSAL) to sign in with a Microsoft account.
  //  - classic: (deprecated) Use the classic authentication flow to sign in with a Microsoft account.
  "microsoft-authentication.implementation": "msal",
  // The custom configuration for the Sovereign Cloud to use with the Microsoft Sovereign Cloud authentication provider. This along with setting `microsoft-sovereign-cloud.environment` to `custom` is required to use this feature.
  "microsoft-sovereign-cloud.customEnvironment": {},
  // The Sovereign Cloud to use for authentication. If you select `custom`, you must also set the `microsoft-sovereign-cloud.customEnvironment` setting.
  //  - ChinaCloud: Azure China
  //  - USGovernment: Azure US Government
  //  - custom: A custom Microsoft Sovereign Cloud
  "microsoft-sovereign-cloud.environment": "",
  // If set, a message section is shown with some useful links.
  "msg.dbEditor.connectionBrowser.showGreeting": true,
  // If set, folders are sorted before connections in the connection overview.
  "msg.dbEditor.connectionBrowser.sortFoldersFirst": false,
  // Select the initial language for new DB editors.
  //  - sql: Supported in all code editors
  //  - javascript: Supported in all code editors
  //  - typescript: Supported only in DB editors
  "msg.dbEditor.startLanguage": "sql",
  // When set, keywords shown in code-completion popups appear in all uppercase letters and are inserted as such in the SQL code editors.
  "msg.dbEditor.upperCaseKeywords": true,
  // Determines if notebooks in the DB editor show a minimap. Only has an effect when mini maps are globally enabled
  "msg.dbEditor.useMinimap": false,
  // Sets different verbosity levels for the communication log between the extension and MySQL Shell. To see this log, open the OUTPUT channel MySQL Shell for VS Code.
  //  - NONE: Switch logging off, entirely
  //  - ERROR: Show only errors
  //  - WARNING: Show errors and warnings
  //  - INFO: Show errors, warnings, and other normal information
  //  - DEBUG: Used for problem analysis. Prints additional information
  //  - DEBUG2: Used for problem analysis. Not used currently
  //  - DEBUG3: Used for problem analysis. Print everything, which may include security related things like passwords, connection tokens, and so on.
  "msg.debugLog.level": "INFO",
  // The default version to be used for MySQL language support, if no version is available.
  "msg.editor.dbVersion": "8.1.0",
  // Specify the name (title) of a DB connection to be used when running embedded SQL from a standard text editor and no connection is open yet. Leave empty to select a connection.
  "msg.editor.defaultDbConnection": "",
  // When set, a double click on a result cell starts editing the cell, otherwise editing a cell is only possible if the edit mode is activated.
  "msg.editor.editOnDoubleClick": true,
  // When set to true, normally invisible characters (like space or tabulator) are displayed too.
  "msg.editor.showHidden": false,
  // Determines if code editors should show a minimap, instead of the plain scrollbar, for better navigation.
  "msg.editor.showMinimap": true,
  // The default SQL mode to be used for MySQL language support, if mode information is not available.
  "msg.editor.sqlMode": "",
  // If this option is set to true, execution of scripts stops if an error occurs. Otherwise, the script execution continues with the next statement.
  "msg.editor.stopOnErrors": false,
  // Select one of the sets to be used to mark code block and results in mixed language code editors.
  //  - standard: No special decoration for editor rows
  //  - line: Shows a solid marker for editor rows
  //  - alternative: Uses a hatch pattern with different colors to separate editor content and result areas
  "msg.editor.theming.decorationSet": "standard",
  // Fixed width (in pixels) applied to wide columns containing long unbroken text, preventing excessive stretching. Requires reopening the view to take effect.
  "msg.editor.wideColumnsWidth": 800,
  // Determines how long lines should be wrapped automatically by the editor.
  //  - off: Lines never wrap
  //  - on: Lines wrap at the viewport width
  //  - wordWrapColumn: Lines wrap at `Word Wrap Column`
  //  - bounded: Lines wrap at the minimum of viewport width or `Word Wrap Column`
  "msg.editor.wordWrap": "on",
  // Controls the column of the editor to wrap long lines when Code Editor: Word Wrap is `wordWrapColumn` or `bounded`.
  "msg.editor.wordWrapColumn": 120,
  // Enables an icon in the editor menu to display the MRS Script Helpers icon.
  "msg.mrs.displayScriptHelpers": false,
  // Enforce the usage of HTTPS when connecting to MySQL Shell
  //
  // _This extension relies on a MySQL Shell process serving its user interface and data. To protect this flow of sensitive data it is highly recommended to use HTTPS encryption when other users have access to the machine that is running MySQL Shell. This requires MySQL Shell's rootCA.crt certificate to be installed on the machine that MySQL Shell is running. The [Welcome Wizard](command:msg.runWelcomeWizard) is used to perform this task._
  //
  // The certificate can later be found at
  // - ~/.mysqlsh-gui/plugin_data/gui_plugin/web_certs/rootCA.crt (macOS, Linux)
  // - %appdata%/MySQL/mysqlsh-gui/plugin_data/gui_plugin/web_certs/rootCA.crt (Windows)
  //
  // When using a VS Code ssh-remote development session, please note that this certificate also needs to be installed on your local development machine.
  //
  // 1. Download the certificate to your local machine, e.g. with scp
  // 2. Install the certificate locally, e.g. with Keychain Access on macOS. Read more about this [here](https://dev.mysql.com/doc/mysql-shell-for-vs-code/en/certificate-handling.html)
  // 3. Restart VS Code after installing the certificate
  //
  // Please [reload VS Code](command:workbench.action.reloadWindow) after changing this setting.
  "msg.shell.enforceHttps": true,
  // Specify a URL to be used to connect to a running MySQL instance.
  //
  // Leave empty to use an automatically launched local MySQL Shell instance.
  //
  // Use the `Connect to External MySQL Shell Process` menu item in the DB connections section title menu to switch between shell connections.
  "msg.shell.externalUrl": "",
  // Display a warning panel when not using HTTPS to communicate with MySQL Shell.
  //
  // Please [reload VS Code](command:workbench.action.reloadWindow) after changing this setting.
  "msg.shell.showUnsecuredConnectionWarning": true,
  // Connect to External MySQL Shell Process.
  "msg.shell.useExternal": false,
  // Select the initial language for a new shell session.
  //  - javascript: Supported in all code editors
  //  - python: Supported only in shell session editors
  //  - sql: Supported in all code editors
  "msg.shellSession.startLanguage": "javascript",
  // Determines the size of one page in a result set, but has no effect if a top-level LIMIT clause is specified in the query. Set to 0 to disable auto adding a LIMIT clause and return all records as single page.
  "msg.sql.limitRowCount": 1000,
  // Determines the number of result records that are sent in a single response from the backend.
  "msg.sql.rowPacketSize": 1000,
  // Open the DB Connections Overview when selecting the MySQL Shell for VS Code extension icon in the Activity Bar for the first time after VS Code startup.
  "msg.startup.showDbConnectionsTab": true,
  // Where to place the new tab when opening a DB connection.
  //  - Active: In the currently active editor group
  //  - Beside Right: In editor group beside the active one
  //  - Beside Bottom: In the editor group beneath the active one
  "msg.tabPosition.newConnection": "Active",
  // Where to place the new tab when running embedded SQL in a DB connection.
  //  - Active: In the currently active editor group
  //  - Beside Right: In editor group beside the active one
  //  - Beside Bottom: In the editor group beneath the active one
  "msg.tabPosition.newConnectionWithEmbeddedSql": "Beside Bottom",
  // Where to place the new tab when opening a MySQL Shell Console.
  //  - Active: In the currently active editor group
  //  - Beside Right: In editor group beside the active one
  //  - Beside Bottom: In the editor group beneath the active one
  "msg.tabPosition.newShellConsole": "Active",
  // Describes the highest number of waiting tasks for a free background worker. An error is thrown if this number is exceeded, indicating that the worker pool is overloaded and can no longer cope with incoming work.
  "msg.workers.maxPendingTaskCount": 100,
  // The number of workers that are at most active.
  "msg.workers.maxWorkerCount": 3,
  // The number of workers that are always available. Spinning up a worker can take a few seconds, so in order to avoid extra wait time it is advisable to keep at least 2 workers running all the time.
  "msg.workers.minWorkerCount": 3,
  // Specifies the number of seconds to pass until the oldest inactive worker is removed. Has no effect if the current number of active workers falls below the minimal worker count.
  "msg.workers.removeIdleTime": 60,
  // Controls whether npm scripts should be automatically detected.
  "npm.autoDetect": "on",
  // Enable running npm scripts contained in a folder from the Explorer context menu.
  "npm.enableRunFromFolder": false,
  // The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
  // Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
  "npm.enableScriptExplorer": false,
  // Configure glob patterns for folders that should be excluded from automatic script detection.
  "npm.exclude": "",
  // Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
  "npm.fetchOnlinePackageInfo": true,
  // The package manager used to install dependencies.
  //  - auto: Auto-detect which package manager to use based on lock files and installed package managers.
  //  - npm: Use npm as the package manager.
  //  - yarn: Use yarn as the package manager.
  //  - pnpm: Use pnpm as the package manager.
  //  - bun: Use bun as the package manager.
  "npm.packageManager": "auto",
  // Run npm commands with the `--silent` option.
  "npm.runSilent": false,
  // The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.
  "npm.scriptExplorerAction": "open",
  // An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
  "npm.scriptExplorerExclude": [],
  // Display hover with 'Run' and 'Debug' commands for scripts.
  "npm.scriptHover": true,
  // The script runner used to run scripts.
  //  - auto: Auto-detect which script runner to use based on lock files and installed package managers.
  //  - npm: Use npm as the script runner.
  //  - yarn: Use yarn as the script runner.
  //  - pnpm: Use pnpm as the script runner.
  //  - bun: Use bun as the script runner.
  //  - node: Use Node.js as the script runner.
  "npm.scriptRunner": "auto",
  // Toggle bold on some scopes
  "oneDarkPro.bold": false,
  // Code highlight color, read more [docs](https://binaryify.github.io/OneDark-Pro/#/?id=highlight-color-custom)
  "oneDarkPro.color": {
    "chalky": "",
    "coral": "",
    "dark": "",
    "deepRed": "",
    "error": "",
    "fountainBlue": "",
    "green": "",
    "invalid": "",
    "lightDark": "",
    "lightWhite": "",
    "malibu": "",
    "purple": "",
    "whiskey": ""
  },
  // Switch to different editor theme
  "oneDarkPro.editorTheme": "One Dark Pro",
  // Toggle italics on some scopes
  "oneDarkPro.italic": true,
  // Toggle Markdown style
  "oneDarkPro.markdownStyle": true,
  // Toggle vivid colors
  "oneDarkPro.vivid": false,
  // Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
  "php.suggest.basic": true,
  // Enable/disable built-in PHP validation.
  "php.validate.enable": true,
  // Points to the PHP executable.
  "php.validate.executablePath": null,
  // Whether the linter is run on save or on type.
  "php.validate.run": "onSave",
  // Include parentheses around a sole arrow function parameter.
  "prettier.arrowParens": "always",
  // Puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
  "prettier.bracketSameLine": false,
  // Controls the printing of spaces inside object literals.
  "prettier.bracketSpacing": true,
  // Path to the prettier configuration file.
  "prettier.configPath": "",
  // This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
  // A list of languages IDs to disable this extension on.
  "prettier.disableLanguages": [],
  // A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter.
  "prettier.documentSelectors": [],
  // Control whether Prettier formats quoted code embedded in the file.
  "prettier.embeddedLanguageFormatting": "auto",
  // Controls whether Prettier is enabled or not. Reload required.
  "prettier.enable": true,
  // Enable debug logs for troubleshooting.
  "prettier.enableDebugLogs": false,
  // Specify the end of line used by prettier.
  "prettier.endOfLine": "lf",
  // Try prettier's [new ternary formatting](https://github.com/prettier/prettier/pull/13183) before it becomes the default behavior.
  "prettier.experimentalTernaries": false,
  // Specify the global [whitespace sensitivity](https://prettier.io/blog/2018/11/07/1.15.0.html#whitespace-sensitive-formatting) for HTML files.
  // Valid options:
  // - `css` - Respect the default value of CSS `display` property.
  // - `strict` - Whitespaces are considered sensitive.
  // - `ignore` - Whitespaces are considered insensitive.
  "prettier.htmlWhitespaceSensitivity": "css",
  // Path to a `.prettierignore` file.
  "prettier.ignorePath": ".prettierignore",
  // Prettier can insert a special `@format` marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the `@format` marker.
  "prettier.insertPragma": false,
  // This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
  // Puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
  "prettier.jsxBracketSameLine": false,
  // Use single quotes instead of double quotes in JSX.
  "prettier.jsxSingleQuote": false,
  // Package manager is now automatically detected by VS Code. This setting is no longer used.
  // The package manager you use to install node modules.
  "prettier.packageManager": "npm",
  // Path to the `prettier` module, eg: `./node_modules/prettier`.
  "prettier.prettierPath": "",
  // Fit code within this line limit.
  "prettier.printWidth": 80,
  // (Markdown) wrap prose over multiple lines.
  "prettier.proseWrap": "preserve",
  // Change when properties in objects are quoted.
  // Valid options:
  // - `"as-needed"` - Only add quotes around object properties where required.
  // - `"consistent"` - If at least one property in an object requires quotes, quote all properties.
  // - `"preserve"` - Respect the input use of quotes in object properties.
  "prettier.quoteProps": "as-needed",
  // Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
  //
  // > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
  "prettier.requireConfig": false,
  // Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
  "prettier.requirePragma": false,
  // When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
  // > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
  "prettier.resolveGlobalModules": false,
  // Whether to add a semicolon at the end of every line.
  "prettier.semi": true,
  // Enforces single attribute per line in HTML, JSX, Vue and Angular.
  "prettier.singleAttributePerLine": false,
  // Use single instead of double quotes.
  "prettier.singleQuote": false,
  // Number of spaces it should use per tab.
  "prettier.tabWidth": 2,
  // Controls the printing of trailing commas wherever possible.
  // Valid options:
  // - `none` - No trailing commas
  // - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
  // - `all` - Trailing commas wherever possible (function arguments)
  "prettier.trailingComma": "es5",
  // Whether or not to take `.editorconfig` into account when parsing configuration. See the [`prettier.resolveConfig`](https://prettier.io/docs/en/api.html) docs for details.
  "prettier.useEditorConfig": true,
  // Indent lines with tabs.
  "prettier.useTabs": false,
  // Whether or not to indent the code inside `<script>` and `<style>` tags in Vue SFC files.
  "prettier.vueIndentScriptAndStyle": false,
  // This extension will process files in `node_modules`.
  "prettier.withNodeModules": false,
  // Path to the State Tool executable for ActiveState runtimes (version 0.36+).
  "python.activeStateToolPath": "state",
  // List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
  "python.autoComplete.extraPaths": [],
  // Path to the conda executable to use for activation (version 4.4+).
  "python.condaPath": "",
  // Show or hide Create Environment button in the editor for `requirements.txt` or other dependency files.
  "python.createEnvironment.contentButton": "hide",
  // Detect if environment creation is required for the current project
  "python.createEnvironment.trigger": "prompt",
  // Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See [here](https://aka.ms/AAfekmf) to understand when this is used
  "python.defaultInterpreterPath": "python",
  // Absolute path to a file containing environment variable definitions.
  "python.envFile": "${workspaceFolder}/.env",
  // Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
  "python.experiments.enabled": true,
  // List of experiments to opt into. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.
  "python.experiments.optInto": [],
  // List of experiments to opt out of. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.
  "python.experiments.optOutFrom": [],
  // Whether to install Python modules globally when not using an environment.
  "python.globalModuleInstallation": false,
  // Controls when to display information of selected interpreter in the status bar.
  //  - never: Never display information.
  //  - onPythonRelated: Only display information if Python-related files are opened.
  //  - always: Always display information.
  "python.interpreter.infoVisibility": "onPythonRelated",
  // Defines type of the language server.
  //  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
  //  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
  //  - Pylance: Use Pylance as a language server.
  //  - None: Disable language server capabilities.
  "python.languageServer": "Default",
  // [Experimental] Select implementation of environment locators. This is an experimental setting while we test native environment location.
  "python.locator": "native",
  // This setting is deprecated. Please use command `Developer: Set Log Level...` to set logging level.
  // The logging level the extension logs at, defaults to 'error'
  "python.logging.level": "error",
  // Set severity of missing packages in requirements.txt or pyproject.toml
  "python.missingPackage.severity": "Hint",
  // Path to the pipenv executable to use for activation.
  "python.pipenvPath": "pipenv",
  // Path to the pixi executable.
  "python.pixiToolPath": "pixi",
  // Path to the poetry executable.
  "python.poetryPath": "poetry",
  // Toggle Smart Send for the Python REPL. Smart Send enables sending the smallest runnable block of code to the REPL on Shift+Enter and moves the cursor accordingly.
  "python.REPL.enableREPLSmartSend": true,
  // Toggle to provide variables for the REPL variable view for the native REPL.
  "python.REPL.provideVariables": true,
  // Toggle to send code to Python REPL instead of the terminal on execution. Turning this on will change the behavior for both Smart Send and Run Selection/Line in the Context Menu.
  "python.REPL.sendToNativeREPL": false,
  // Activate Python Environment in the current Terminal on load of the Extension.
  "python.terminal.activateEnvInCurrentTerminal": false,
  // Activate Python Environment in all Terminals created.
  "python.terminal.activateEnvironment": true,
  // When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
  "python.terminal.executeInFileDir": false,
  // When launching a python terminal, whether to focus the cursor on the terminal.
  "python.terminal.focusAfterLaunch": false,
  // Python launch arguments to use when executing a file in the terminal.
  "python.terminal.launchArgs": [],
  // Enable [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) for the terminals running python. Shell integration enhances the terminal experience by enabling command decorations, run recent command, improving accessibility among other things.
  "python.terminal.shellIntegration.enabled": false,
  // Enable auto run test discovery when saving a test file.
  "python.testing.autoTestDiscoverOnSaveEnabled": true,
  // Glob pattern used to determine which files are used by autoTestDiscoverOnSaveEnabled.
  "python.testing.autoTestDiscoverOnSavePattern": "**/*.py",
  // Optional working directory for tests.
  "python.testing.cwd": null,
  // Port number used for debugging of tests.
  "python.testing.debugPort": 3000,
  // Prompt to configure a test framework if potential tests directories are discovered.
  "python.testing.promptToConfigure": true,
  // Arguments passed in. Each argument is a separate item in the array.
  "python.testing.pytestArgs": [],
  // Enable testing using pytest.
  "python.testing.pytestEnabled": false,
  // Path to pytest. You can use a custom version of pytest by modifying this setting to include the full path.
  "python.testing.pytestPath": "pytest",
  // Arguments passed in. Each argument is a separate item in the array.
  "python.testing.unittestArgs": [
    "-v",
    "-s",
    ".",
    "-p",
    "*test*.py"
  ],
  // Enable testing using unittest.
  "python.testing.unittestEnabled": false,
  // Enables the Python Environments extension. Requires window reload on change.
  "python.useEnvironmentsExtension": false,
  // Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
  "python.venvFolders": [],
  // Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
  "python.venvPath": "",
  // Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
  "redhat.telemetry.enabled": null,
  // Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.
  //  - peek: Show references in peek editor.
  //  - view: Show references in separate view.
  "references.preferredLocation": "peek",
  // Add line indentation around brackets(`{}`, `<>`, `[]`) in request body when pressing enter.
  "rest-client.addRequestBodyLineIndentationAroundBrackets": true,
  // Certificate paths for different hosts. The path can be absolute path or relative path(relative to workspace or current http file)
  "rest-client.certificates": {},
  // Decode escaped unicode characters in response body.
  "rest-client.decodeEscapedUnicodeCharacters": false,
  // If particular headers are omitted in request headers, these will be added as headers for each request.
  "rest-client.defaultHeaders": {
    "User-Agent": "vscode-restclient"
  },
  // Controls whether to add href link in previewed response for response whose size is larger than limit specified by `rest-client.largeResponseSizeLimitInMB`
  "rest-client.disableAddingHrefLinkForLargeResponse": true,
  // Controls whether to highlight response body for response whose size is larger than limit specified by `rest-client.largeResponseSizeLimitInMB`
  "rest-client.disableHighlightResonseBodyForLargeResponse": true,
  // Enable/disable custom variable references CodeLens in request file
  "rest-client.enableCustomVariableReferencesCodeLens": true,
  // Enable/disable sending request CodeLens in request file
  "rest-client.enableSendRequestCodeLens": true,
  // Send out anonymous usage data
  "rest-client.enableTelemetry": true,
  // Sets the environments and custom variables belongs to it, especially the special environment name '$shared' is used to create variables shared across all the individual environments (e.g., `{"$shared": {"version": "v1"}, "production": {"host": "api.example.com"}, "sandbox":{"host":"sandbox.api.example.com"}}`)
  "rest-client.environmentVariables": {
    "$shared": {}
  },
  // Excluded hosts when using using proxy settings
  "rest-client.excludeHostsForProxy": [],
  // Follow HTTP 3xx responses as redirects.
  "rest-client.followredirect": true,
  // Controls the font family used in the response preview
  "rest-client.fontFamily": null,
  // Controls the font size in pixels used in the response preview. When set to `0`, the value of `editor.fontSize` is used.
  "rest-client.fontSize": 0,
  // Controls the font weight used in the response preview
  "rest-client.fontWeight": "",
  // Form param encoding strategy for request body of `x-www-form-urlencoded`.
  //  - automatic: Detecting encoding or not automatically and do the encoding job if necessary
  //  - never: Treat provided request body as is, no encoding job will be applied
  //  - always: Use for the scenario that `automatic` option not working properly, e.g., some special characters(`+`) are not encoded correctly
  "rest-client.formParamEncodingStrategy": "automatic",
  // Set the response body size threshold of MB to identify whether a response is a so-called 'large response', only used when `rest-client.disableHighlightResonseBodyForLargeResponse` and/or `rest-client.disableAddingHrefLinkForLargeResponse` is set to true
  "rest-client.largeResponseBodySizeLimitInMB": 5,
  // The verbosity of logging in the REST output panel
  "rest-client.logLevel": "error",
  // Sets the custom mapping of mime type and file extension of saved response body (e.g., `{"application/atom+xml": "xml"}`)
  "rest-client.mimeAndFileExtensionMapping": {},
  // Response preview column option
  //  - current: Preview in the column of current request file
  //  - beside: previewing at the side of the current active column and the side direction depends on `workbench.editor.openSideBySideDirection` setting, either right or below the current editor column
  "rest-client.previewColumn": "beside",
  // Response preview output option
  //  - full: Response headers, body and status line
  //  - headers: Response headers and status line
  //  - body: Response body only
  //  - exchange: Whole HTTP exchange including both request and response
  "rest-client.previewOption": "full",
  // Preview response in untitled document if set to true, otherwise displayed in html view
  "rest-client.previewResponseInUntitledDocument": false,
  // Preview response panel will take focus after receiving response.
  "rest-client.previewResponsePanelTakeFocus": true,
  // Remember cookies for subsequent requests
  "rest-client.rememberCookiesForSubsequentRequests": true,
  // Show request name as the response tab title
  "rest-client.requestNameAsResponseTabTitle": false,
  // Show response in different tab
  "rest-client.showResponseInDifferentTab": false,
  // Suppress response body content type validation
  "rest-client.suppressResponseBodyContentTypeValidationWarning": false,
  // Timeout in milliseconds. 0 for infinity
  "rest-client.timeoutinmilliseconds": 0,
  // Enable/disable using filename from 'content-disposition' header, when saving response body
  "rest-client.useContentDispositionFilename": true,
  // Insert semicolon at end of line when completing CSS properties.
  "scss.completion.completePropertyWithSemicolon": true,
  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "scss.completion.triggerPropertyValueCompletion": true,
  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "scss.format.braceStyle": "collapse",
  // Enable/disable default SCSS formatter.
  "scss.format.enable": true,
  // Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
  "scss.format.maxPreserveNewLines": null,
  // Separate rulesets by a blank line.
  "scss.format.newlineBetweenRules": true,
  // Separate selectors with a new line.
  "scss.format.newlineBetweenSelectors": true,
  // Whether existing line breaks before rules and declarations should be preserved.
  "scss.format.preserveNewLines": true,
  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "scss.format.spaceAroundSelectorSeparator": false,
  // Show property and value documentation in SCSS hovers.
  "scss.hover.documentation": true,
  // Show references to MDN in SCSS hovers.
  "scss.hover.references": true,
  // Invalid number of parameters.
  "scss.lint.argumentsInColorFunction": "error",
  // Do not use `width` or `height` when using `padding` or `border`.
  "scss.lint.boxModel": "ignore",
  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "scss.lint.compatibleVendorPrefixes": "ignore",
  // Do not use duplicate style definitions.
  "scss.lint.duplicateProperties": "ignore",
  // Do not use empty rulesets.
  "scss.lint.emptyRules": "warning",
  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "scss.lint.float": "ignore",
  // `@font-face` rule must define `src` and `font-family` properties.
  "scss.lint.fontFaceProperties": "warning",
  // Hex colors must consist of 3, 4, 6 or 8 hex numbers.
  "scss.lint.hexColorLength": "error",
  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "scss.lint.idSelector": "ignore",
  // IE hacks are only necessary when supporting IE7 and older.
  "scss.lint.ieHack": "ignore",
  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "scss.lint.important": "ignore",
  // Import statements do not load in parallel.
  "scss.lint.importStatement": "ignore",
  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "scss.lint.propertyIgnoredDueToDisplay": "warning",
  // The universal selector (`*`) is known to be slow.
  "scss.lint.universalSelector": "ignore",
  // Unknown at-rule.
  "scss.lint.unknownAtRules": "warning",
  // Unknown property.
  "scss.lint.unknownProperties": "warning",
  // Unknown vendor specific property.
  "scss.lint.unknownVendorSpecificProperties": "ignore",
  // A list of properties that are not validated against the `unknownProperties` rule.
  "scss.lint.validProperties": [],
  // When using a vendor-specific prefix, also include the standard property.
  "scss.lint.vendorPrefix": "warning",
  // No unit for zero needed.
  "scss.lint.zeroUnits": "ignore",
  // Enables or disables all validations.
  "scss.validate": true,
  // Enable/disable the floating indicator that shows when focused in the simple browser.
  "simpleBrowser.focusLockIndicator.enabled": true,
  // Options for the disable lint rule action in the quick fix menu.
  "stylelint.codeAction.disableRuleComment": {
    "location": "separateLine"
  },
  // A Stylelint configuration object.
  "stylelint.config": null,
  // A path to the directory that relative paths defining "extends" and "plugins" are relative to.
  "stylelint.configBasedir": "",
  // Path to a JSON, YAML, or JS file that contains your configuration object. Use this option if you don't want Stylelint to search for a configuration file.
  "stylelint.configFile": "",
  // An absolute path to a custom PostCSS-compatible syntax module.
  "stylelint.customSyntax": "",
  // Control whether Stylelint is enabled or not.
  "stylelint.enable": true,
  // Ignore `stylelint-disable` (e.g. `/* stylelint-disable block-no-empty */`) comments.
  "stylelint.ignoreDisables": false,
  // The package manager you use to install node modules.
  "stylelint.packageManager": "npm",
  // Report `stylelint-disable` comments without a description.
  "stylelint.reportDescriptionlessDisables": false,
  // Also report errors for `stylelint-disable` comments that used for rules that don't exist within the configuration object.
  "stylelint.reportInvalidScopeDisables": false,
  // Also report errors for `stylelint-disable` comments that are not blocking a lint warning.
  "stylelint.reportNeedlessDisables": false,
  // An array of language ids which snippets are provided by Stylelint.
  "stylelint.snippet": [
    "css",
    "postcss"
  ],
  // Supply a custom path to the Stylelint module.
  "stylelint.stylelintPath": "",
  // An array of language ids which should be validated by Stylelint.
  "stylelint.validate": [
    "css",
    "postcss"
  ],
  // Custom elements completion action as simple like `<feTurbulence />`, one item to one name
  "svg.completion.elementsActionAsSimple": [],
  // Indicates whether the Completion List of Emmet-styles is enabled.
  "svg.completion.emmet": false,
  // Specifies whether advanced items that are not commonly used are displayed in the AutoComplete list.
  "svg.completion.showAdvanced": false,
  // Specifies whether advanced items that are deprecated are displayed in the AutoComplete list.
  "svg.completion.showDeprecated": false,
  // adds attributes to an outer <svg> element (disabled by default)
  "svg.minify.addAttributesToSVGElement": false,
  // add classnames to an outer <svg> element (disabled by default)
  "svg.minify.addClassesToSVGElement": false,
  // cleanup attributes from newlines, trailing, and repeating spaces
  "svg.minify.cleanupAttrs": true,
  // remove or cleanup enable-background attribute when possible
  "svg.minify.cleanupEnableBackground": true,
  // remove unused and minify used IDs
  "svg.minify.cleanupIDs": true,
  // round numeric values in attributes that take a list of numbers (like viewBox or enable-background)
  "svg.minify.cleanupListOfValues": true,
  // round numeric values to the fixed precision, remove default px units
  "svg.minify.cleanupNumericValues": true,
  // collapse useless groups
  "svg.minify.collapseGroups": true,
  // convert colors (from rgb() to #rrggbb, from #rrggbb to #rgb)
  "svg.minify.convertColors": true,
  // convert non-eccentric <ellipse> to <circle>
  "svg.minify.convertEllipseToCircle": true,
  // convert Path data to relative or absolute (whichever is shorter), convert one segment to another, trim useless delimiters, smart rounding, and much more
  "svg.minify.convertPathData": true,
  // convert some basic shapes to <path>
  "svg.minify.convertShapeToPath": true,
  // convert styles into attributes
  "svg.minify.convertStyleToAttrs": true,
  // collapse multiple transforms into one, convert matrices to the short aliases, and much more
  "svg.minify.convertTransform": true,
  // move and merge styles from <style> elements to element style attributes
  "svg.minify.inlineStyles": true,
  // merge multiple Paths into one
  "svg.minify.mergePaths": true,
  // minify <style> elements content with CSSO
  "svg.minify.minifyStyles": true,
  // move elements' attributes to their enclosing group
  "svg.minify.moveElemsAttrsToGroup": true,
  // move some group attributes to the contained elements
  "svg.minify.moveGroupAttrsToElems": true,
  // prefix IDs and classes with the SVG filename or an arbitrary string
  "svg.minify.prefixIds": true,
  // removes attributes of elements that match a css selector (disabled by default)
  "svg.minify.removeAttributesBySelector": false,
  // remove attributes by pattern (disabled by default)
  "svg.minify.removeAttrs": false,
  // remove comments
  "svg.minify.removeComments": true,
  // remove <desc>
  "svg.minify.removeDesc": true,
  // remove width/height and add viewBox if it's missing (opposite to removeViewBox, disable it first) (disabled by default)
  "svg.minify.removeDimensions": false,
  // remove doctype declaration
  "svg.minify.removeDoctype": true,
  // remove editors namespaces, elements, and attributes
  "svg.minify.removeEditorsNSData": true,
  // remove arbitrary elements by ID or className (disabled by default)
  "svg.minify.removeElementsByAttr": false,
  // remove empty attributes
  "svg.minify.removeEmptyAttrs": true,
  // remove empty Container elements
  "svg.minify.removeEmptyContainers": true,
  // remove empty Text elements
  "svg.minify.removeEmptyText": true,
  // remove hidden elements
  "svg.minify.removeHiddenElems": true,
  // remove <metadata>
  "svg.minify.removeMetadata": true,
  // remove non-inheritable group's "presentation" attributes
  "svg.minify.removeNonInheritableGroupAttrs": true,
  // removes elements that are drawn outside of the viewbox (disabled by default)
  "svg.minify.removeOffCanvasPaths": false,
  // remove raster images (disabled by default)
  "svg.minify.removeRasterImages": false,
  // remove <script> elements (disabled by default)
  "svg.minify.removeScriptElement": false,
  // remove <style> elements (disabled by default)
  "svg.minify.removeStyleElement": false,
  // remove <title>
  "svg.minify.removeTitle": true,
  // remove unknown elements content and attributes, remove attrs with default values
  "svg.minify.removeUnknownsAndDefaults": true,
  // remove unused namespaces declaration
  "svg.minify.removeUnusedNS": true,
  // remove elements of <defs> without id
  "svg.minify.removeUselessDefs": true,
  // remove useless stroke and fill attrs
  "svg.minify.removeUselessStrokeAndFill": true,
  // remove viewBox attribute when possible
  "svg.minify.removeViewBox": true,
  // removes xmlns attribute (for inline svg, disabled by default)
  "svg.minify.removeXMLNS": false,
  // remove XML processing instructions
  "svg.minify.removeXMLProcInst": true,
  // Find duplicated elements and replace them with links (disabled by default)
  "svg.minify.reusePaths": false,
  // sort element attributes for epic readability (disabled by default)
  "svg.minify.sortAttrs": false,
  // sort children of <defs> in order to improve compression
  "svg.minify.sortDefsChildren": true,
  // Show Grammar Highlight in path data
  "svg.pathDataHighlight": true,
  // Preview show fit mode at startup
  "svg.preview.autoFit": true,
  // Auto show preview on side when a SVG document open
  "svg.preview.autoShow": false,
  // Specifies the Svg Preview Background
  //  - editor: Editor Background
  //  - transparent: Transparent
  //  - dark-transparent: Dark Transparent
  //  - white: White
  //  - black: Black
  //  - custom: Custom
  "svg.preview.background": "editor",
  // Specifies the Svg Preview Custom Background
  "svg.preview.backgroundCustom": "#eee",
  // When you change the background color in the preview view, the new settings store the location
  //  - Global: Save new background in your global scope
  //  - Workspace: Save new background in your workspace
  //  - NoSave: Only temporarily changed, configuration will not be saved
  "svg.preview.backgroundSaveTo": "Workspace",
  // If you just want use other previewer
  "svg.preview.disable": false,
  // How show svg content in preview view
  //  - svg: SVG embedded in HTML
  //  - img: Show SVG in IMG element
  "svg.preview.mode": "svg",
  // The scale of change of the zoom operation
  "svg.preview.scaleZoom": 2,
  // Preview show cross line (will hide mouse pointer) by default, you can switch it from toolbar
  "svg.preview.showCrossLine": false,
  // Preview show ruler by default, you can switch it from toolbar
  "svg.preview.showRuler": false,
  // This SVG preview toolbar size
  "svg.preview.toolbarSize": "middle",
  // Svg Preview Auto Translate the external address to the Data URI, This option let Preview can show CROS content, but will not change real situation.
  "svg.preview.translateExternalAddress": false,
  // How the previewer interacts with the user
  //  - onlyOne: Only one preview window will be displayed
  //  - oneByOne: Each SVG document corresponds to a separate preview window
  "svg.preview.viewMode": "onlyOne",
  // Zoom select dropdown options
  "svg.preview.zoomOptions": [
    "25%",
    "50%",
    "100%",
    "200%",
    "400%",
    "800%"
  ],
  // Exclude Glob pattern for `Preview All Svg`
  "svg.previewAll.exclude": "**​/node_modules/**",
  // Enable/disable automatic closing of JSX tags.
  "typescript.autoClosingTags": true,
  // Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
  "typescript.check.npmIsInstalled": true,
  // Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
  "typescript.disableAutomaticTypeAcquisition": false,
  // Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
  "typescript.enablePromptUseWorkspaceTsdk": false,
  // Enable expanding/contracting the hover to reveal more/less information from the TS server. Requires TypeScript 5.9+.
  "typescript.experimental.expandableHover": true,
  // Disables TypeScript and JavaScript language features to allow usage of the TypeScript Go experimental extension. Requires TypeScript Go to be installed and configured. Requires reloading extensions after changing this setting.
  "typescript.experimental.useTsgo": false,
  // Enable/disable default TypeScript formatter.
  "typescript.format.enable": true,
  // Indent case clauses in switch statements. Requires using TypeScript 5.1+ in the workspace.
  "typescript.format.indentSwitchCase": true,
  // Defines space handling after a comma delimiter.
  "typescript.format.insertSpaceAfterCommaDelimiter": true,
  // Defines space handling after the constructor keyword.
  "typescript.format.insertSpaceAfterConstructor": false,
  // Defines space handling after function keyword for anonymous functions.
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
  // Defines space handling after keywords in a control flow statement.
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
  // Defines space handling after opening and before closing empty braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
  // Defines space handling after opening and before closing JSX expression braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
  // Defines space handling after opening and before closing non-empty braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  // Defines space handling after opening and before closing non-empty brackets.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
  // Defines space handling after opening and before closing non-empty parenthesis.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
  // Defines space handling after opening and before closing template string braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  // Defines space handling after a semicolon in a for statement.
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,
  // Defines space handling after type assertions in TypeScript.
  "typescript.format.insertSpaceAfterTypeAssertion": false,
  // Defines space handling after a binary operator.
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
  // Defines space handling before function argument parentheses.
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,
  // Defines whether an open brace is put onto a new line for control blocks or not.
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,
  // Defines whether an open brace is put onto a new line for functions or not.
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,
  // Defines handling of optional semicolons.
  //  - ignore: Don't insert or remove any semicolons.
  //  - insert: Insert semicolons at statement ends.
  //  - remove: Remove unnecessary semicolons.
  "typescript.format.semicolons": "ignore",
  // Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
  "typescript.implementationsCodeLens.enabled": false,
  // Enable/disable implementations CodeLens on interface methods.
  "typescript.implementationsCodeLens.showOnInterfaceMethods": false,
  // Enable/disable inlay hints for member values in enum declarations:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  "typescript.inlayHints.enumMemberValues.enabled": false,
  // Enable/disable inlay hints for implicit return types on function signatures:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  "typescript.inlayHints.functionLikeReturnTypes.enabled": false,
  // Enable/disable inlay hints for parameter names:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  //  - none: Disable parameter name hints.
  //  - literals: Enable parameter name hints only for literal arguments.
  //  - all: Enable parameter name hints for literal and non-literal arguments.
  "typescript.inlayHints.parameterNames.enabled": "none",
  // Suppress parameter name hints on arguments whose text is identical to the parameter name.
  "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  // Enable/disable inlay hints for implicit parameter types:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  "typescript.inlayHints.parameterTypes.enabled": false,
  // Enable/disable inlay hints for implicit types on property declarations:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  "typescript.inlayHints.propertyDeclarationTypes.enabled": false,
  // Enable/disable inlay hints for implicit variable types:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  "typescript.inlayHints.variableTypes.enabled": false,
  // Suppress type hints on variables whose name is identical to the type name.
  "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
  // Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
  //  - auto: Use VS Code's configured display language.
  //  - de: Deutsch
  //  - es: español
  //  - en: English
  //  - fr: français
  //  - it: italiano
  //  - ja: 日本語
  //  - ko: 한국어
  //  - ru: русский
  //  - zh-CN: 中文(简体)
  //  - zh-TW: 中文(繁體)
  "typescript.locale": "auto",
  // Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
  "typescript.npm": "",
  // Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.
  "typescript.preferences.autoImportFileExcludePatterns": [],
  // Specify regular expressions to exclude auto imports with matching import specifiers. Examples:
  //
  // - `^node:`
  // - `lib/internal` (slashes don't need to be escaped...)
  // - `/lib\/internal/i` (...unless including surrounding slashes for `i` or `u` flags)
  // - `^lodash$` (only allow subpath imports from lodash)
  "typescript.preferences.autoImportSpecifierExcludeRegexes": [],
  // Preferred path style for auto imports.
  //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
  //  - relative: Prefers a relative path to the imported file location.
  //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
  //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
  "typescript.preferences.importModuleSpecifier": "shortest",
  // Preferred path ending for auto imports.
  //  - auto: Use project settings to select a default.
  //  - minimal: Shorten `./component/index.js` to `./component`.
  //  - index: Shorten `./component/index.js` to `./component/index`.
  //  - js: Do not shorten path endings; include the `.js` or `.ts` extension.
  "typescript.preferences.importModuleSpecifierEnding": "auto",
  // Enable/disable searching `package.json` dependencies for available auto imports.
  //  - auto: Search dependencies based on estimated performance impact.
  //  - on: Always search dependencies.
  //  - off: Never search dependencies.
  "typescript.preferences.includePackageJsonAutoImports": "auto",
  // Preferred style for JSX attribute completions.
  //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.
  //  - braces: Insert `={}` after attribute names.
  //  - none: Only insert attribute names.
  "typescript.preferences.jsxAttributeCompletionStyle": "auto",
  // Advanced preferences that control how imports are ordered.
  "typescript.preferences.organizeImports": {},
  // Include the `type` keyword in auto-imports whenever possible. Requires using TypeScript 5.3+ in the workspace.
  "typescript.preferences.preferTypeOnlyAutoImports": false,
  // Preferred quote style to use for Quick Fixes.
  //  - auto: Infer quote type from existing code
  //  - single: Always use single quotes: `'`
  //  - double: Always use double quotes: `"`
  "typescript.preferences.quoteStyle": "auto",
  // When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.
  "typescript.preferences.renameMatchingJsxTags": true,
  // Enable/disable introducing aliases for object shorthand properties during renames.
  "typescript.preferences.useAliasesForRenames": true,
  // Makes `Go to Definition` avoid type declaration files when possible by triggering `Go to Source Definition` instead. This allows `Go to Source Definition` to be triggered with the mouse gesture.
  "typescript.preferGoToSourceDefinition": false,
  // Enable/disable references CodeLens in TypeScript files.
  "typescript.referencesCodeLens.enabled": false,
  // Enable/disable references CodeLens on all functions in TypeScript files.
  "typescript.referencesCodeLens.showOnAllFunctions": false,
  // Report style checks as warnings.
  "typescript.reportStyleChecksAsWarnings": true,
  // Enable/disable auto import suggestions.
  "typescript.suggest.autoImports": true,
  // Enable/disable snippet completions for class members.
  "typescript.suggest.classMemberSnippets.enabled": true,
  // Complete functions with their parameter signature.
  "typescript.suggest.completeFunctionCalls": false,
  // Enable/disable suggestion to complete JSDoc comments.
  "typescript.suggest.completeJSDocs": true,
  // Enable/disable autocomplete suggestions.
  "typescript.suggest.enabled": true,
  // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
  "typescript.suggest.includeAutomaticOptionalChainCompletions": true,
  // Enable/disable auto-import-style completions on partially-typed import statements.
  "typescript.suggest.includeCompletionsForImportStatements": true,
  // Enable/disable generating `@returns` annotations for JSDoc templates.
  "typescript.suggest.jsdoc.generateReturns": true,
  // Enable/disable snippet completions for methods in object literals.
  "typescript.suggest.objectLiteralMethodSnippets.enabled": true,
  // Enable/disable suggestions for paths in import statements and require calls.
  "typescript.suggest.paths": true,
  // Enable/disable suggestion diagnostics for TypeScript files in the editor.
  "typescript.suggestionActions.enabled": true,
  // Controls auto detection of tsc tasks.
  //  - on: Create both build and watch tasks.
  //  - off: Disable this feature.
  //  - build: Only create single run compile tasks.
  //  - watch: Only create compile and watch tasks.
  "typescript.tsc.autoDetect": "on",
  // Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
  //
  // - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
  // - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
  //
  // See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
  "typescript.tsdk": "",
  // Enables region-based diagnostics in TypeScript. Requires using TypeScript 5.6+ in the workspace.
  "typescript.tsserver.enableRegionDiagnostics": true,
  // Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.enableTracing": false,
  // Enables project wide error reporting.
  "typescript.tsserver.experimental.enableProjectDiagnostics": false,
  // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.log": "off",
  // The maximum amount of memory (in MB) to allocate to the TypeScript server process. To use a memory limit greater than 4 GB, use `typescript.tsserver.nodePath` to run TS Server with a custom Node installation.
  "typescript.tsserver.maxTsServerMemory": 3072,
  // Run TS Server on a custom Node installation. This can be a path to a Node executable, or 'node' if you want VS Code to detect a Node installation.
  "typescript.tsserver.nodePath": "",
  // Additional paths to discover TypeScript Language Service plugins.
  "typescript.tsserver.pluginPaths": [],
  // Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
  //  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
  //  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
  //  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
  "typescript.tsserver.useSyntaxServer": "auto",
  // Configure which watching strategies should be used to keep track of files and directories.
  "typescript.tsserver.watchOptions": "vscode",
  // Enable/disable project-wide IntelliSense on web. Requires that VS Code is running in a trusted context.
  "typescript.tsserver.web.projectWideIntellisense.enabled": true,
  // Suppresses semantic errors on web even when project wide IntelliSense is enabled. This is always on when project wide IntelliSense is not enabled or available. See `typescript.tsserver.web.projectWideIntellisense.enabled`
  "typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": false,
  // Enable/disable package acquisition on the web. This enables IntelliSense for imported packages. Requires `typescript.tsserver.web.projectWideIntellisense.enabled`. Currently not supported for Safari.
  "typescript.tsserver.web.typeAcquisition.enabled": true,
  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
  //  - prompt: Prompt on each rename.
  //  - always: Always update paths automatically.
  //  - never: Never rename paths and don't prompt.
  "typescript.updateImportsOnFileMove.enabled": "prompt",
  // Automatically update imports when pasting code. Requires TypeScript 5.6+.
  "typescript.updateImportsOnPaste.enabled": true,
  // Enable/disable TypeScript validation.
  "typescript.validate.enable": true,
  // Exclude symbols that come from library files in `Go to Symbol in Workspace` results. Requires using TypeScript 5.3+ in the workspace.
  "typescript.workspaceSymbols.excludeLibrarySymbols": true,
  // Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
  //  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols.
  //  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
  "typescript.workspaceSymbols.scope": "allOpenProjects",
  // This setting will let you change the default file icon for dark themes.
  "vsicons.associations.fileDefault.file": null,
  // This setting will let you change the default file icon for light themes.
  "vsicons.associations.fileDefault.file_light": null,
  // These custom associations will override the file icon associations defined by default.
  "vsicons.associations.files": [],
  // This setting will let you change the default folder icon for dark themes.
  "vsicons.associations.folderDefault.folder": null,
  // This setting will let you change the default folder icon for light themes.
  "vsicons.associations.folderDefault.folder_light": null,
  // This setting will let you change the default root folder icon for dark themes.
  "vsicons.associations.folderDefault.root_folder": null,
  // This setting will let you change the default root folder icon for light themes.
  "vsicons.associations.folderDefault.root_folder_light": null,
  // These custom associations will override the folder icon associations defined by default.
  "vsicons.associations.folders": [],
  // The physical path to the parent folder where the custom icons folder resides on your local machine.
  "vsicons.customIconFolderPath": "",
  // If set to 'true', when manually changing the configurations, the 'restart' message won't be shown.
  "vsicons.dontShowConfigManuallyChangedMessage": false,
  // If set to 'true', the new version message won't be shown anymore.
  "vsicons.dontShowNewVersionMessage": false,
  // If set to 'true', the extension will match some of the common Angular patterns.
  "vsicons.presets.angular": false,
  // If set to 'true', all folders will have the default folder icon.
  "vsicons.presets.foldersAllDefaultIcon": false,
  // If set to 'true', the extension will hide the folder arrows in the 'Explorer'.
  "vsicons.presets.hideExplorerArrows": false,
  // If set to 'true', all folders will be hidden.
  "vsicons.presets.hideFolders": false,
  // If set to 'true', the extension will use the official JS icon.
  "vsicons.presets.jsOfficial": false,
  // If set to 'true', the extension will use the official JSON icon.
  "vsicons.presets.jsonOfficial": false,
  // If set to 'true', the extension will match some of the common NestJS patterns.
  "vsicons.presets.nestjs": false,
  // If set to 'true', the extension will use the official TS icon.
  "vsicons.presets.tsOfficial": false,
  // If set to 'true', the extension will use the official YAML icon.
  "vsicons.presets.yamlOfficial": false,
  // If set to 'true', the extension will restart automatically on project detection.
  "vsicons.projectDetection.autoReload": false,
  // If set to 'true', the extension will disable the project detection.
  "vsicons.projectDetection.disableDetect": false,
  // Register XML catalog files. See how to configure [XML catalog with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-xsd%22%7D%5D) or [XML catalog with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-dtd%22%7D%5D) for more information.
  "xml.catalogs": [],
  // Enable/disable XML CodeLens. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22CodeLens%22%2C%22section%22%3A%22Code%20Lens%22%7D%5D) for information about CodeLens features
  "xml.codeLens.enabled": false,
  // Allows colors for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLColorsFeatures%22%2C%22section%22%3A%22xmlcolorsfeatures%22%7D%5D) for more information.
  "xml.colors": [],
  // Enable/disable the content of an element being removed when the element start tag is turned into a self-closing tag. The default setting is to remove the content. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22auto-close-removes-content%22%7D%5D) for more information.
  "xml.completion.autoCloseRemovesContent": true,
  // Enable/disable autoclosing of XML tags. Default is `true`.
  //
  // IMPORTANT: Turn off `editor.autoClosingTags` for this to work.
  "xml.completion.autoCloseTags": true,
  // Download external resources like referenced DTD, XSD. Default is `true`.
  "xml.downloadExternalResources.enabled": true,
  // An array of paths to JARs that should be contributed to the LemMinX classpath. The paths can include glob patterns. This is intended to be used as a tool for developing extensions to vscode-xml. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22extension-jars%22%7D%5D) for more information
  "xml.extension.jars": [],
  // Allows XML schemas/ DTD to be associated to file name patterns. Please refer to [XML file association with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-xsd%22%7D%5D) or [XML file association with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-dtd%22%7D%5D) for more information.
  //
  // Example:
  // ```json
  // [{
  //   "pattern": "file1.xml",
  //   "systemId": "path/to/file.xsd"
  // },
  // {
  //   "pattern": "**/*.xsd",
  //   "systemId": "http://www.w3.org/2001/XMLSchema.xsd"
  // }]
  // ```
  "xml.fileAssociations": [],
  // Allows file path for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLFilePathSupport%22%2C%22section%22%3A%22xmlfilepathsfeatures%22%7D%5D) for more information.
  "xml.filePathSupport.mappings": [],
  // Minimize the closing tag after folding. Default is `false`.
  "xml.foldings.includeClosingTagInFold": false,
  // The option to put a closing bracket on a newline when `xml.format.splitAttributes` is `true`. Default value is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatclosingbracketnewline%22%7D%5D) for more information.
  "xml.format.closingBracketNewLine": false,
  // Expand/collapse empty elements. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatemptyelements%22%7D%5D) for more information.
  "xml.format.emptyElements": "ignore",
  // Enable/disable ability to format document. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenabled%22%7D%5D) for more information.
  "xml.format.enabled": true,
  // Enforce `preferred` quote style (set by `xml.preferences.quoteStyle`) or `ignore` quote style when formatting. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenforcequotestyle%22%7D%5D) for more information.
  //  - preferred: Use preferred quote style set by `xml.preferences.quoteStyle` when formatting.
  //  - ignore: Ignore quote style formatting.
  "xml.format.enforceQuoteStyle": "ignore",
  // Use Schema/DTD grammar information while formatting. Default is `true`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatgrammarawareformatting%22%7D%5D) for more information.
  "xml.format.grammarAwareFormatting": true,
  // Set to `true` to join lines in CDATA content during formatting. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincdatalines%22%7D%5D) for more information.
  "xml.format.joinCDATALines": false,
  // Join comment content on format. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincommentlines%22%7D%5D) for more information.
  "xml.format.joinCommentLines": false,
  // Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincontentlines%22%7D%5D) for more information.
  "xml.format.joinContentLines": false,
  // Enable/disable legacy formatter. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatlegacy%22%7D%5D) for more information.
  "xml.format.legacy": false,
  // Max line width. Set to `0` to disable this setting. Default is `100`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatmaxlinewidth%22%7D%5D) for more information.
  "xml.format.maxLineWidth": 100,
  // Preserve line breaks that appear before and after attributes. This setting is overridden if `xml.format.splitAttributes` is set to `splitNewLine` or `alignWithFirstAttr`. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveattributelinebreaks%22%7D%5D) for more information.
  "xml.format.preserveAttributeLineBreaks": true,
  // Preserve new lines that separate tags. The value represents the maximum number of new lines per section. A value of 0 removes all new lines. Default is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservednewlines%22%7D%5D) for more information.
  "xml.format.preservedNewlines": 2,
  // Preserve empty content/whitespace in a tag. Default is `false`. Supported only with legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveemptycontent%22%7D%5D) for more information.
  "xml.format.preserveEmptyContent": false,
  // Element names for which spaces will be preserved. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservespace%22%7D%5D) for more information.
  "xml.format.preserveSpace": [
    "xsl:text",
    "xsl:comment",
    "xsl:processing-instruction",
    "literallayout",
    "programlisting",
    "screen",
    "synopsis",
    "pre",
    "xd:pre"
  ],
  // Insert space before end of self closing tag.
  // Example:
  //   ```<tag/> -> <tag />```. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatspacebeforeemptyclosetag%22%7D%5D) for more information.
  "xml.format.spaceBeforeEmptyCloseTag": true,
  // Split multiple attributes each onto a new line or align attributes to the first. Default is `preserve`. Indicate level of indentation with `xml.format.splitAttributesIndentSize`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributes%22%7D%5D) for more information.
  "xml.format.splitAttributes": "preserve",
  // How many levels to indent the attributes by when `xml.format.splitAttributes` is `true`. Default value is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributesindentsize%22%7D%5D) for more information
  "xml.format.splitAttributesIndentSize": 2,
  // Split `xsi:schemaLocation` content. Default is `onPair`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatxsischemalocationsplit%22%7D%5D) for more information
  //  - onElement: Put a new line after each namespace and URI, arranging them into one column.
  //  - onPair: Put a new line after each URI, arranging the content into pairs of namespace and URI.
  //  - none: Ignore `xsi:schemaLocation` content formatting.
  "xml.format.xsiSchemaLocationSplit": "onPair",
  // Specifies the folder path to the JDK (11 or more recent) used to launch the XML Language Server if the Java server is being run.
  // On Windows, backslashes must be escaped, i.e.
  // `"xml.java.home": "C:\\Program Files\\Java\\jdk11"`. For more information, please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22java-home%22%7D%5D).
  "xml.java.home": null,
  // Enable/disable logging to the Output view. Default is `true`.
  "xml.logs.client": true,
  // Preferred quote style to use for completion: `single` quotes, `double` quotes. Default is `double`.
  "xml.preferences.quoteStyle": "double",
  // Specifies the source of the XML schema documentation displayed on hover and completion. Default is `all`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22documentation-type%22%7D%5D) for more information.
  //  - documentation: Documentation comes from the `xs:documentation` element.
  //  - appinfo: Documentation comes from the `xs:appinfo` element.
  //  - all: Documentation comes from the `xs:documentation` and `xs:appinfo` elements.
  //  - none: Displays no documentation.
  "xml.preferences.showSchemaDocumentationType": "all",
  // Allows references for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLReferencesFeatures%22%2C%22section%22%3A%22xmlreferencesfeatures%22%7D%5D) for more information.
  "xml.references": [],
  // Command line arguments to supply to the binary server when the binary server is being used. Takes into effect after relaunching VSCode. Please refer to [this website for the available options](https://www.graalvm.org/reference-manual/native-image/HostedvsRuntimeOptions/). For example, you can increase the maximum memory that the server can use to 1 GB by adding `-Xmx1g`
  "xml.server.binary.args": "",
  // Specify the path of a custom binary version of the XML server to use. A binary will be downloaded if this is not set.
  "xml.server.binary.path": "",
  // List of the SHA256 hashes of trusted copies of the lemminx (XML language server) binary. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22trusted-binary-hashes%22%7D%5D) for more information
  "xml.server.binary.trustedHashes": [],
  // By default, vscode-xml tries to run the Java version of the XML Language Server. If no Java is detected, vscode-xml runs the binary XML language server. When this setting is enabled, the binary will also be used even if Java is installed. If there are additions to the XML Language Server provided by other extensions, Java will be used (if available) even if this setting is enabled.
  "xml.server.preferBinary": false,
  // The XML Language server allows other VSCode extensions to extend its functionality. It requires Java-specific features in order to do this. If extensions to the XML language server are detected, but a binary XML language server is run, a warning will appear. This setting can be used to disable this warning.
  "xml.server.silenceExtensionWarning": false,
  // Specifies extra VM arguments used to launch the XML Language Server. Eg. use `-Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector. Please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-vm-arguments%22%7D%5D) for more information on the Java server arguments.
  "xml.server.vmargs": "-Xmx64M",
  // Set a custom folder path for cached XML Schemas. An absolute path is expected, although the `~` prefix (for the user home directory) is supported. Default is `~/.lemminx`. Please refer to the [cache documentation](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-cache-path%22%7D%5D) for more information.
  "xml.server.workDir": "~/.lemminx",
  // Enable/disable document symbols (Outline). Default is `true`. No symbols are given if `"xml.symbols.enabled": false`.
  "xml.symbols.enabled": true,
  // Disable document symbols (Outline) for the given file name patterns. Updating file name patterns does not automatically reload the Outline view for the relevant file(s). Each file must either be reopened or changed, in order to trigger an Outline view reload.
  //
  // Example:
  // ```
  // [
  //  "**/*LargeFile.xml"
  // ]```.
  "xml.symbols.excluded": [],
  // Allows XML symbols filter to be associated to file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsfilters%22%7D%5D) for more information..
  //
  // Example:
  // ```json
  // [
  //   {
  //     "pattern": "pom.xml",
  //     "expressions": [
  //       {
  //         "xpath": "//text()"
  //       }
  //     ]
  //   }
  // ]
  // ```
  "xml.symbols.filters": [],
  // The maximum number of outline symbols and folding regions computed (limited for performance reasons). Default is `5000`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsmaxitemscomputed%22%7D%5D) for more information.
  "xml.symbols.maxItemsComputed": 5000,
  // Show referenced grammars in the Outline. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsshowreferencedgrammars%22%7D%5D) for more information.
  "xml.symbols.showReferencedGrammars": true,
  // Traces the communication between VS Code and the XML language server in the Output view. Default is `off`.
  "xml.trace.server": "off",
  // Enable/disable if a fatal error is thrown if the incoming document contains a DOCTYPE declaration. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22disallow-doc-type-declarations%22%7D%5D) for more information
  "xml.validation.disallowDocTypeDecl": false,
  // Enable/disable all validation. Default is `true`.
  "xml.validation.enabled": true,
  //
  "xml.validation.filters": [
    {
      "noGrammar": "ignore",
      "pattern": "**.exsd",
      "schema": {
        "enabled": "never"
      }
    },
    {
      "noGrammar": "ignore",
      "pattern": "**{.project,.classpath,plugin.xml,feature.xml,category.xml,.target,.product}"
    }
  ],
  // Enable/disable namespaces validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlnamespaceschemaenabled%22%7D%5D) for more information.
  //  - always: Enable namespaces validation.
  //  - never: Disable namespaces validation.
  //  - onNamespaceEncountered: Enable namespaces validation only when the root element declares an xmlns namespace.
  "xml.validation.namespaces.enabled": "always",
  // The message severity when a document has no associated grammar. Default is `hint`.
  "xml.validation.noGrammar": "hint",
  // Enable/disable resolve of external entities. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22resolve-external-entities%22%7D%5D) for more information. Disabled for untrusted workspaces
  "xml.validation.resolveExternalEntities": false,
  // Enable/disable schema based validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationschemaenabled%22%7D%5D) for more information.
  //  - always: Enable schema based validation.
  //  - never: Disable schema based validation.
  //  - onValidSchema: Enable schema based validation only when the declared xsi:schemaLocation hint or xsi:noNamespaceSchemaLocation is valid for the root element.
  "xml.validation.schema.enabled": "always",
  // Enable/disable validation for `xi:include`. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationxincludeenabled%22%7D%5D) for more information.
  "xml.validation.xInclude.enabled": false,
  // Enables the XML Document view in the explorer for XML documents.
  "xmlTools.enableXmlTreeView": true,
  // Enables auto-reveal of elements in the XML Document view when a start tag is clicked in the editor.
  "xmlTools.enableXmlTreeViewCursorSync": false,
  // Enables attribute and child element counts in the XML Document view.
  "xmlTools.enableXmlTreeViewMetadata": true,
  // Enforces a space before the forward slash at the end of a self-closing XML tag.
  "xmlTools.enforcePrettySelfClosingTagOnFormat": false,
  // Ignore default xmlns attributes when evaluating XPath.
  "xmlTools.ignoreDefaultNamespace": true,
  // Remember the last XPath query used.
  "xmlTools.persistXPathQuery": true,
  // Remove XML comments during minification.
  "xmlTools.removeCommentsOnMinify": false,
  // Put each attribute on a new line when formatting XML. Overrides `xmlTools.splitXmlnsOnFormat` if set to `true`.
  "xmlTools.splitAttributesOnFormat": false,
  // Put each xmlns attribute on a new line when formatting XML.
  "xmlTools.splitXmlnsOnFormat": true,
  // Supported XML Formatters: classic
  "xmlTools.xmlFormatterImplementation": "v2",
  // Arguments to be passed to the XQuery execution engine.
  "xmlTools.xqueryExecutionArguments": [
    "-xquery",
    "$(script)",
    "-in",
    "$(input)",
    "-out",
    "$(input).output.xml"
  ],
  // The full path to the executable to run when executing XQuery scripts.
  "xmlTools.xqueryExecutionEngine": "",
  // The maximum number of input files to enumerate when executing XQuery scripts.
  "xmlTools.xqueryExecutionInputLimit": 100,
  // The pattern used to search for input XML files when executing XQuery scripts.
  "xmlTools.xqueryExecutionInputSearchPattern": "**/*.xml",
  // Configure settings to be overridden for chatmode.
  "[chatmode]": {
    "editor.wordWrap": "on",
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.quickSuggestions": {
      "comments": "off",
      "other": "off",
      "strings": "off"
    }
  },
  // Configure settings to be overridden for clojure.
  "[clojure]": {
    "diffEditor.ignoreTrimWhitespace": false
  },
  // Configure settings to be overridden for coffeescript.
  "[coffeescript]": {
    "editor.defaultColorDecorators": "never",
    "diffEditor.ignoreTrimWhitespace": false
  },
  // Configure settings to be overridden for csharp.
  "[csharp]": {
    "editor.maxTokenizationLineLength": 2500
  },
  // Configure settings to be overridden for css.
  "[css]": {
    "editor.suggest.insertMode": "replace",
    "cSpell.fixSpellingWithRenameProvider": false
  },
  // Configure settings to be overridden for dockercompose.
  "[dockercompose]": {
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced",
    "editor.insertSpaces": true
  },
  // Configure settings to be overridden for dockerfile.
  "[dockerfile]": {
    "editor.quickSuggestions": {
      "strings": true
    }
  },
  // Configure settings to be overridden for dtd.
  "[dtd]": {
    "editor.autoClosingBrackets": "never",
    "files.trimFinalNewlines": true
  },
  // Configure settings to be overridden for fsharp.
  "[fsharp]": {
    "diffEditor.ignoreTrimWhitespace": false
  },
  // Configure settings to be overridden for git-commit.
  "[git-commit]": {
    "editor.wordWrap": "off",
    "editor.rulers": [
      50,
      72
    ],
    "workbench.editor.restoreViewState": false
  },
  // Configure settings to be overridden for git-rebase.
  "[git-rebase]": {
    "workbench.editor.restoreViewState": false
  },
  // Configure settings to be overridden for go.
  "[go]": {
    "editor.insertSpaces": false
  },
  // Configure settings to be overridden for handlebars.
  "[handlebars]": {
    "editor.suggest.insertMode": "replace"
  },
  // Configure settings to be overridden for html.
  "[html]": {
    "editor.suggest.insertMode": "replace"
  },
  // Configure settings to be overridden for http.
  "[http]": {
    "editor.quickSuggestions": {
      "comments": false,
      "other": true,
      "strings": true
    }
  },
  // Configure settings to be overridden for instructions.
  "[instructions]": {
    "editor.wordWrap": "on",
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.quickSuggestions": {
      "comments": "off",
      "other": "off",
      "strings": "off"
    }
  },
  // Configure settings to be overridden for jade.
  "[jade]": {
    "diffEditor.ignoreTrimWhitespace": false
  },
  // Configure settings to be overridden for javascript.
  "[javascript]": {
    "editor.maxTokenizationLineLength": 2500
  },
  // Configure settings to be overridden for json.
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },
  // Configure settings to be overridden for jsonc.
  "[jsonc]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },
  // Configure settings to be overridden for julia.
  "[julia]": {
    "editor.defaultColorDecorators": "never"
  },
  // Configure settings to be overridden for latex.
  "[latex]": {
    "editor.formatOnPaste": false,
    "editor.suggestSelection": "recentlyUsedByPrefix"
  },
  // Configure settings to be overridden for less.
  "[less]": {
    "editor.suggest.insertMode": "replace"
  },
  // Configure settings to be overridden for makefile.
  "[makefile]": {
    "editor.insertSpaces": false
  },
  // Configure settings to be overridden for markdown.
  "[markdown]": {
    "editor.wordWrap": "on",
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.quickSuggestions": {
      "comments": "off",
      "other": "off",
      "strings": "off"
    },
    "cSpell.advanced.feature.useReferenceProviderRemove": "/^#+\\s/",
    "cSpell.advanced.feature.useReferenceProviderWithRename": true,
    "cSpell.fixSpellingWithRenameProvider": true
  },
  // Configure settings to be overridden for plaintext.
  "[plaintext]": {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false
  },
  // Configure settings to be overridden for prompt.
  "[prompt]": {
    "editor.wordWrap": "on",
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.quickSuggestions": {
      "comments": "off",
      "other": "off",
      "strings": "off"
    }
  },
  // Configure settings to be overridden for python.
  "[python]": {
    "editor.defaultColorDecorators": "never",
    "diffEditor.ignoreTrimWhitespace": false
  },
  // Configure settings to be overridden for ruby.
  "[ruby]": {
    "editor.defaultColorDecorators": "never"
  },
  // Configure settings to be overridden for scminput.
  "[scminput]": {
    "cSpell.fixSpellingWithRenameProvider": false
  },
  // Configure settings to be overridden for scss.
  "[scss]": {
    "editor.suggest.insertMode": "replace",
    "cSpell.fixSpellingWithRenameProvider": false
  },
  // Configure settings to be overridden for search-result.
  "[search-result]": {
    "editor.lineNumbers": "off"
  },
  // Configure settings to be overridden for shellscript.
  "[shellscript]": {
    "editor.defaultColorDecorators": "never",
    "files.eol": "\n"
  },
  // Configure settings to be overridden for snippets.
  "[snippets]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },
  // Configure settings to be overridden for svg.
  "[svg]": {
    "editor.autoClosingBrackets": "never",
    "files.trimFinalNewlines": true
  },
  // Configure settings to be overridden for xml.
  "[xml]": {
    "editor.autoClosingBrackets": "never",
    "files.trimFinalNewlines": true
  },
  // Configure settings to be overridden for xsl.
  "[xsl]": {
    "editor.autoClosingBrackets": "never",
    "files.trimFinalNewlines": true
  },
  // Configure settings to be overridden for yaml.
  "[yaml]": {
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced",
    "editor.defaultColorDecorators": "never",
    "editor.insertSpaces": true,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.quickSuggestions": {
      "strings": "on"
    }
  }
}
